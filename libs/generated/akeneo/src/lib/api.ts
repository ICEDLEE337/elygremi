/* tslint:disable */
/* eslint-disable */
/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AppCatalogList
 */
export interface AppCatalogList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof AppCatalogList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Catalog id
     * @type {string}
     * @memberof AppCatalogList
     */
    'id'?: string;
    /**
     * Catalog name
     * @type {string}
     * @memberof AppCatalogList
     */
    'name'?: string;
    /**
     * Whether the catalog is enabled or not
     * @type {boolean}
     * @memberof AppCatalogList
     */
    'enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface AppCatalogListAllOf
 */
export interface AppCatalogListAllOf {
    /**
     * Catalog id
     * @type {string}
     * @memberof AppCatalogListAllOf
     */
    'id'?: string;
    /**
     * Catalog name
     * @type {string}
     * @memberof AppCatalogListAllOf
     */
    'name'?: string;
    /**
     * Whether the catalog is enabled or not
     * @type {boolean}
     * @memberof AppCatalogListAllOf
     */
    'enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * 
     * @type {ReferenceEntitiesLinks}
     * @memberof Asset
     */
    '_links'?: ReferenceEntitiesLinks;
}
/**
 * 
 * @export
 * @interface AssetFamilies
 */
export interface AssetFamilies {
    /**
     * 
     * @type {ReferenceEntitiesLinks}
     * @memberof AssetFamilies
     */
    '_links'?: ReferenceEntitiesLinks;
}
/**
 * 
 * @export
 * @interface AssetFamilyItemList
 */
export interface AssetFamilyItemList {
    /**
     * 
     * @type {AssetFamilyItemListLinks}
     * @memberof AssetFamilyItemList
     */
    '_links'?: AssetFamilyItemListLinks;
}
/**
 * 
 * @export
 * @interface AssetFamilyItemListLinks
 */
export interface AssetFamilyItemListLinks {
    /**
     * 
     * @type {AssetFamilyItemListLinksSelf}
     * @memberof AssetFamilyItemListLinks
     */
    'self'?: AssetFamilyItemListLinksSelf;
}
/**
 * 
 * @export
 * @interface AssetFamilyItemListLinksSelf
 */
export interface AssetFamilyItemListLinksSelf {
    /**
     * URI of the resource
     * @type {string}
     * @memberof AssetFamilyItemListLinksSelf
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface AssetFamilyList
 */
export interface AssetFamilyList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof AssetFamilyList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Asset family code
     * @type {string}
     * @memberof AssetFamilyList
     */
    'code': string;
    /**
     * 
     * @type {AssetFamilyListAllOfLabels}
     * @memberof AssetFamilyList
     */
    'labels'?: AssetFamilyListAllOfLabels;
    /**
     * Attribute code that is used as the main media of the asset family.
     * @type {string}
     * @memberof AssetFamilyList
     */
    'attribute_as_main_media'?: string;
    /**
     * 
     * @type {AssetFamilyListAllOfNamingConvention}
     * @memberof AssetFamilyList
     */
    'naming_convention'?: AssetFamilyListAllOfNamingConvention;
    /**
     * The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href=\'/concepts/asset-manager.html#focus-on-the-product-link-rule\'>here</a>.
     * @type {Array<AssetFamilyListAllOfProductLinkRules>}
     * @memberof AssetFamilyList
     */
    'product_link_rules'?: Array<AssetFamilyListAllOfProductLinkRules>;
    /**
     * The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href=\'/concepts/asset-manager.html#focus-on-the-transformations\'>here</a>.
     * @type {Array<AssetFamilyListAllOfTransformations>}
     * @memberof AssetFamilyList
     */
    'transformations'?: Array<AssetFamilyListAllOfTransformations>;
}
/**
 * 
 * @export
 * @interface AssetFamilyListAllOf
 */
export interface AssetFamilyListAllOf {
    /**
     * Asset family code
     * @type {string}
     * @memberof AssetFamilyListAllOf
     */
    'code': string;
    /**
     * 
     * @type {AssetFamilyListAllOfLabels}
     * @memberof AssetFamilyListAllOf
     */
    'labels'?: AssetFamilyListAllOfLabels;
    /**
     * Attribute code that is used as the main media of the asset family.
     * @type {string}
     * @memberof AssetFamilyListAllOf
     */
    'attribute_as_main_media'?: string;
    /**
     * 
     * @type {AssetFamilyListAllOfNamingConvention}
     * @memberof AssetFamilyListAllOf
     */
    'naming_convention'?: AssetFamilyListAllOfNamingConvention;
    /**
     * The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href=\'/concepts/asset-manager.html#focus-on-the-product-link-rule\'>here</a>.
     * @type {Array<AssetFamilyListAllOfProductLinkRules>}
     * @memberof AssetFamilyListAllOf
     */
    'product_link_rules'?: Array<AssetFamilyListAllOfProductLinkRules>;
    /**
     * The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href=\'/concepts/asset-manager.html#focus-on-the-transformations\'>here</a>.
     * @type {Array<AssetFamilyListAllOfTransformations>}
     * @memberof AssetFamilyListAllOf
     */
    'transformations'?: Array<AssetFamilyListAllOfTransformations>;
}
/**
 * 
 * @export
 * @interface AssetFamilyListAllOfAssignAssetsTo
 */
export interface AssetFamilyListAllOfAssignAssetsTo {
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfAssignAssetsTo
     */
    'attribute': string;
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfAssignAssetsTo
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfAssignAssetsTo
     */
    'channel'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfAssignAssetsTo
     */
    'mode': string;
}
/**
 * Asset family labels for each locale
 * @export
 * @interface AssetFamilyListAllOfLabels
 */
export interface AssetFamilyListAllOfLabels {
    /**
     * Asset family label for the locale `localeCode`
     * @type {string}
     * @memberof AssetFamilyListAllOfLabels
     */
    'localeCode'?: string;
}
/**
 * The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href=\'/concepts/asset-manager.html#focus-on-the-naming-convention\'>here</a>.
 * @export
 * @interface AssetFamilyListAllOfNamingConvention
 */
export interface AssetFamilyListAllOfNamingConvention {
    /**
     * The string on which the naming convention should be applied. More details <a href=\'/concepts/asset-manager.html#source\'>here</a>.
     * @type {object}
     * @memberof AssetFamilyListAllOfNamingConvention
     */
    'source'?: object;
    /**
     * The regular expression that should be applied on the source. More details <a href=\'/concepts/asset-manager.html#pattern\'>here</a>.
     * @type {string}
     * @memberof AssetFamilyListAllOfNamingConvention
     */
    'pattern'?: string;
    /**
     * Whether the asset should be created if the naming convention failed to apply. More details <a href=\'/concepts/asset-manager.html#abort-asset-creation-on-error\'>here</a>.
     * @type {boolean}
     * @memberof AssetFamilyListAllOfNamingConvention
     */
    'abort_asset_creation_on_error'?: boolean;
}
/**
 * The transformations that should be applied to your source file to generate the target file. More details <a href=\'/concepts/asset-manager.html#transformation-operations\'>here</a>.
 * @export
 * @interface AssetFamilyListAllOfOperations
 */
export interface AssetFamilyListAllOfOperations {
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfOperations
     */
    'type'?: string;
    /**
     * 
     * @type {AssetFamilyListAllOfOperationsParameters}
     * @memberof AssetFamilyListAllOfOperations
     */
    'parameters'?: AssetFamilyListAllOfOperationsParameters;
}
/**
 * 
 * @export
 * @interface AssetFamilyListAllOfOperationsParameters
 */
export interface AssetFamilyListAllOfOperationsParameters {
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfOperationsParameters
     */
    'colorspace'?: string;
    /**
     * 
     * @type {number}
     * @memberof AssetFamilyListAllOfOperationsParameters
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssetFamilyListAllOfOperationsParameters
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssetFamilyListAllOfOperationsParameters
     */
    'ratio'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfOperationsParameters
     */
    'resolution-unit'?: string;
    /**
     * 
     * @type {number}
     * @memberof AssetFamilyListAllOfOperationsParameters
     */
    'resolution-x'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssetFamilyListAllOfOperationsParameters
     */
    'resolution-y'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssetFamilyListAllOfOperationsParameters
     */
    'quality'?: number;
}
/**
 * 
 * @export
 * @interface AssetFamilyListAllOfProductLinkRules
 */
export interface AssetFamilyListAllOfProductLinkRules {
    /**
     * The product selection to which the assets of the asset family to be automatically linked. More details <a href=\'/concepts/asset-manager.html#product-selection\'>here</a>.
     * @type {Array<AssetFamilyListAllOfProductSelections>}
     * @memberof AssetFamilyListAllOfProductLinkRules
     */
    'product_selections'?: Array<AssetFamilyListAllOfProductSelections>;
    /**
     * The product value in which your assets will be assigned. More details <a href=\'/concepts/asset-manager.html#product-value-assignment\'>here</a>.
     * @type {Array<AssetFamilyListAllOfAssignAssetsTo>}
     * @memberof AssetFamilyListAllOfProductLinkRules
     */
    'assign_assets_to'?: Array<AssetFamilyListAllOfAssignAssetsTo>;
}
/**
 * 
 * @export
 * @interface AssetFamilyListAllOfProductSelections
 */
export interface AssetFamilyListAllOfProductSelections {
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfProductSelections
     */
    'field': string;
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfProductSelections
     */
    'operator': string;
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfProductSelections
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfProductSelections
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfProductSelections
     */
    'channel'?: string;
}
/**
 * The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href=\'/concepts/asset-manager.html#source-file\'>here</a>.
 * @export
 * @interface AssetFamilyListAllOfSource
 */
export interface AssetFamilyListAllOfSource {
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfSource
     */
    'attribute': string;
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfSource
     */
    'channel': string;
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfSource
     */
    'locale': string;
}
/**
 * The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href=\'/concepts/asset-manager.html#target-file\'>here</a>.
 * @export
 * @interface AssetFamilyListAllOfTarget
 */
export interface AssetFamilyListAllOfTarget {
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfTarget
     */
    'attribute': string;
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfTarget
     */
    'channel': string;
    /**
     * 
     * @type {string}
     * @memberof AssetFamilyListAllOfTarget
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface AssetFamilyListAllOfTransformations
 */
export interface AssetFamilyListAllOfTransformations {
    /**
     * The name of the transformation
     * @type {string}
     * @memberof AssetFamilyListAllOfTransformations
     */
    'label': string;
    /**
     * The suffix that will be appended to the source filename to generate the target filename. More details <a href=\'/concepts/asset-manager.html#target-filename\'>here</a>.
     * @type {string}
     * @memberof AssetFamilyListAllOfTransformations
     */
    'filename_suffix'?: string;
    /**
     * The prefix that will be prepended to the source filename to generate the target filename. More details <a href=\'/concepts/asset-manager.html#target-filename\'>here</a>.
     * @type {string}
     * @memberof AssetFamilyListAllOfTransformations
     */
    'filename_prefix'?: string;
    /**
     * 
     * @type {AssetFamilyListAllOfSource}
     * @memberof AssetFamilyListAllOfTransformations
     */
    'source': AssetFamilyListAllOfSource;
    /**
     * 
     * @type {AssetFamilyListAllOfTarget}
     * @memberof AssetFamilyListAllOfTransformations
     */
    'target': AssetFamilyListAllOfTarget;
    /**
     * 
     * @type {AssetFamilyListAllOfOperations}
     * @memberof AssetFamilyListAllOfTransformations
     */
    'operations': AssetFamilyListAllOfOperations;
}
/**
 * 
 * @export
 * @interface AssetItemList
 */
export interface AssetItemList {
    /**
     * 
     * @type {AssetFamilyItemListLinks}
     * @memberof AssetItemList
     */
    '_links'?: AssetFamilyItemListLinks;
}
/**
 * 
 * @export
 * @interface AssetList
 */
export interface AssetList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof AssetList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Code of the asset
     * @type {string}
     * @memberof AssetList
     */
    'code': string;
    /**
     * 
     * @type {AssetListAllOfValues}
     * @memberof AssetList
     */
    'values'?: AssetListAllOfValues;
    /**
     * Date of creation
     * @type {string}
     * @memberof AssetList
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof AssetList
     */
    'updated'?: string;
}
/**
 * 
 * @export
 * @interface AssetListAllOf
 */
export interface AssetListAllOf {
    /**
     * Code of the asset
     * @type {string}
     * @memberof AssetListAllOf
     */
    'code': string;
    /**
     * 
     * @type {AssetListAllOfValues}
     * @memberof AssetListAllOf
     */
    'values'?: AssetListAllOfValues;
    /**
     * Date of creation
     * @type {string}
     * @memberof AssetListAllOf
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof AssetListAllOf
     */
    'updated'?: string;
}
/**
 * Asset attributes values, see the <a href=\'/concepts/asset-manager.html#focus-on-the-asset-values\'>Focus on the asset values</a> section for more details.
 * @export
 * @interface AssetListAllOfValues
 */
export interface AssetListAllOfValues {
    /**
     * 
     * @type {Array<AssetListAllOfValuesAttributeCode>}
     * @memberof AssetListAllOfValues
     */
    'attributeCode'?: Array<AssetListAllOfValuesAttributeCode>;
}
/**
 * 
 * @export
 * @interface AssetListAllOfValuesAttributeCode
 */
export interface AssetListAllOfValuesAttributeCode {
    /**
     * Channel code of the asset attribute value
     * @type {string}
     * @memberof AssetListAllOfValuesAttributeCode
     */
    'channel'?: string;
    /**
     * Locale code of the asset attribute value
     * @type {string}
     * @memberof AssetListAllOfValuesAttributeCode
     */
    'locale'?: string;
    /**
     * Asset attribute value. See <a href=\'/concepts/asset-manager.html#the-data-format\'>the `data` format</a> section for more details.
     * @type {object}
     * @memberof AssetListAllOfValuesAttributeCode
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface AssociationType
 */
export interface AssociationType {
    /**
     * Association type code
     * @type {string}
     * @memberof AssociationType
     */
    'code': string;
    /**
     * 
     * @type {AssociationTypesPostRequestLabels}
     * @memberof AssociationType
     */
    'labels'?: AssociationTypesPostRequestLabels;
    /**
     * When true, the association is a quantified association (Only available in the PIM Serenity version.)
     * @type {boolean}
     * @memberof AssociationType
     */
    'is_quantified'?: boolean;
    /**
     * When true, the association is a two-way association (Only available in the PIM Serenity version.)
     * @type {boolean}
     * @memberof AssociationType
     */
    'is_two_way'?: boolean;
}
/**
 * 
 * @export
 * @interface AssociationTypeList
 */
export interface AssociationTypeList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof AssociationTypeList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Association type code
     * @type {string}
     * @memberof AssociationTypeList
     */
    'code': string;
    /**
     * 
     * @type {AssociationTypeListAllOfLabels}
     * @memberof AssociationTypeList
     */
    'labels'?: AssociationTypeListAllOfLabels;
    /**
     * When true, the association is a quantified association (Only available in the PIM Serenity version.)
     * @type {boolean}
     * @memberof AssociationTypeList
     */
    'is_quantified'?: boolean;
    /**
     * When true, the association is a two-way association (Only available in the PIM Serenity version.)
     * @type {boolean}
     * @memberof AssociationTypeList
     */
    'is_two_way'?: boolean;
}
/**
 * 
 * @export
 * @interface AssociationTypeListAllOf
 */
export interface AssociationTypeListAllOf {
    /**
     * Association type code
     * @type {string}
     * @memberof AssociationTypeListAllOf
     */
    'code': string;
    /**
     * 
     * @type {AssociationTypeListAllOfLabels}
     * @memberof AssociationTypeListAllOf
     */
    'labels'?: AssociationTypeListAllOfLabels;
    /**
     * When true, the association is a quantified association (Only available in the PIM Serenity version.)
     * @type {boolean}
     * @memberof AssociationTypeListAllOf
     */
    'is_quantified'?: boolean;
    /**
     * When true, the association is a two-way association (Only available in the PIM Serenity version.)
     * @type {boolean}
     * @memberof AssociationTypeListAllOf
     */
    'is_two_way'?: boolean;
}
/**
 * Association type labels for each locale
 * @export
 * @interface AssociationTypeListAllOfLabels
 */
export interface AssociationTypeListAllOfLabels {
    /**
     * Association type label for the locale `localeCode`
     * @type {string}
     * @memberof AssociationTypeListAllOfLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface AssociationTypes
 */
export interface AssociationTypes {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof AssociationTypes
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof AssociationTypes
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface AssociationTypesPostRequest
 */
export interface AssociationTypesPostRequest {
    /**
     * Association type code
     * @type {string}
     * @memberof AssociationTypesPostRequest
     */
    'code': string;
    /**
     * 
     * @type {AssociationTypesPostRequestLabels}
     * @memberof AssociationTypesPostRequest
     */
    'labels'?: AssociationTypesPostRequestLabels;
    /**
     * When true, the association is a quantified association (Only available in the PIM Serenity version.)
     * @type {boolean}
     * @memberof AssociationTypesPostRequest
     */
    'is_quantified'?: boolean;
    /**
     * When true, the association is a two-way association (Only available in the PIM Serenity version.)
     * @type {boolean}
     * @memberof AssociationTypesPostRequest
     */
    'is_two_way'?: boolean;
}
/**
 * Association type labels for each locale
 * @export
 * @interface AssociationTypesPostRequestLabels
 */
export interface AssociationTypesPostRequestLabels {
    /**
     * Association type label for the locale `localeCode`
     * @type {string}
     * @memberof AssociationTypesPostRequestLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     * Attribute code
     * @type {string}
     * @memberof Attribute
     */
    'code': string;
    /**
     * Attribute type. See <a href=\'/concepts/catalog-structure.html#attribute\'>type</a> section for more details.
     * @type {string}
     * @memberof Attribute
     */
    'type': AttributeTypeEnum;
    /**
     * 
     * @type {PostAttributesRequestLabels}
     * @memberof Attribute
     */
    'labels'?: PostAttributesRequestLabels;
    /**
     * Attribute group
     * @type {string}
     * @memberof Attribute
     */
    'group': string;
    /**
     * 
     * @type {PostAttributesRequestGroupLabels}
     * @memberof Attribute
     */
    'group_labels'?: PostAttributesRequestGroupLabels;
    /**
     * Order of the attribute in its group
     * @type {number}
     * @memberof Attribute
     */
    'sort_order'?: number;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     * @type {boolean}
     * @memberof Attribute
     */
    'localizable'?: boolean;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     * @type {boolean}
     * @memberof Attribute
     */
    'scopable'?: boolean;
    /**
     * To make the attribute locale specfic, specify here for which locales it is specific
     * @type {Array<string>}
     * @memberof Attribute
     */
    'available_locales'?: Array<string>;
    /**
     * Whether two values for the attribute cannot be the same
     * @type {boolean}
     * @memberof Attribute
     */
    'unique'?: boolean;
    /**
     * Whether the attribute can be used as a filter for the product grid in the PIM user interface
     * @type {boolean}
     * @memberof Attribute
     */
    'useable_as_grid_filter'?: boolean;
    /**
     * Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
     * @type {number}
     * @memberof Attribute
     */
    'max_characters'?: number;
    /**
     * Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     * @type {string}
     * @memberof Attribute
     */
    'validation_rule'?: string;
    /**
     * Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     * @type {string}
     * @memberof Attribute
     */
    'validation_regexp'?: string;
    /**
     * Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
     * @type {boolean}
     * @memberof Attribute
     */
    'wysiwyg_enabled'?: boolean;
    /**
     * Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {string}
     * @memberof Attribute
     */
    'number_min'?: string;
    /**
     * Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {string}
     * @memberof Attribute
     */
    'number_max'?: string;
    /**
     * Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {boolean}
     * @memberof Attribute
     */
    'decimals_allowed'?: boolean;
    /**
     * Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
     * @type {boolean}
     * @memberof Attribute
     */
    'negative_allowed'?: boolean;
    /**
     * Metric family when the attribute type is `pim_catalog_metric`
     * @type {string}
     * @memberof Attribute
     */
    'metric_family'?: string;
    /**
     * Default metric unit when the attribute type is `pim_catalog_metric`
     * @type {string}
     * @memberof Attribute
     */
    'default_metric_unit'?: string;
    /**
     * Minimum date allowed when the attribute type is `pim_catalog_date`
     * @type {string}
     * @memberof Attribute
     */
    'date_min'?: string;
    /**
     * Maximum date allowed when the attribute type is `pim_catalog_date`
     * @type {string}
     * @memberof Attribute
     */
    'date_max'?: string;
    /**
     * Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     * @type {Array<string>}
     * @memberof Attribute
     */
    'allowed_extensions'?: Array<string>;
    /**
     * Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     * @type {string}
     * @memberof Attribute
     */
    'max_file_size'?: string;
    /**
     * Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
     * @type {string}
     * @memberof Attribute
     */
    'reference_data_name'?: string;
    /**
     * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
     * @type {boolean}
     * @memberof Attribute
     */
    'default_value'?: boolean;
    /**
     * Configuration of the Table attribute (columns)
     * @type {Array<PostAttributesRequestTableConfigurationInner>}
     * @memberof Attribute
     */
    'table_configuration'?: Array<PostAttributesRequestTableConfigurationInner>;
}

export const AttributeTypeEnum = {
    PimCatalogIdentifier: 'pim_catalog_identifier',
    PimCatalogMetric: 'pim_catalog_metric',
    PimCatalogNumber: 'pim_catalog_number',
    PimCatalogReferenceDataMultiSelect: 'pim_catalog_reference_data_multi_select',
    PimCatalogReferenceDataSimpleSelect: 'pim_catalog_reference_data_simple_select',
    PimCatalogSimpleselect: 'pim_catalog_simpleselect',
    PimCatalogMultiselect: 'pim_catalog_multiselect',
    PimCatalogDate: 'pim_catalog_date',
    PimCatalogTextarea: 'pim_catalog_textarea',
    PimCatalogText: 'pim_catalog_text',
    PimCatalogFile: 'pim_catalog_file',
    PimCatalogImage: 'pim_catalog_image',
    PimCatalogPriceCollection: 'pim_catalog_price_collection',
    PimCatalogBoolean: 'pim_catalog_boolean',
    AkeneoReferenceEntity: 'akeneo_reference_entity',
    AkeneoReferenceEntityCollection: 'akeneo_reference_entity_collection',
    PimCatalogAssetCollection: 'pim_catalog_asset_collection'
} as const;

export type AttributeTypeEnum = typeof AttributeTypeEnum[keyof typeof AttributeTypeEnum];

/**
 * 
 * @export
 * @interface AttributeGroup
 */
export interface AttributeGroup {
    /**
     * Attribute group code
     * @type {string}
     * @memberof AttributeGroup
     */
    'code': string;
    /**
     * Attribute group order among other attribute groups
     * @type {number}
     * @memberof AttributeGroup
     */
    'sort_order'?: number;
    /**
     * Attribute codes that compose the attribute group
     * @type {Array<string>}
     * @memberof AttributeGroup
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {AttributeGroupsPostRequestLabels}
     * @memberof AttributeGroup
     */
    'labels'?: AttributeGroupsPostRequestLabels;
}
/**
 * 
 * @export
 * @interface AttributeGroupList
 */
export interface AttributeGroupList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof AttributeGroupList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Attribute group code
     * @type {string}
     * @memberof AttributeGroupList
     */
    'code': string;
    /**
     * Attribute group order among other attribute groups
     * @type {number}
     * @memberof AttributeGroupList
     */
    'sort_order'?: number;
    /**
     * Attribute codes that compose the attribute group
     * @type {Array<string>}
     * @memberof AttributeGroupList
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {AttributeGroupListAllOfLabels}
     * @memberof AttributeGroupList
     */
    'labels'?: AttributeGroupListAllOfLabels;
}
/**
 * 
 * @export
 * @interface AttributeGroupListAllOf
 */
export interface AttributeGroupListAllOf {
    /**
     * Attribute group code
     * @type {string}
     * @memberof AttributeGroupListAllOf
     */
    'code': string;
    /**
     * Attribute group order among other attribute groups
     * @type {number}
     * @memberof AttributeGroupListAllOf
     */
    'sort_order'?: number;
    /**
     * Attribute codes that compose the attribute group
     * @type {Array<string>}
     * @memberof AttributeGroupListAllOf
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {AttributeGroupListAllOfLabels}
     * @memberof AttributeGroupListAllOf
     */
    'labels'?: AttributeGroupListAllOfLabels;
}
/**
 * Attribute group labels for each locale
 * @export
 * @interface AttributeGroupListAllOfLabels
 */
export interface AttributeGroupListAllOfLabels {
    /**
     * Attribute group label for the locale `localeCode`
     * @type {string}
     * @memberof AttributeGroupListAllOfLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface AttributeGroups
 */
export interface AttributeGroups {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof AttributeGroups
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof AttributeGroups
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface AttributeGroupsPostRequest
 */
export interface AttributeGroupsPostRequest {
    /**
     * Attribute group code
     * @type {string}
     * @memberof AttributeGroupsPostRequest
     */
    'code': string;
    /**
     * Attribute group order among other attribute groups
     * @type {number}
     * @memberof AttributeGroupsPostRequest
     */
    'sort_order'?: number;
    /**
     * Attribute codes that compose the attribute group
     * @type {Array<string>}
     * @memberof AttributeGroupsPostRequest
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {AttributeGroupsPostRequestLabels}
     * @memberof AttributeGroupsPostRequest
     */
    'labels'?: AttributeGroupsPostRequestLabels;
}
/**
 * Attribute group labels for each locale
 * @export
 * @interface AttributeGroupsPostRequestLabels
 */
export interface AttributeGroupsPostRequestLabels {
    /**
     * Attribute group label for the locale `localeCode`
     * @type {string}
     * @memberof AttributeGroupsPostRequestLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface AttributeList
 */
export interface AttributeList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof AttributeList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Attribute code
     * @type {string}
     * @memberof AttributeList
     */
    'code': string;
    /**
     * Attribute type. See <a href=\'/concepts/catalog-structure.html#attribute\'>type</a> section for more details.
     * @type {string}
     * @memberof AttributeList
     */
    'type': AttributeListTypeEnum;
    /**
     * 
     * @type {AttributeListAllOfLabels}
     * @memberof AttributeList
     */
    'labels'?: AttributeListAllOfLabels;
    /**
     * Attribute group
     * @type {string}
     * @memberof AttributeList
     */
    'group': string;
    /**
     * 
     * @type {AttributeListAllOfGroupLabels}
     * @memberof AttributeList
     */
    'group_labels'?: AttributeListAllOfGroupLabels;
    /**
     * Order of the attribute in its group
     * @type {number}
     * @memberof AttributeList
     */
    'sort_order'?: number;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     * @type {boolean}
     * @memberof AttributeList
     */
    'localizable'?: boolean;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     * @type {boolean}
     * @memberof AttributeList
     */
    'scopable'?: boolean;
    /**
     * To make the attribute locale specfic, specify here for which locales it is specific
     * @type {Array<string>}
     * @memberof AttributeList
     */
    'available_locales'?: Array<string>;
    /**
     * Whether two values for the attribute cannot be the same
     * @type {boolean}
     * @memberof AttributeList
     */
    'unique'?: boolean;
    /**
     * Whether the attribute can be used as a filter for the product grid in the PIM user interface
     * @type {boolean}
     * @memberof AttributeList
     */
    'useable_as_grid_filter'?: boolean;
    /**
     * Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
     * @type {number}
     * @memberof AttributeList
     */
    'max_characters'?: number;
    /**
     * Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     * @type {string}
     * @memberof AttributeList
     */
    'validation_rule'?: string;
    /**
     * Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     * @type {string}
     * @memberof AttributeList
     */
    'validation_regexp'?: string;
    /**
     * Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
     * @type {boolean}
     * @memberof AttributeList
     */
    'wysiwyg_enabled'?: boolean;
    /**
     * Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {string}
     * @memberof AttributeList
     */
    'number_min'?: string;
    /**
     * Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {string}
     * @memberof AttributeList
     */
    'number_max'?: string;
    /**
     * Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {boolean}
     * @memberof AttributeList
     */
    'decimals_allowed'?: boolean;
    /**
     * Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
     * @type {boolean}
     * @memberof AttributeList
     */
    'negative_allowed'?: boolean;
    /**
     * Metric family when the attribute type is `pim_catalog_metric`
     * @type {string}
     * @memberof AttributeList
     */
    'metric_family'?: string;
    /**
     * Default metric unit when the attribute type is `pim_catalog_metric`
     * @type {string}
     * @memberof AttributeList
     */
    'default_metric_unit'?: string;
    /**
     * Minimum date allowed when the attribute type is `pim_catalog_date`
     * @type {string}
     * @memberof AttributeList
     */
    'date_min'?: string;
    /**
     * Maximum date allowed when the attribute type is `pim_catalog_date`
     * @type {string}
     * @memberof AttributeList
     */
    'date_max'?: string;
    /**
     * Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     * @type {Array<string>}
     * @memberof AttributeList
     */
    'allowed_extensions'?: Array<string>;
    /**
     * Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     * @type {string}
     * @memberof AttributeList
     */
    'max_file_size'?: string;
    /**
     * Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
     * @type {string}
     * @memberof AttributeList
     */
    'reference_data_name'?: string;
    /**
     * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
     * @type {boolean}
     * @memberof AttributeList
     */
    'default_value'?: boolean;
    /**
     * Configuration of the Table attribute (columns)
     * @type {Array<AttributeListAllOfTableConfiguration>}
     * @memberof AttributeList
     */
    'table_configuration'?: Array<AttributeListAllOfTableConfiguration>;
}

export const AttributeListTypeEnum = {
    PimCatalogIdentifier: 'pim_catalog_identifier',
    PimCatalogMetric: 'pim_catalog_metric',
    PimCatalogNumber: 'pim_catalog_number',
    PimCatalogReferenceDataMultiSelect: 'pim_catalog_reference_data_multi_select',
    PimCatalogReferenceDataSimpleSelect: 'pim_catalog_reference_data_simple_select',
    PimCatalogSimpleselect: 'pim_catalog_simpleselect',
    PimCatalogMultiselect: 'pim_catalog_multiselect',
    PimCatalogDate: 'pim_catalog_date',
    PimCatalogTextarea: 'pim_catalog_textarea',
    PimCatalogText: 'pim_catalog_text',
    PimCatalogFile: 'pim_catalog_file',
    PimCatalogImage: 'pim_catalog_image',
    PimCatalogPriceCollection: 'pim_catalog_price_collection',
    PimCatalogBoolean: 'pim_catalog_boolean',
    AkeneoReferenceEntity: 'akeneo_reference_entity',
    AkeneoReferenceEntityCollection: 'akeneo_reference_entity_collection',
    PimCatalogAssetCollection: 'pim_catalog_asset_collection'
} as const;

export type AttributeListTypeEnum = typeof AttributeListTypeEnum[keyof typeof AttributeListTypeEnum];

/**
 * 
 * @export
 * @interface AttributeListAllOf
 */
export interface AttributeListAllOf {
    /**
     * Attribute code
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'code': string;
    /**
     * Attribute type. See <a href=\'/concepts/catalog-structure.html#attribute\'>type</a> section for more details.
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'type': AttributeListAllOfTypeEnum;
    /**
     * 
     * @type {AttributeListAllOfLabels}
     * @memberof AttributeListAllOf
     */
    'labels'?: AttributeListAllOfLabels;
    /**
     * Attribute group
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'group': string;
    /**
     * 
     * @type {AttributeListAllOfGroupLabels}
     * @memberof AttributeListAllOf
     */
    'group_labels'?: AttributeListAllOfGroupLabels;
    /**
     * Order of the attribute in its group
     * @type {number}
     * @memberof AttributeListAllOf
     */
    'sort_order'?: number;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     * @type {boolean}
     * @memberof AttributeListAllOf
     */
    'localizable'?: boolean;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     * @type {boolean}
     * @memberof AttributeListAllOf
     */
    'scopable'?: boolean;
    /**
     * To make the attribute locale specfic, specify here for which locales it is specific
     * @type {Array<string>}
     * @memberof AttributeListAllOf
     */
    'available_locales'?: Array<string>;
    /**
     * Whether two values for the attribute cannot be the same
     * @type {boolean}
     * @memberof AttributeListAllOf
     */
    'unique'?: boolean;
    /**
     * Whether the attribute can be used as a filter for the product grid in the PIM user interface
     * @type {boolean}
     * @memberof AttributeListAllOf
     */
    'useable_as_grid_filter'?: boolean;
    /**
     * Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
     * @type {number}
     * @memberof AttributeListAllOf
     */
    'max_characters'?: number;
    /**
     * Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'validation_rule'?: string;
    /**
     * Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'validation_regexp'?: string;
    /**
     * Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
     * @type {boolean}
     * @memberof AttributeListAllOf
     */
    'wysiwyg_enabled'?: boolean;
    /**
     * Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'number_min'?: string;
    /**
     * Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'number_max'?: string;
    /**
     * Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {boolean}
     * @memberof AttributeListAllOf
     */
    'decimals_allowed'?: boolean;
    /**
     * Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
     * @type {boolean}
     * @memberof AttributeListAllOf
     */
    'negative_allowed'?: boolean;
    /**
     * Metric family when the attribute type is `pim_catalog_metric`
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'metric_family'?: string;
    /**
     * Default metric unit when the attribute type is `pim_catalog_metric`
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'default_metric_unit'?: string;
    /**
     * Minimum date allowed when the attribute type is `pim_catalog_date`
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'date_min'?: string;
    /**
     * Maximum date allowed when the attribute type is `pim_catalog_date`
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'date_max'?: string;
    /**
     * Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     * @type {Array<string>}
     * @memberof AttributeListAllOf
     */
    'allowed_extensions'?: Array<string>;
    /**
     * Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'max_file_size'?: string;
    /**
     * Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
     * @type {string}
     * @memberof AttributeListAllOf
     */
    'reference_data_name'?: string;
    /**
     * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
     * @type {boolean}
     * @memberof AttributeListAllOf
     */
    'default_value'?: boolean;
    /**
     * Configuration of the Table attribute (columns)
     * @type {Array<AttributeListAllOfTableConfiguration>}
     * @memberof AttributeListAllOf
     */
    'table_configuration'?: Array<AttributeListAllOfTableConfiguration>;
}

export const AttributeListAllOfTypeEnum = {
    PimCatalogIdentifier: 'pim_catalog_identifier',
    PimCatalogMetric: 'pim_catalog_metric',
    PimCatalogNumber: 'pim_catalog_number',
    PimCatalogReferenceDataMultiSelect: 'pim_catalog_reference_data_multi_select',
    PimCatalogReferenceDataSimpleSelect: 'pim_catalog_reference_data_simple_select',
    PimCatalogSimpleselect: 'pim_catalog_simpleselect',
    PimCatalogMultiselect: 'pim_catalog_multiselect',
    PimCatalogDate: 'pim_catalog_date',
    PimCatalogTextarea: 'pim_catalog_textarea',
    PimCatalogText: 'pim_catalog_text',
    PimCatalogFile: 'pim_catalog_file',
    PimCatalogImage: 'pim_catalog_image',
    PimCatalogPriceCollection: 'pim_catalog_price_collection',
    PimCatalogBoolean: 'pim_catalog_boolean',
    AkeneoReferenceEntity: 'akeneo_reference_entity',
    AkeneoReferenceEntityCollection: 'akeneo_reference_entity_collection',
    PimCatalogAssetCollection: 'pim_catalog_asset_collection'
} as const;

export type AttributeListAllOfTypeEnum = typeof AttributeListAllOfTypeEnum[keyof typeof AttributeListAllOfTypeEnum];

/**
 * Group labels for each locale
 * @export
 * @interface AttributeListAllOfGroupLabels
 */
export interface AttributeListAllOfGroupLabels {
    /**
     * Group label for the locale `localeCode`
     * @type {string}
     * @memberof AttributeListAllOfGroupLabels
     */
    'localeCode'?: string;
}
/**
 * Attribute labels for each locale
 * @export
 * @interface AttributeListAllOfLabels
 */
export interface AttributeListAllOfLabels {
    /**
     * Attribute label for the locale `localeCode`
     * @type {string}
     * @memberof AttributeListAllOfLabels
     */
    'localeCode'?: string;
}
/**
 * Column labels for each locale
 * @export
 * @interface AttributeListAllOfLabels1
 */
export interface AttributeListAllOfLabels1 {
    /**
     * Column label for the locale `localeCode`
     * @type {string}
     * @memberof AttributeListAllOfLabels1
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface AttributeListAllOfTableConfiguration
 */
export interface AttributeListAllOfTableConfiguration {
    /**
     * Column code
     * @type {string}
     * @memberof AttributeListAllOfTableConfiguration
     */
    'code': string;
    /**
     * Column data type
     * @type {string}
     * @memberof AttributeListAllOfTableConfiguration
     */
    'data_type': AttributeListAllOfTableConfigurationDataTypeEnum;
    /**
     * 
     * @type {AttributeListAllOfValidations}
     * @memberof AttributeListAllOfTableConfiguration
     */
    'validations'?: AttributeListAllOfValidations;
    /**
     * 
     * @type {AttributeListAllOfLabels1}
     * @memberof AttributeListAllOfTableConfiguration
     */
    'labels'?: AttributeListAllOfLabels1;
    /**
     * Defines if the column should be entirely filled for the attribute to be considered complete
     * @type {boolean}
     * @memberof AttributeListAllOfTableConfiguration
     */
    'is_required_for_completeness'?: boolean;
}

export const AttributeListAllOfTableConfigurationDataTypeEnum = {
    Select: 'select',
    Text: 'text',
    Number: 'number',
    Boolean: 'boolean'
} as const;

export type AttributeListAllOfTableConfigurationDataTypeEnum = typeof AttributeListAllOfTableConfigurationDataTypeEnum[keyof typeof AttributeListAllOfTableConfigurationDataTypeEnum];

/**
 * User defined validation constraints on the cell content
 * @export
 * @interface AttributeListAllOfValidations
 */
export interface AttributeListAllOfValidations {
    /**
     * minimum value of a numeric cell
     * @type {number}
     * @memberof AttributeListAllOfValidations
     */
    'min'?: number;
    /**
     * maximum value of a numeric cell
     * @type {number}
     * @memberof AttributeListAllOfValidations
     */
    'max'?: number;
    /**
     * whether the value of a numeric cell can hold a decimal part
     * @type {boolean}
     * @memberof AttributeListAllOfValidations
     */
    'decimals_allowed'?: boolean;
    /**
     * maximum length of a text cell
     * @type {number}
     * @memberof AttributeListAllOfValidations
     */
    'max_length'?: number;
}
/**
 * 
 * @export
 * @interface AttributeOption
 */
export interface AttributeOption {
    /**
     * Code of option
     * @type {string}
     * @memberof AttributeOption
     */
    'code': string;
    /**
     * Code of attribute related to the attribute option
     * @type {string}
     * @memberof AttributeOption
     */
    'attribute'?: string;
    /**
     * Order of attribute option
     * @type {number}
     * @memberof AttributeOption
     */
    'sort_order'?: number;
    /**
     * 
     * @type {PostAttributesAttributeCodeOptionsRequestLabels}
     * @memberof AttributeOption
     */
    'labels'?: PostAttributesAttributeCodeOptionsRequestLabels;
}
/**
 * 
 * @export
 * @interface AttributeOptionList
 */
export interface AttributeOptionList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof AttributeOptionList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Code of option
     * @type {string}
     * @memberof AttributeOptionList
     */
    'code': string;
    /**
     * Code of attribute related to the attribute option
     * @type {string}
     * @memberof AttributeOptionList
     */
    'attribute'?: string;
    /**
     * Order of attribute option
     * @type {number}
     * @memberof AttributeOptionList
     */
    'sort_order'?: number;
    /**
     * 
     * @type {AttributeOptionListAllOfLabels}
     * @memberof AttributeOptionList
     */
    'labels'?: AttributeOptionListAllOfLabels;
}
/**
 * 
 * @export
 * @interface AttributeOptionListAllOf
 */
export interface AttributeOptionListAllOf {
    /**
     * Code of option
     * @type {string}
     * @memberof AttributeOptionListAllOf
     */
    'code': string;
    /**
     * Code of attribute related to the attribute option
     * @type {string}
     * @memberof AttributeOptionListAllOf
     */
    'attribute'?: string;
    /**
     * Order of attribute option
     * @type {number}
     * @memberof AttributeOptionListAllOf
     */
    'sort_order'?: number;
    /**
     * 
     * @type {AttributeOptionListAllOfLabels}
     * @memberof AttributeOptionListAllOf
     */
    'labels'?: AttributeOptionListAllOfLabels;
}
/**
 * Attribute option labels for each locale
 * @export
 * @interface AttributeOptionListAllOfLabels
 */
export interface AttributeOptionListAllOfLabels {
    /**
     * Attribute option label for the locale `localeCode`
     * @type {string}
     * @memberof AttributeOptionListAllOfLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface AttributeOptions
 */
export interface AttributeOptions {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof AttributeOptions
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof AttributeOptions
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface Attributes
 */
export interface Attributes {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof Attributes
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof Attributes
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface Catalogs
 */
export interface Catalogs {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof Catalogs
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof Catalogs
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface Categories
 */
export interface Categories {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof Categories
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof Categories
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * Category code
     * @type {string}
     * @memberof Category
     */
    'code': string;
    /**
     * Category code of the parent\'s category
     * @type {string}
     * @memberof Category
     */
    'parent'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof Category
     */
    'updated'?: string;
    /**
     * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter \"with_position\" is set to \"true\")
     * @type {number}
     * @memberof Category
     */
    'position'?: number;
    /**
     * 
     * @type {PostCategoriesRequestLabels}
     * @memberof Category
     */
    'labels'?: PostCategoriesRequestLabels;
    /**
     * 
     * @type {PostCategoriesRequestValues}
     * @memberof Category
     */
    'values'?: PostCategoriesRequestValues;
}
/**
 * 
 * @export
 * @interface CategoryList
 */
export interface CategoryList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof CategoryList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Category code
     * @type {string}
     * @memberof CategoryList
     */
    'code': string;
    /**
     * Category code of the parent\'s category
     * @type {string}
     * @memberof CategoryList
     */
    'parent'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof CategoryList
     */
    'updated'?: string;
    /**
     * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter \"with_position\" is set to \"true\")
     * @type {number}
     * @memberof CategoryList
     */
    'position'?: number;
    /**
     * 
     * @type {CategoryListAllOfLabels}
     * @memberof CategoryList
     */
    'labels'?: CategoryListAllOfLabels;
    /**
     * 
     * @type {CategoryListAllOfValues}
     * @memberof CategoryList
     */
    'values'?: CategoryListAllOfValues;
}
/**
 * 
 * @export
 * @interface CategoryListAllOf
 */
export interface CategoryListAllOf {
    /**
     * Category code
     * @type {string}
     * @memberof CategoryListAllOf
     */
    'code': string;
    /**
     * Category code of the parent\'s category
     * @type {string}
     * @memberof CategoryListAllOf
     */
    'parent'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof CategoryListAllOf
     */
    'updated'?: string;
    /**
     * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter \"with_position\" is set to \"true\")
     * @type {number}
     * @memberof CategoryListAllOf
     */
    'position'?: number;
    /**
     * 
     * @type {CategoryListAllOfLabels}
     * @memberof CategoryListAllOf
     */
    'labels'?: CategoryListAllOfLabels;
    /**
     * 
     * @type {CategoryListAllOfValues}
     * @memberof CategoryListAllOf
     */
    'values'?: CategoryListAllOfValues;
}
/**
 * Category labels for each locale
 * @export
 * @interface CategoryListAllOfLabels
 */
export interface CategoryListAllOfLabels {
    /**
     * Category label for the locale `localeCode`
     * @type {string}
     * @memberof CategoryListAllOfLabels
     */
    'localeCode'?: string;
}
/**
 * Attribute values
 * @export
 * @interface CategoryListAllOfValues
 */
export interface CategoryListAllOfValues {
    /**
     * 
     * @type {Array<CategoryListAllOfValuesAttributeCodeAttributeUuidChannelCodeLocaleCode>}
     * @memberof CategoryListAllOfValues
     */
    'attributeCode|attributeUuid|channelCode|localeCode'?: Array<CategoryListAllOfValuesAttributeCodeAttributeUuidChannelCodeLocaleCode>;
}
/**
 * 
 * @export
 * @interface CategoryListAllOfValuesAttributeCodeAttributeUuidChannelCodeLocaleCode
 */
export interface CategoryListAllOfValuesAttributeCodeAttributeUuidChannelCodeLocaleCode {
    /**
     * Attribute value
     * @type {object}
     * @memberof CategoryListAllOfValuesAttributeCodeAttributeUuidChannelCodeLocaleCode
     */
    'data'?: object;
    /**
     * The attribute type
     * @type {string}
     * @memberof CategoryListAllOfValuesAttributeCodeAttributeUuidChannelCodeLocaleCode
     */
    'type'?: string;
    /**
     * <a href=\'api-reference.html#Locale\'>Locale</a> code of the attribute value
     * @type {string}
     * @memberof CategoryListAllOfValuesAttributeCodeAttributeUuidChannelCodeLocaleCode
     */
    'locale'?: string;
    /**
     * <a href=\'api-reference.html#Channel\'>Channel</a> code of the attribute value
     * @type {string}
     * @memberof CategoryListAllOfValuesAttributeCodeAttributeUuidChannelCodeLocaleCode
     */
    'channel'?: string;
    /**
     * The attribute code with its uuid (attributeCode|attributeUuid)
     * @type {string}
     * @memberof CategoryListAllOfValuesAttributeCodeAttributeUuidChannelCodeLocaleCode
     */
    'attribute_code'?: string;
}
/**
 * 
 * @export
 * @interface CategoryUpdate
 */
export interface CategoryUpdate {
    /**
     * Category code
     * @type {string}
     * @memberof CategoryUpdate
     */
    'code': string;
    /**
     * Category code of the parent\'s category
     * @type {string}
     * @memberof CategoryUpdate
     */
    'parent'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof CategoryUpdate
     */
    'updated'?: string;
    /**
     * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter \"with_position\" is set to \"true\")
     * @type {number}
     * @memberof CategoryUpdate
     */
    'position'?: number;
    /**
     * 
     * @type {PostCategoriesRequestLabels}
     * @memberof CategoryUpdate
     */
    'labels'?: PostCategoriesRequestLabels;
}
/**
 * 
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * Channel code
     * @type {string}
     * @memberof Channel
     */
    'code': string;
    /**
     * Codes of activated locales for the channel
     * @type {Array<string>}
     * @memberof Channel
     */
    'locales': Array<string>;
    /**
     * Codes of activated currencies for the channel
     * @type {Array<string>}
     * @memberof Channel
     */
    'currencies': Array<string>;
    /**
     * Code of the category tree linked to the channel
     * @type {string}
     * @memberof Channel
     */
    'category_tree': string;
    /**
     * 
     * @type {ChannelsPostRequestConversionUnits}
     * @memberof Channel
     */
    'conversion_units'?: ChannelsPostRequestConversionUnits;
    /**
     * 
     * @type {ChannelsPostRequestLabels}
     * @memberof Channel
     */
    'labels'?: ChannelsPostRequestLabels;
}
/**
 * 
 * @export
 * @interface ChannelList
 */
export interface ChannelList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof ChannelList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Channel code
     * @type {string}
     * @memberof ChannelList
     */
    'code': string;
    /**
     * Codes of activated locales for the channel
     * @type {Array<string>}
     * @memberof ChannelList
     */
    'locales': Array<string>;
    /**
     * Codes of activated currencies for the channel
     * @type {Array<string>}
     * @memberof ChannelList
     */
    'currencies': Array<string>;
    /**
     * Code of the category tree linked to the channel
     * @type {string}
     * @memberof ChannelList
     */
    'category_tree': string;
    /**
     * 
     * @type {ChannelListAllOfConversionUnits}
     * @memberof ChannelList
     */
    'conversion_units'?: ChannelListAllOfConversionUnits;
    /**
     * 
     * @type {ChannelListAllOfLabels}
     * @memberof ChannelList
     */
    'labels'?: ChannelListAllOfLabels;
}
/**
 * 
 * @export
 * @interface ChannelListAllOf
 */
export interface ChannelListAllOf {
    /**
     * Channel code
     * @type {string}
     * @memberof ChannelListAllOf
     */
    'code': string;
    /**
     * Codes of activated locales for the channel
     * @type {Array<string>}
     * @memberof ChannelListAllOf
     */
    'locales': Array<string>;
    /**
     * Codes of activated currencies for the channel
     * @type {Array<string>}
     * @memberof ChannelListAllOf
     */
    'currencies': Array<string>;
    /**
     * Code of the category tree linked to the channel
     * @type {string}
     * @memberof ChannelListAllOf
     */
    'category_tree': string;
    /**
     * 
     * @type {ChannelListAllOfConversionUnits}
     * @memberof ChannelListAllOf
     */
    'conversion_units'?: ChannelListAllOfConversionUnits;
    /**
     * 
     * @type {ChannelListAllOfLabels}
     * @memberof ChannelListAllOf
     */
    'labels'?: ChannelListAllOfLabels;
}
/**
 * Units to which the given metric attributes should be converted when exporting products
 * @export
 * @interface ChannelListAllOfConversionUnits
 */
export interface ChannelListAllOfConversionUnits {
    /**
     * Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel
     * @type {string}
     * @memberof ChannelListAllOfConversionUnits
     */
    'attributeCode'?: string;
}
/**
 * Channel labels for each locale
 * @export
 * @interface ChannelListAllOfLabels
 */
export interface ChannelListAllOfLabels {
    /**
     * Channel label for the locale `localeCode`
     * @type {string}
     * @memberof ChannelListAllOfLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface Channels
 */
export interface Channels {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof Channels
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof Channels
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface ChannelsPostRequest
 */
export interface ChannelsPostRequest {
    /**
     * Channel code
     * @type {string}
     * @memberof ChannelsPostRequest
     */
    'code': string;
    /**
     * Codes of activated locales for the channel
     * @type {Array<string>}
     * @memberof ChannelsPostRequest
     */
    'locales': Array<string>;
    /**
     * Codes of activated currencies for the channel
     * @type {Array<string>}
     * @memberof ChannelsPostRequest
     */
    'currencies': Array<string>;
    /**
     * Code of the category tree linked to the channel
     * @type {string}
     * @memberof ChannelsPostRequest
     */
    'category_tree': string;
    /**
     * 
     * @type {ChannelsPostRequestConversionUnits}
     * @memberof ChannelsPostRequest
     */
    'conversion_units'?: ChannelsPostRequestConversionUnits;
    /**
     * 
     * @type {ChannelsPostRequestLabels}
     * @memberof ChannelsPostRequest
     */
    'labels'?: ChannelsPostRequestLabels;
}
/**
 * Units to which the given metric attributes should be converted when exporting products
 * @export
 * @interface ChannelsPostRequestConversionUnits
 */
export interface ChannelsPostRequestConversionUnits {
    /**
     * Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel
     * @type {string}
     * @memberof ChannelsPostRequestConversionUnits
     */
    'attributeCode'?: string;
}
/**
 * Channel labels for each locale
 * @export
 * @interface ChannelsPostRequestLabels
 */
export interface ChannelsPostRequestLabels {
    /**
     * Channel label for the locale `localeCode`
     * @type {string}
     * @memberof ChannelsPostRequestLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface Currencies
 */
export interface Currencies {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof Currencies
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof Currencies
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface CurrenciesGet200Response
 */
export interface CurrenciesGet200Response {
    /**
     * Currency code
     * @type {string}
     * @memberof CurrenciesGet200Response
     */
    'code': string;
    /**
     * Whether the currency is enabled
     * @type {boolean}
     * @memberof CurrenciesGet200Response
     */
    'enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     * Currency code
     * @type {string}
     * @memberof Currency
     */
    'code': string;
    /**
     * Whether the currency is enabled
     * @type {boolean}
     * @memberof Currency
     */
    'enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface CurrencyList
 */
export interface CurrencyList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof CurrencyList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Currency code
     * @type {string}
     * @memberof CurrencyList
     */
    'code': string;
    /**
     * Whether the currency is enabled
     * @type {boolean}
     * @memberof CurrencyList
     */
    'enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface CurrencyListAllOf
 */
export interface CurrencyListAllOf {
    /**
     * Currency code
     * @type {string}
     * @memberof CurrencyListAllOf
     */
    'code': string;
    /**
     * Whether the currency is enabled
     * @type {boolean}
     * @memberof CurrencyListAllOf
     */
    'enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface DeprecatedAsset
 */
export interface DeprecatedAsset {
    /**
     * PAM asset code
     * @type {string}
     * @memberof DeprecatedAsset
     */
    'code': string;
    /**
     * Codes of the PAM asset categories in which the asset is classified
     * @type {Array<string>}
     * @memberof DeprecatedAsset
     */
    'categories'?: Array<string>;
    /**
     * Description of the PAM asset
     * @type {string}
     * @memberof DeprecatedAsset
     */
    'description'?: string;
    /**
     * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
     * @type {boolean}
     * @memberof DeprecatedAsset
     */
    'localizable'?: boolean;
    /**
     * Tags of the PAM asset
     * @type {Array<string>}
     * @memberof DeprecatedAsset
     */
    'tags'?: Array<string>;
    /**
     * Date on which the PAM asset expire
     * @type {string}
     * @memberof DeprecatedAsset
     */
    'end_of_use'?: string;
    /**
     * Variations of the PAM asset
     * @type {Array<PostPamAssetsRequestVariationFilesInner>}
     * @memberof DeprecatedAsset
     */
    'variation_files'?: Array<PostPamAssetsRequestVariationFilesInner>;
    /**
     * Reference files of the PAM asset
     * @type {Array<PostPamAssetsRequestReferenceFilesInner>}
     * @memberof DeprecatedAsset
     */
    'reference_files'?: Array<PostPamAssetsRequestReferenceFilesInner>;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetCategory
 */
export interface DeprecatedAssetCategory {
    /**
     * PAM asset category code
     * @type {string}
     * @memberof DeprecatedAssetCategory
     */
    'code': string;
    /**
     * PAM ssset category code of the parent\'s asset category
     * @type {string}
     * @memberof DeprecatedAssetCategory
     */
    'parent'?: string;
    /**
     * 
     * @type {PostAssetCategoriesRequestLabels}
     * @memberof DeprecatedAssetCategory
     */
    'labels'?: PostAssetCategoriesRequestLabels;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetCategoryList
 */
export interface DeprecatedAssetCategoryList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof DeprecatedAssetCategoryList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * PAM asset category code
     * @type {string}
     * @memberof DeprecatedAssetCategoryList
     */
    'code': string;
    /**
     * PAM ssset category code of the parent\'s asset category
     * @type {string}
     * @memberof DeprecatedAssetCategoryList
     */
    'parent'?: string;
    /**
     * 
     * @type {DeprecatedAssetCategoryListAllOfLabels}
     * @memberof DeprecatedAssetCategoryList
     */
    'labels'?: DeprecatedAssetCategoryListAllOfLabels;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetCategoryListAllOf
 */
export interface DeprecatedAssetCategoryListAllOf {
    /**
     * PAM asset category code
     * @type {string}
     * @memberof DeprecatedAssetCategoryListAllOf
     */
    'code': string;
    /**
     * PAM ssset category code of the parent\'s asset category
     * @type {string}
     * @memberof DeprecatedAssetCategoryListAllOf
     */
    'parent'?: string;
    /**
     * 
     * @type {DeprecatedAssetCategoryListAllOfLabels}
     * @memberof DeprecatedAssetCategoryListAllOf
     */
    'labels'?: DeprecatedAssetCategoryListAllOfLabels;
}
/**
 * PAM asset category labels for each locale
 * @export
 * @interface DeprecatedAssetCategoryListAllOfLabels
 */
export interface DeprecatedAssetCategoryListAllOfLabels {
    /**
     * PAM asset category label for the locale `localeCode`
     * @type {string}
     * @memberof DeprecatedAssetCategoryListAllOfLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetList
 */
export interface DeprecatedAssetList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof DeprecatedAssetList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * PAM asset code
     * @type {string}
     * @memberof DeprecatedAssetList
     */
    'code': string;
    /**
     * Codes of the PAM asset categories in which the asset is classified
     * @type {Array<string>}
     * @memberof DeprecatedAssetList
     */
    'categories'?: Array<string>;
    /**
     * Description of the PAM asset
     * @type {string}
     * @memberof DeprecatedAssetList
     */
    'description'?: string;
    /**
     * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
     * @type {boolean}
     * @memberof DeprecatedAssetList
     */
    'localizable'?: boolean;
    /**
     * Tags of the PAM asset
     * @type {Array<string>}
     * @memberof DeprecatedAssetList
     */
    'tags'?: Array<string>;
    /**
     * Date on which the PAM asset expire
     * @type {string}
     * @memberof DeprecatedAssetList
     */
    'end_of_use'?: string;
    /**
     * Variations of the PAM asset
     * @type {Array<DeprecatedAssetListAllOfVariationFiles>}
     * @memberof DeprecatedAssetList
     */
    'variation_files'?: Array<DeprecatedAssetListAllOfVariationFiles>;
    /**
     * Reference files of the PAM asset
     * @type {Array<DeprecatedAssetListAllOfReferenceFiles>}
     * @memberof DeprecatedAssetList
     */
    'reference_files'?: Array<DeprecatedAssetListAllOfReferenceFiles>;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetListAllOf
 */
export interface DeprecatedAssetListAllOf {
    /**
     * PAM asset code
     * @type {string}
     * @memberof DeprecatedAssetListAllOf
     */
    'code': string;
    /**
     * Codes of the PAM asset categories in which the asset is classified
     * @type {Array<string>}
     * @memberof DeprecatedAssetListAllOf
     */
    'categories'?: Array<string>;
    /**
     * Description of the PAM asset
     * @type {string}
     * @memberof DeprecatedAssetListAllOf
     */
    'description'?: string;
    /**
     * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
     * @type {boolean}
     * @memberof DeprecatedAssetListAllOf
     */
    'localizable'?: boolean;
    /**
     * Tags of the PAM asset
     * @type {Array<string>}
     * @memberof DeprecatedAssetListAllOf
     */
    'tags'?: Array<string>;
    /**
     * Date on which the PAM asset expire
     * @type {string}
     * @memberof DeprecatedAssetListAllOf
     */
    'end_of_use'?: string;
    /**
     * Variations of the PAM asset
     * @type {Array<DeprecatedAssetListAllOfVariationFiles>}
     * @memberof DeprecatedAssetListAllOf
     */
    'variation_files'?: Array<DeprecatedAssetListAllOfVariationFiles>;
    /**
     * Reference files of the PAM asset
     * @type {Array<DeprecatedAssetListAllOfReferenceFiles>}
     * @memberof DeprecatedAssetListAllOf
     */
    'reference_files'?: Array<DeprecatedAssetListAllOfReferenceFiles>;
}
/**
 * Links to get and download the variation file
 * @export
 * @interface DeprecatedAssetListAllOfLink
 */
export interface DeprecatedAssetListAllOfLink {
    /**
     * 
     * @type {DeprecatedAssetListAllOfLinkSelf}
     * @memberof DeprecatedAssetListAllOfLink
     */
    'self'?: DeprecatedAssetListAllOfLinkSelf;
    /**
     * 
     * @type {DeprecatedAssetListAllOfLinkDownload}
     * @memberof DeprecatedAssetListAllOfLink
     */
    'download'?: DeprecatedAssetListAllOfLinkDownload;
}
/**
 * Links to get and download the reference file
 * @export
 * @interface DeprecatedAssetListAllOfLink1
 */
export interface DeprecatedAssetListAllOfLink1 {
    /**
     * 
     * @type {DeprecatedAssetListAllOfLink1Self}
     * @memberof DeprecatedAssetListAllOfLink1
     */
    'self'?: DeprecatedAssetListAllOfLink1Self;
    /**
     * 
     * @type {DeprecatedAssetListAllOfLink1Download}
     * @memberof DeprecatedAssetListAllOfLink1
     */
    'download'?: DeprecatedAssetListAllOfLink1Download;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetListAllOfLink1Download
 */
export interface DeprecatedAssetListAllOfLink1Download {
    /**
     * URI to download the reference file
     * @type {string}
     * @memberof DeprecatedAssetListAllOfLink1Download
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetListAllOfLink1Self
 */
export interface DeprecatedAssetListAllOfLink1Self {
    /**
     * URI of the reference file entity
     * @type {string}
     * @memberof DeprecatedAssetListAllOfLink1Self
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetListAllOfLinkDownload
 */
export interface DeprecatedAssetListAllOfLinkDownload {
    /**
     * URI to download the variation file
     * @type {string}
     * @memberof DeprecatedAssetListAllOfLinkDownload
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetListAllOfLinkSelf
 */
export interface DeprecatedAssetListAllOfLinkSelf {
    /**
     * URI of the variation entity
     * @type {string}
     * @memberof DeprecatedAssetListAllOfLinkSelf
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetListAllOfReferenceFiles
 */
export interface DeprecatedAssetListAllOfReferenceFiles {
    /**
     * 
     * @type {DeprecatedAssetListAllOfLink1}
     * @memberof DeprecatedAssetListAllOfReferenceFiles
     */
    '_link'?: DeprecatedAssetListAllOfLink1;
    /**
     * Locale code of the reference file
     * @type {string}
     * @memberof DeprecatedAssetListAllOfReferenceFiles
     */
    'locale'?: string;
    /**
     * Code of the reference file
     * @type {string}
     * @memberof DeprecatedAssetListAllOfReferenceFiles
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetListAllOfVariationFiles
 */
export interface DeprecatedAssetListAllOfVariationFiles {
    /**
     * 
     * @type {DeprecatedAssetListAllOfLink}
     * @memberof DeprecatedAssetListAllOfVariationFiles
     */
    '_link'?: DeprecatedAssetListAllOfLink;
    /**
     * Locale code of the variation
     * @type {string}
     * @memberof DeprecatedAssetListAllOfVariationFiles
     */
    'locale'?: string;
    /**
     * Channel code of the variation
     * @type {string}
     * @memberof DeprecatedAssetListAllOfVariationFiles
     */
    'scope'?: string;
    /**
     * Code of the variation
     * @type {string}
     * @memberof DeprecatedAssetListAllOfVariationFiles
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetReferenceFile
 */
export interface DeprecatedAssetReferenceFile {
    /**
     * Code of the PAM asset reference file
     * @type {string}
     * @memberof DeprecatedAssetReferenceFile
     */
    'code'?: string;
    /**
     * Locale of the PAM asset reference file, equal to `null` if the asset is not localizable
     * @type {string}
     * @memberof DeprecatedAssetReferenceFile
     */
    'locale'?: string;
    /**
     * 
     * @type {GetReferenceFilesLocaleCode200ResponseLink}
     * @memberof DeprecatedAssetReferenceFile
     */
    '_link'?: GetReferenceFilesLocaleCode200ResponseLink;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetReferenceFileUploadWarning
 */
export interface DeprecatedAssetReferenceFileUploadWarning {
    /**
     * Message explaining the warning
     * @type {string}
     * @memberof DeprecatedAssetReferenceFileUploadWarning
     */
    'message'?: string;
    /**
     * 
     * @type {Array<PostReferenceFilesLocaleCode201ResponseErrorsInner>}
     * @memberof DeprecatedAssetReferenceFileUploadWarning
     */
    'errors'?: Array<PostReferenceFilesLocaleCode201ResponseErrorsInner>;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetTag
 */
export interface DeprecatedAssetTag {
    /**
     * PAM asset tag code
     * @type {string}
     * @memberof DeprecatedAssetTag
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetTagList
 */
export interface DeprecatedAssetTagList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof DeprecatedAssetTagList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * PAM asset tag code
     * @type {string}
     * @memberof DeprecatedAssetTagList
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetTagListAllOf
 */
export interface DeprecatedAssetTagListAllOf {
    /**
     * PAM asset tag code
     * @type {string}
     * @memberof DeprecatedAssetTagListAllOf
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface DeprecatedAssetVariationFile
 */
export interface DeprecatedAssetVariationFile {
    /**
     * Code of the PAM asset variation file
     * @type {string}
     * @memberof DeprecatedAssetVariationFile
     */
    'code'?: string;
    /**
     * Locale of the PAM asset variation file, equal to `null` if the asset is not localizable
     * @type {string}
     * @memberof DeprecatedAssetVariationFile
     */
    'locale'?: string;
    /**
     * Channel of the PAM asset variation file
     * @type {string}
     * @memberof DeprecatedAssetVariationFile
     */
    'scope'?: string;
    /**
     * 
     * @type {GetVariationFilesChannelCodeLocaleCode200ResponseLink}
     * @memberof DeprecatedAssetVariationFile
     */
    '_link'?: GetVariationFilesChannelCodeLocaleCode200ResponseLink;
}
/**
 * 
 * @export
 * @interface ErrorByLine
 */
export interface ErrorByLine {
    /**
     * Line number
     * @type {number}
     * @memberof ErrorByLine
     */
    'line'?: number;
    /**
     * Resource identifier, only filled when the resource is a product
     * @type {string}
     * @memberof ErrorByLine
     */
    'identifier'?: string;
    /**
     * Resource code, only filled when the resource is not a product
     * @type {string}
     * @memberof ErrorByLine
     */
    'code'?: string;
    /**
     * HTTP status code, see <a href=\"/documentation/responses.html#client-errors\">Client errors</a> to understand the meaning of each code
     * @type {number}
     * @memberof ErrorByLine
     */
    'status_code'?: number;
    /**
     * Message explaining the error
     * @type {string}
     * @memberof ErrorByLine
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ErrorByLineProductUuid
 */
export interface ErrorByLineProductUuid {
    /**
     * Line number
     * @type {number}
     * @memberof ErrorByLineProductUuid
     */
    'line'?: number;
    /**
     * Product uuid
     * @type {string}
     * @memberof ErrorByLineProductUuid
     */
    'uuid'?: string;
    /**
     * HTTP status code, see <a href=\"/documentation/responses.html#client-errors\">Client errors</a> to understand the meaning of each code
     * @type {number}
     * @memberof ErrorByLineProductUuid
     */
    'status_code'?: number;
    /**
     * Message explaining the error
     * @type {string}
     * @memberof ErrorByLineProductUuid
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Families
 */
export interface Families {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof Families
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof Families
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface Family
 */
export interface Family {
    /**
     * Family code
     * @type {string}
     * @memberof Family
     */
    'code': string;
    /**
     * Attribute code used as label
     * @type {string}
     * @memberof Family
     */
    'attribute_as_label': string;
    /**
     * Attribute code used as the main picture in the user interface (only since v2.0)
     * @type {string}
     * @memberof Family
     */
    'attribute_as_image'?: string;
    /**
     * Attributes codes that compose the family
     * @type {Array<string>}
     * @memberof Family
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {PostFamiliesRequestAttributeRequirements}
     * @memberof Family
     */
    'attribute_requirements'?: PostFamiliesRequestAttributeRequirements;
    /**
     * 
     * @type {PostFamiliesRequestLabels}
     * @memberof Family
     */
    'labels'?: PostFamiliesRequestLabels;
}
/**
 * 
 * @export
 * @interface FamilyList
 */
export interface FamilyList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof FamilyList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Family code
     * @type {string}
     * @memberof FamilyList
     */
    'code': string;
    /**
     * Attribute code used as label
     * @type {string}
     * @memberof FamilyList
     */
    'attribute_as_label': string;
    /**
     * Attribute code used as the main picture in the user interface (only since v2.0)
     * @type {string}
     * @memberof FamilyList
     */
    'attribute_as_image'?: string;
    /**
     * Attributes codes that compose the family
     * @type {Array<string>}
     * @memberof FamilyList
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {FamilyListAllOfAttributeRequirements}
     * @memberof FamilyList
     */
    'attribute_requirements'?: FamilyListAllOfAttributeRequirements;
    /**
     * 
     * @type {FamilyListAllOfLabels}
     * @memberof FamilyList
     */
    'labels'?: FamilyListAllOfLabels;
}
/**
 * 
 * @export
 * @interface FamilyListAllOf
 */
export interface FamilyListAllOf {
    /**
     * Family code
     * @type {string}
     * @memberof FamilyListAllOf
     */
    'code': string;
    /**
     * Attribute code used as label
     * @type {string}
     * @memberof FamilyListAllOf
     */
    'attribute_as_label': string;
    /**
     * Attribute code used as the main picture in the user interface (only since v2.0)
     * @type {string}
     * @memberof FamilyListAllOf
     */
    'attribute_as_image'?: string;
    /**
     * Attributes codes that compose the family
     * @type {Array<string>}
     * @memberof FamilyListAllOf
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {FamilyListAllOfAttributeRequirements}
     * @memberof FamilyListAllOf
     */
    'attribute_requirements'?: FamilyListAllOfAttributeRequirements;
    /**
     * 
     * @type {FamilyListAllOfLabels}
     * @memberof FamilyListAllOf
     */
    'labels'?: FamilyListAllOfLabels;
}
/**
 * Attributes codes of the family that are required for the completeness calculation for each channel
 * @export
 * @interface FamilyListAllOfAttributeRequirements
 */
export interface FamilyListAllOfAttributeRequirements {
    /**
     * 
     * @type {Array<string>}
     * @memberof FamilyListAllOfAttributeRequirements
     */
    'channelCode'?: Array<string>;
}
/**
 * Family labels for each locale
 * @export
 * @interface FamilyListAllOfLabels
 */
export interface FamilyListAllOfLabels {
    /**
     * Family label for the locale `localeCode`
     * @type {string}
     * @memberof FamilyListAllOfLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface FamilyVariant
 */
export interface FamilyVariant {
    /**
     * Family variant code
     * @type {string}
     * @memberof FamilyVariant
     */
    'code': string;
    /**
     * Attributes distribution according to the enrichment level
     * @type {Array<PostFamiliesFamilyCodeVariantsRequestVariantAttributeSetsInner>}
     * @memberof FamilyVariant
     */
    'variant_attribute_sets': Array<PostFamiliesFamilyCodeVariantsRequestVariantAttributeSetsInner>;
    /**
     * 
     * @type {PostFamiliesFamilyCodeVariantsRequestLabels}
     * @memberof FamilyVariant
     */
    'labels'?: PostFamiliesFamilyCodeVariantsRequestLabels;
}
/**
 * 
 * @export
 * @interface FamilyVariantList
 */
export interface FamilyVariantList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof FamilyVariantList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Family variant code
     * @type {string}
     * @memberof FamilyVariantList
     */
    'code': string;
    /**
     * Attributes distribution according to the enrichment level
     * @type {Array<FamilyVariantListAllOfVariantAttributeSets>}
     * @memberof FamilyVariantList
     */
    'variant_attribute_sets': Array<FamilyVariantListAllOfVariantAttributeSets>;
    /**
     * 
     * @type {FamilyVariantListAllOfLabels}
     * @memberof FamilyVariantList
     */
    'labels'?: FamilyVariantListAllOfLabels;
}
/**
 * 
 * @export
 * @interface FamilyVariantListAllOf
 */
export interface FamilyVariantListAllOf {
    /**
     * Family variant code
     * @type {string}
     * @memberof FamilyVariantListAllOf
     */
    'code': string;
    /**
     * Attributes distribution according to the enrichment level
     * @type {Array<FamilyVariantListAllOfVariantAttributeSets>}
     * @memberof FamilyVariantListAllOf
     */
    'variant_attribute_sets': Array<FamilyVariantListAllOfVariantAttributeSets>;
    /**
     * 
     * @type {FamilyVariantListAllOfLabels}
     * @memberof FamilyVariantListAllOf
     */
    'labels'?: FamilyVariantListAllOfLabels;
}
/**
 * Family variant labels for each locale
 * @export
 * @interface FamilyVariantListAllOfLabels
 */
export interface FamilyVariantListAllOfLabels {
    /**
     * Family variant label for the locale `localeCode`
     * @type {string}
     * @memberof FamilyVariantListAllOfLabels
     */
    'localeCode'?: string;
}
/**
 * Enrichment level
 * @export
 * @interface FamilyVariantListAllOfVariantAttributeSets
 */
export interface FamilyVariantListAllOfVariantAttributeSets {
    /**
     * Enrichment level
     * @type {number}
     * @memberof FamilyVariantListAllOfVariantAttributeSets
     */
    'level': number;
    /**
     * Codes of attributes used as variant axes
     * @type {Array<string>}
     * @memberof FamilyVariantListAllOfVariantAttributeSets
     */
    'axes': Array<string>;
    /**
     * Codes of attributes bind to this enrichment level
     * @type {Array<string>}
     * @memberof FamilyVariantListAllOfVariantAttributeSets
     */
    'attributes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface FamilyVariants
 */
export interface FamilyVariants {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof FamilyVariants
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof FamilyVariants
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface GetAppCatalogsMappingSchemaProduct200Response
 */
export interface GetAppCatalogsMappingSchemaProduct200Response {
    /**
     * id of your schema
     * @type {string}
     * @memberof GetAppCatalogsMappingSchemaProduct200Response
     */
    '$id'?: string;
    /**
     * $schema indicates which product mapping schema version your app uses
     * @type {string}
     * @memberof GetAppCatalogsMappingSchemaProduct200Response
     */
    '$schema': string;
    /**
     * allows you to add a comment
     * @type {string}
     * @memberof GetAppCatalogsMappingSchemaProduct200Response
     */
    '$comment'?: string;
    /**
     * allows you to add a title to your mapping schema
     * @type {string}
     * @memberof GetAppCatalogsMappingSchemaProduct200Response
     */
    'title'?: string;
    /**
     * allows you to add a description of your mapping schema
     * @type {string}
     * @memberof GetAppCatalogsMappingSchemaProduct200Response
     */
    'description'?: string;
    /**
     * should always be \"object\"
     * @type {string}
     * @memberof GetAppCatalogsMappingSchemaProduct200Response
     */
    'type'?: string;
    /**
     * list and describe the targets your app expects
     * @type {object}
     * @memberof GetAppCatalogsMappingSchemaProduct200Response
     */
    'properties': object;
}
/**
 * 
 * @export
 * @interface GetAssetFamiliesCodeAttributes200ResponseInner
 */
export interface GetAssetFamiliesCodeAttributes200ResponseInner {
    /**
     * Attribute code
     * @type {string}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'code': string;
    /**
     * 
     * @type {PostAttributesRequestLabels}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'labels'?: PostAttributesRequestLabels;
    /**
     * Attribute type. See <a href=\'/concepts/asset-manager.html#asset-attribute\'>type</a> section for more details.
     * @type {string}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'type': GetAssetFamiliesCodeAttributes200ResponseInnerTypeEnum;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     * @type {boolean}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'value_per_locale'?: boolean;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     * @type {boolean}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'value_per_channel'?: boolean;
    /**
     * Whether the attribute should be part of the record\'s completeness calculation
     * @type {boolean}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'is_required_for_completeness'?: boolean;
    /**
     * Whether the attribute should be in read only mode only in the UI, but you can still update it with the API
     * @type {boolean}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'is_read_only'?: boolean;
    /**
     * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
     * @type {number}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'max_characters'?: number;
    /**
     * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
     * @type {boolean}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'is_textarea'?: boolean;
    /**
     * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
     * @type {boolean}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'is_rich_text_editor'?: boolean;
    /**
     * Validation rule type used to validate the attribute value when the attribute type is `text`
     * @type {string}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'validation_rule'?: GetAssetFamiliesCodeAttributes200ResponseInnerValidationRuleEnum;
    /**
     * Regexp expression used to validate the attribute value when the attribute type is `text`
     * @type {string}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'validation_regexp'?: string;
    /**
     * Extensions allowed when the attribute type is `media_file`
     * @type {Array<string>}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'allowed_extensions'?: Array<string>;
    /**
     * Max file size in MB when the attribute type is `media_file`
     * @type {string}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'max_file_size'?: string;
    /**
     * Whether decimals are allowed when the attribute type is `number`
     * @type {boolean}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'decimals_allowed'?: boolean;
    /**
     * Minimum value allowed when the attribute type is `number`
     * @type {string}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'min_value'?: string;
    /**
     * Maximum value allowed when the attribute type is `number`
     * @type {string}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'max_value'?: string;
    /**
     * For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.
     * @type {string}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'media_type': GetAssetFamiliesCodeAttributes200ResponseInnerMediaTypeEnum;
    /**
     * Prefix of the `media_link` attribute type. The common url root that prefixes the link to the media
     * @type {string}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'prefix'?: string;
    /**
     * Suffix of the `media_link` attribute type. The common url suffix for the media
     * @type {string}
     * @memberof GetAssetFamiliesCodeAttributes200ResponseInner
     */
    'suffix'?: string;
}

export const GetAssetFamiliesCodeAttributes200ResponseInnerTypeEnum = {
    Text: 'text',
    MediaLink: 'media_link',
    Number: 'number',
    MediaFile: 'media_file',
    SingleOption: 'single_option',
    MultipleOptions: 'multiple_options',
    ReferenceEntitySingleLink: 'reference_entity_single_link',
    ReferenceEntityMultipleLinks: 'reference_entity_multiple_links',
    Boolean: 'boolean'
} as const;

export type GetAssetFamiliesCodeAttributes200ResponseInnerTypeEnum = typeof GetAssetFamiliesCodeAttributes200ResponseInnerTypeEnum[keyof typeof GetAssetFamiliesCodeAttributes200ResponseInnerTypeEnum];
export const GetAssetFamiliesCodeAttributes200ResponseInnerValidationRuleEnum = {
    Email: 'email',
    Url: 'url',
    Regexp: 'regexp',
    None: 'none'
} as const;

export type GetAssetFamiliesCodeAttributes200ResponseInnerValidationRuleEnum = typeof GetAssetFamiliesCodeAttributes200ResponseInnerValidationRuleEnum[keyof typeof GetAssetFamiliesCodeAttributes200ResponseInnerValidationRuleEnum];
export const GetAssetFamiliesCodeAttributes200ResponseInnerMediaTypeEnum = {
    Image: 'image',
    Pdf: 'pdf',
    Youtube: 'youtube',
    Vimeo: 'vimeo',
    Other: 'other'
} as const;

export type GetAssetFamiliesCodeAttributes200ResponseInnerMediaTypeEnum = typeof GetAssetFamiliesCodeAttributes200ResponseInnerMediaTypeEnum[keyof typeof GetAssetFamiliesCodeAttributes200ResponseInnerMediaTypeEnum];

/**
 * 
 * @export
 * @interface GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner
 */
export interface GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner {
    /**
     * Attribute\'s option code
     * @type {string}
     * @memberof GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner
     */
    'code': string;
    /**
     * 
     * @type {PostAttributesRequestLabels}
     * @memberof GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner
     */
    'labels'?: PostAttributesRequestLabels;
}
/**
 * 
 * @export
 * @interface GetAssetFamilyCode200Response
 */
export interface GetAssetFamilyCode200Response {
    /**
     * Asset family code
     * @type {string}
     * @memberof GetAssetFamilyCode200Response
     */
    'code': string;
    /**
     * 
     * @type {GetAssetFamilyCode200ResponseLabels}
     * @memberof GetAssetFamilyCode200Response
     */
    'labels'?: GetAssetFamilyCode200ResponseLabels;
    /**
     * Attribute code that is used as the main media of the asset family.
     * @type {string}
     * @memberof GetAssetFamilyCode200Response
     */
    'attribute_as_main_media'?: string;
    /**
     * 
     * @type {GetAssetFamilyCode200ResponseNamingConvention}
     * @memberof GetAssetFamilyCode200Response
     */
    'naming_convention'?: GetAssetFamilyCode200ResponseNamingConvention;
    /**
     * The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href=\'/concepts/asset-manager.html#focus-on-the-product-link-rule\'>here</a>.
     * @type {Array<GetAssetFamilyCode200ResponseProductLinkRulesInner>}
     * @memberof GetAssetFamilyCode200Response
     */
    'product_link_rules'?: Array<GetAssetFamilyCode200ResponseProductLinkRulesInner>;
    /**
     * The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href=\'/concepts/asset-manager.html#focus-on-the-transformations\'>here</a>.
     * @type {Array<GetAssetFamilyCode200ResponseTransformationsInner>}
     * @memberof GetAssetFamilyCode200Response
     */
    'transformations'?: Array<GetAssetFamilyCode200ResponseTransformationsInner>;
}
/**
 * Asset family labels for each locale
 * @export
 * @interface GetAssetFamilyCode200ResponseLabels
 */
export interface GetAssetFamilyCode200ResponseLabels {
    /**
     * Asset family label for the locale `localeCode`
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseLabels
     */
    'localeCode'?: string;
}
/**
 * The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href=\'/concepts/asset-manager.html#focus-on-the-naming-convention\'>here</a>.
 * @export
 * @interface GetAssetFamilyCode200ResponseNamingConvention
 */
export interface GetAssetFamilyCode200ResponseNamingConvention {
    /**
     * The string on which the naming convention should be applied. More details <a href=\'/concepts/asset-manager.html#source\'>here</a>.
     * @type {object}
     * @memberof GetAssetFamilyCode200ResponseNamingConvention
     */
    'source'?: object;
    /**
     * The regular expression that should be applied on the source. More details <a href=\'/concepts/asset-manager.html#pattern\'>here</a>.
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseNamingConvention
     */
    'pattern'?: string;
    /**
     * Whether the asset should be created if the naming convention failed to apply. More details <a href=\'/concepts/asset-manager.html#abort-asset-creation-on-error\'>here</a>.
     * @type {boolean}
     * @memberof GetAssetFamilyCode200ResponseNamingConvention
     */
    'abort_asset_creation_on_error'?: boolean;
}
/**
 * 
 * @export
 * @interface GetAssetFamilyCode200ResponseProductLinkRulesInner
 */
export interface GetAssetFamilyCode200ResponseProductLinkRulesInner {
    /**
     * The product selection to which the assets of the asset family to be automatically linked. More details <a href=\'/concepts/asset-manager.html#product-selection\'>here</a>.
     * @type {Array<GetAssetFamilyCode200ResponseProductLinkRulesInnerProductSelectionsInner>}
     * @memberof GetAssetFamilyCode200ResponseProductLinkRulesInner
     */
    'product_selections'?: Array<GetAssetFamilyCode200ResponseProductLinkRulesInnerProductSelectionsInner>;
    /**
     * The product value in which your assets will be assigned. More details <a href=\'/concepts/asset-manager.html#product-value-assignment\'>here</a>.
     * @type {Array<GetAssetFamilyCode200ResponseProductLinkRulesInnerAssignAssetsToInner>}
     * @memberof GetAssetFamilyCode200ResponseProductLinkRulesInner
     */
    'assign_assets_to'?: Array<GetAssetFamilyCode200ResponseProductLinkRulesInnerAssignAssetsToInner>;
}
/**
 * 
 * @export
 * @interface GetAssetFamilyCode200ResponseProductLinkRulesInnerAssignAssetsToInner
 */
export interface GetAssetFamilyCode200ResponseProductLinkRulesInnerAssignAssetsToInner {
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseProductLinkRulesInnerAssignAssetsToInner
     */
    'attribute': string;
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseProductLinkRulesInnerAssignAssetsToInner
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseProductLinkRulesInnerAssignAssetsToInner
     */
    'channel'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseProductLinkRulesInnerAssignAssetsToInner
     */
    'mode': string;
}
/**
 * 
 * @export
 * @interface GetAssetFamilyCode200ResponseProductLinkRulesInnerProductSelectionsInner
 */
export interface GetAssetFamilyCode200ResponseProductLinkRulesInnerProductSelectionsInner {
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseProductLinkRulesInnerProductSelectionsInner
     */
    'field': string;
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseProductLinkRulesInnerProductSelectionsInner
     */
    'operator': string;
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseProductLinkRulesInnerProductSelectionsInner
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseProductLinkRulesInnerProductSelectionsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseProductLinkRulesInnerProductSelectionsInner
     */
    'channel'?: string;
}
/**
 * 
 * @export
 * @interface GetAssetFamilyCode200ResponseTransformationsInner
 */
export interface GetAssetFamilyCode200ResponseTransformationsInner {
    /**
     * The name of the transformation
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInner
     */
    'label': string;
    /**
     * The suffix that will be appended to the source filename to generate the target filename. More details <a href=\'/concepts/asset-manager.html#target-filename\'>here</a>.
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInner
     */
    'filename_suffix'?: string;
    /**
     * The prefix that will be prepended to the source filename to generate the target filename. More details <a href=\'/concepts/asset-manager.html#target-filename\'>here</a>.
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInner
     */
    'filename_prefix'?: string;
    /**
     * 
     * @type {GetAssetFamilyCode200ResponseTransformationsInnerSource}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInner
     */
    'source': GetAssetFamilyCode200ResponseTransformationsInnerSource;
    /**
     * 
     * @type {GetAssetFamilyCode200ResponseTransformationsInnerTarget}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInner
     */
    'target': GetAssetFamilyCode200ResponseTransformationsInnerTarget;
    /**
     * 
     * @type {GetAssetFamilyCode200ResponseTransformationsInnerOperations}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInner
     */
    'operations': GetAssetFamilyCode200ResponseTransformationsInnerOperations;
}
/**
 * The transformations that should be applied to your source file to generate the target file. More details <a href=\'/concepts/asset-manager.html#transformation-operations\'>here</a>.
 * @export
 * @interface GetAssetFamilyCode200ResponseTransformationsInnerOperations
 */
export interface GetAssetFamilyCode200ResponseTransformationsInnerOperations {
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerOperations
     */
    'type'?: string;
    /**
     * 
     * @type {GetAssetFamilyCode200ResponseTransformationsInnerOperationsParameters}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerOperations
     */
    'parameters'?: GetAssetFamilyCode200ResponseTransformationsInnerOperationsParameters;
}
/**
 * 
 * @export
 * @interface GetAssetFamilyCode200ResponseTransformationsInnerOperationsParameters
 */
export interface GetAssetFamilyCode200ResponseTransformationsInnerOperationsParameters {
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerOperationsParameters
     */
    'colorspace'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerOperationsParameters
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerOperationsParameters
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerOperationsParameters
     */
    'ratio'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerOperationsParameters
     */
    'resolution-unit'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerOperationsParameters
     */
    'resolution-x'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerOperationsParameters
     */
    'resolution-y'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerOperationsParameters
     */
    'quality'?: number;
}
/**
 * The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href=\'/concepts/asset-manager.html#source-file\'>here</a>.
 * @export
 * @interface GetAssetFamilyCode200ResponseTransformationsInnerSource
 */
export interface GetAssetFamilyCode200ResponseTransformationsInnerSource {
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerSource
     */
    'attribute': string;
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerSource
     */
    'channel': string;
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerSource
     */
    'locale': string;
}
/**
 * The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href=\'/concepts/asset-manager.html#target-file\'>here</a>.
 * @export
 * @interface GetAssetFamilyCode200ResponseTransformationsInnerTarget
 */
export interface GetAssetFamilyCode200ResponseTransformationsInnerTarget {
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerTarget
     */
    'attribute': string;
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerTarget
     */
    'channel': string;
    /**
     * 
     * @type {string}
     * @memberof GetAssetFamilyCode200ResponseTransformationsInnerTarget
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface GetAssetTagsCode200Response
 */
export interface GetAssetTagsCode200Response {
    /**
     * PAM asset tag code
     * @type {string}
     * @memberof GetAssetTagsCode200Response
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface GetAttributesCode200Response
 */
export interface GetAttributesCode200Response {
    /**
     * Attribute code
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'code': string;
    /**
     * Attribute type. See <a href=\'/concepts/catalog-structure.html#attribute\'>type</a> section for more details.
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'type': GetAttributesCode200ResponseTypeEnum;
    /**
     * 
     * @type {PostAttributesRequestLabels}
     * @memberof GetAttributesCode200Response
     */
    'labels'?: PostAttributesRequestLabels;
    /**
     * Attribute group
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'group': string;
    /**
     * 
     * @type {PostAttributesRequestGroupLabels}
     * @memberof GetAttributesCode200Response
     */
    'group_labels'?: PostAttributesRequestGroupLabels;
    /**
     * Order of the attribute in its group
     * @type {number}
     * @memberof GetAttributesCode200Response
     */
    'sort_order'?: number;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     * @type {boolean}
     * @memberof GetAttributesCode200Response
     */
    'localizable'?: boolean;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     * @type {boolean}
     * @memberof GetAttributesCode200Response
     */
    'scopable'?: boolean;
    /**
     * To make the attribute locale specfic, specify here for which locales it is specific
     * @type {Array<string>}
     * @memberof GetAttributesCode200Response
     */
    'available_locales'?: Array<string>;
    /**
     * Whether two values for the attribute cannot be the same
     * @type {boolean}
     * @memberof GetAttributesCode200Response
     */
    'unique'?: boolean;
    /**
     * Whether the attribute can be used as a filter for the product grid in the PIM user interface
     * @type {boolean}
     * @memberof GetAttributesCode200Response
     */
    'useable_as_grid_filter'?: boolean;
    /**
     * Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
     * @type {number}
     * @memberof GetAttributesCode200Response
     */
    'max_characters'?: number;
    /**
     * Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'validation_rule'?: string;
    /**
     * Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'validation_regexp'?: string;
    /**
     * Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
     * @type {boolean}
     * @memberof GetAttributesCode200Response
     */
    'wysiwyg_enabled'?: boolean;
    /**
     * Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'number_min'?: string;
    /**
     * Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'number_max'?: string;
    /**
     * Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {boolean}
     * @memberof GetAttributesCode200Response
     */
    'decimals_allowed'?: boolean;
    /**
     * Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
     * @type {boolean}
     * @memberof GetAttributesCode200Response
     */
    'negative_allowed'?: boolean;
    /**
     * Metric family when the attribute type is `pim_catalog_metric`
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'metric_family'?: string;
    /**
     * Default metric unit when the attribute type is `pim_catalog_metric`
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'default_metric_unit'?: string;
    /**
     * Minimum date allowed when the attribute type is `pim_catalog_date`
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'date_min'?: string;
    /**
     * Maximum date allowed when the attribute type is `pim_catalog_date`
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'date_max'?: string;
    /**
     * Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     * @type {Array<string>}
     * @memberof GetAttributesCode200Response
     */
    'allowed_extensions'?: Array<string>;
    /**
     * Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'max_file_size'?: string;
    /**
     * Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
     * @type {string}
     * @memberof GetAttributesCode200Response
     */
    'reference_data_name'?: string;
    /**
     * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
     * @type {boolean}
     * @memberof GetAttributesCode200Response
     */
    'default_value'?: boolean;
    /**
     * Configuration of the Table attribute (columns)
     * @type {Array<PostAttributesRequestTableConfigurationInner>}
     * @memberof GetAttributesCode200Response
     */
    'table_configuration'?: Array<PostAttributesRequestTableConfigurationInner>;
}

export const GetAttributesCode200ResponseTypeEnum = {
    PimCatalogIdentifier: 'pim_catalog_identifier',
    PimCatalogMetric: 'pim_catalog_metric',
    PimCatalogNumber: 'pim_catalog_number',
    PimCatalogReferenceDataMultiSelect: 'pim_catalog_reference_data_multi_select',
    PimCatalogReferenceDataSimpleSelect: 'pim_catalog_reference_data_simple_select',
    PimCatalogSimpleselect: 'pim_catalog_simpleselect',
    PimCatalogMultiselect: 'pim_catalog_multiselect',
    PimCatalogDate: 'pim_catalog_date',
    PimCatalogTextarea: 'pim_catalog_textarea',
    PimCatalogText: 'pim_catalog_text',
    PimCatalogFile: 'pim_catalog_file',
    PimCatalogImage: 'pim_catalog_image',
    PimCatalogPriceCollection: 'pim_catalog_price_collection',
    PimCatalogBoolean: 'pim_catalog_boolean',
    AkeneoReferenceEntity: 'akeneo_reference_entity',
    AkeneoReferenceEntityCollection: 'akeneo_reference_entity_collection',
    PimCatalogAssetCollection: 'pim_catalog_asset_collection'
} as const;

export type GetAttributesCode200ResponseTypeEnum = typeof GetAttributesCode200ResponseTypeEnum[keyof typeof GetAttributesCode200ResponseTypeEnum];

/**
 * 
 * @export
 * @interface GetCategoriesCode200Response
 */
export interface GetCategoriesCode200Response {
    /**
     * Category code
     * @type {string}
     * @memberof GetCategoriesCode200Response
     */
    'code': string;
    /**
     * Category code of the parent\'s category
     * @type {string}
     * @memberof GetCategoriesCode200Response
     */
    'parent'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof GetCategoriesCode200Response
     */
    'updated'?: string;
    /**
     * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter \"with_position\" is set to \"true\")
     * @type {number}
     * @memberof GetCategoriesCode200Response
     */
    'position'?: number;
    /**
     * 
     * @type {PostCategoriesRequestLabels}
     * @memberof GetCategoriesCode200Response
     */
    'labels'?: PostCategoriesRequestLabels;
    /**
     * 
     * @type {PostCategoriesRequestValues}
     * @memberof GetCategoriesCode200Response
     */
    'values'?: PostCategoriesRequestValues;
}
/**
 * 
 * @export
 * @interface GetEndpoints200Response
 */
export interface GetEndpoints200Response {
    /**
     * Host name
     * @type {string}
     * @memberof GetEndpoints200Response
     */
    'host'?: string;
    /**
     * Endpoint to get the authentication token
     * @type {object}
     * @memberof GetEndpoints200Response
     */
    'authentication'?: object;
    /**
     * All the availables endpoints
     * @type {object}
     * @memberof GetEndpoints200Response
     */
    'routes'?: object;
}
/**
 * 
 * @export
 * @interface GetLocalesCode200Response
 */
export interface GetLocalesCode200Response {
    /**
     * Locale code
     * @type {string}
     * @memberof GetLocalesCode200Response
     */
    'code': string;
    /**
     * Whether the locale is enabled
     * @type {boolean}
     * @memberof GetLocalesCode200Response
     */
    'enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface GetMediaFilesCode200Response
 */
export interface GetMediaFilesCode200Response {
    /**
     * 
     * @type {GetMediaFilesCode200ResponseLinks}
     * @memberof GetMediaFilesCode200Response
     */
    '_links'?: GetMediaFilesCode200ResponseLinks;
    /**
     * Media file code
     * @type {string}
     * @memberof GetMediaFilesCode200Response
     */
    'code'?: string;
    /**
     * Extension of the media file
     * @type {string}
     * @memberof GetMediaFilesCode200Response
     */
    'extension'?: string;
    /**
     * Mime type of the media file
     * @type {string}
     * @memberof GetMediaFilesCode200Response
     */
    'mime_type'?: string;
    /**
     * Original filename of the media file
     * @type {string}
     * @memberof GetMediaFilesCode200Response
     */
    'original_filename'?: string;
    /**
     * Size of the media file
     * @type {number}
     * @memberof GetMediaFilesCode200Response
     */
    'size'?: number;
}
/**
 * 
 * @export
 * @interface GetMediaFilesCode200ResponseLinks
 */
export interface GetMediaFilesCode200ResponseLinks {
    /**
     * 
     * @type {GetMediaFilesCode200ResponseLinksDownload}
     * @memberof GetMediaFilesCode200ResponseLinks
     */
    'download'?: GetMediaFilesCode200ResponseLinksDownload;
}
/**
 * 
 * @export
 * @interface GetMediaFilesCode200ResponseLinksDownload
 */
export interface GetMediaFilesCode200ResponseLinksDownload {
    /**
     * URI to download the binaries of the media file
     * @type {string}
     * @memberof GetMediaFilesCode200ResponseLinksDownload
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface GetPamAssetsCode200Response
 */
export interface GetPamAssetsCode200Response {
    /**
     * PAM asset code
     * @type {string}
     * @memberof GetPamAssetsCode200Response
     */
    'code': string;
    /**
     * Codes of the PAM asset categories in which the asset is classified
     * @type {Array<string>}
     * @memberof GetPamAssetsCode200Response
     */
    'categories'?: Array<string>;
    /**
     * Description of the PAM asset
     * @type {string}
     * @memberof GetPamAssetsCode200Response
     */
    'description'?: string;
    /**
     * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
     * @type {boolean}
     * @memberof GetPamAssetsCode200Response
     */
    'localizable'?: boolean;
    /**
     * Tags of the PAM asset
     * @type {Array<string>}
     * @memberof GetPamAssetsCode200Response
     */
    'tags'?: Array<string>;
    /**
     * Date on which the PAM asset expire
     * @type {string}
     * @memberof GetPamAssetsCode200Response
     */
    'end_of_use'?: string;
    /**
     * Variations of the PAM asset
     * @type {Array<PostPamAssetsRequestVariationFilesInner>}
     * @memberof GetPamAssetsCode200Response
     */
    'variation_files'?: Array<PostPamAssetsRequestVariationFilesInner>;
    /**
     * Reference files of the PAM asset
     * @type {Array<PostPamAssetsRequestReferenceFilesInner>}
     * @memberof GetPamAssetsCode200Response
     */
    'reference_files'?: Array<PostPamAssetsRequestReferenceFilesInner>;
}
/**
 * 
 * @export
 * @interface GetProductModelsCode200Response
 */
export interface GetProductModelsCode200Response {
    /**
     * Product model code
     * @type {string}
     * @memberof GetProductModelsCode200Response
     */
    'code': string;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
     * @type {string}
     * @memberof GetProductModelsCode200Response
     */
    'family'?: string;
    /**
     * Family variant code from which the product model inherits its attributes and variant attributes
     * @type {string}
     * @memberof GetProductModelsCode200Response
     */
    'family_variant': string;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a>. This parent can be modified since the 2.3.
     * @type {string}
     * @memberof GetProductModelsCode200Response
     */
    'parent'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product model is categorized
     * @type {Array<string>}
     * @memberof GetProductModelsCode200Response
     */
    'categories'?: Array<string>;
    /**
     * 
     * @type {PostProductModelsRequestValues}
     * @memberof GetProductModelsCode200Response
     */
    'values'?: PostProductModelsRequestValues;
    /**
     * 
     * @type {PostProductModelsRequestAssociations}
     * @memberof GetProductModelsCode200Response
     */
    'associations'?: PostProductModelsRequestAssociations;
    /**
     * 
     * @type {PostProductModelsRequestQuantifiedAssociations}
     * @memberof GetProductModelsCode200Response
     */
    'quantified_associations'?: PostProductModelsRequestQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof GetProductModelsCode200Response
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof GetProductModelsCode200Response
     */
    'updated'?: string;
    /**
     * 
     * @type {PostProductModelsRequestMetadata}
     * @memberof GetProductModelsCode200Response
     */
    'metadata'?: PostProductModelsRequestMetadata;
    /**
     * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof GetProductModelsCode200Response
     */
    'quality_scores'?: object;
}
/**
 * 
 * @export
 * @interface GetProducts401Response
 */
export interface GetProducts401Response {
    /**
     * HTTP status code
     * @type {number}
     * @memberof GetProducts401Response
     */
    'code'?: number;
    /**
     * Message explaining the error
     * @type {string}
     * @memberof GetProducts401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GetProductsCode200Response
 */
export interface GetProductsCode200Response {
    /**
     * Product UUID
     * @type {string}
     * @memberof GetProductsCode200Response
     */
    'uuid'?: string;
    /**
     * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     * @type {string}
     * @memberof GetProductsCode200Response
     */
    'identifier': string;
    /**
     * Whether the product is enabled
     * @type {boolean}
     * @memberof GetProductsCode200Response
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the product inherits its attributes and attributes requirements.
     * @type {string}
     * @memberof GetProductsCode200Response
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product is classified
     * @type {Array<string>}
     * @memberof GetProductsCode200Response
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the product belong
     * @type {Array<string>}
     * @memberof GetProductsCode200Response
     */
    'groups'?: Array<string>;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     * @type {string}
     * @memberof GetProductsCode200Response
     */
    'parent'?: string;
    /**
     * 
     * @type {PostProductsRequestValues}
     * @memberof GetProductsCode200Response
     */
    'values'?: PostProductsRequestValues;
    /**
     * 
     * @type {PostProductsRequestAssociations}
     * @memberof GetProductsCode200Response
     */
    'associations'?: PostProductsRequestAssociations;
    /**
     * 
     * @type {PostProductsRequestQuantifiedAssociations}
     * @memberof GetProductsCode200Response
     */
    'quantified_associations'?: PostProductsRequestQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof GetProductsCode200Response
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof GetProductsCode200Response
     */
    'updated'?: string;
    /**
     * 
     * @type {PostProductsRequestMetadata}
     * @memberof GetProductsCode200Response
     */
    'metadata'?: PostProductsRequestMetadata;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof GetProductsCode200Response
     */
    'quality_scores'?: object;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
     * @type {Array<PostProductsRequestCompletenessesInner>}
     * @memberof GetProductsCode200Response
     */
    'completenesses'?: Array<PostProductsRequestCompletenessesInner>;
}
/**
 * 
 * @export
 * @interface GetProductsUuidUuid200Response
 */
export interface GetProductsUuidUuid200Response {
    /**
     * Product uuid
     * @type {string}
     * @memberof GetProductsUuidUuid200Response
     */
    'uuid'?: string;
    /**
     * Whether the product is enabled
     * @type {boolean}
     * @memberof GetProductsUuidUuid200Response
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the product inherits its attributes and attributes requirements.
     * @type {string}
     * @memberof GetProductsUuidUuid200Response
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product is classified
     * @type {Array<string>}
     * @memberof GetProductsUuidUuid200Response
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the product belong
     * @type {Array<string>}
     * @memberof GetProductsUuidUuid200Response
     */
    'groups'?: Array<string>;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     * @type {string}
     * @memberof GetProductsUuidUuid200Response
     */
    'parent'?: string;
    /**
     * 
     * @type {PostProductsRequestValues}
     * @memberof GetProductsUuidUuid200Response
     */
    'values'?: PostProductsRequestValues;
    /**
     * 
     * @type {PostProductsUuidRequestAssociations}
     * @memberof GetProductsUuidUuid200Response
     */
    'associations'?: PostProductsUuidRequestAssociations;
    /**
     * 
     * @type {PostProductsUuidRequestQuantifiedAssociations}
     * @memberof GetProductsUuidUuid200Response
     */
    'quantified_associations'?: PostProductsUuidRequestQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof GetProductsUuidUuid200Response
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof GetProductsUuidUuid200Response
     */
    'updated'?: string;
    /**
     * 
     * @type {PostProductsRequestMetadata}
     * @memberof GetProductsUuidUuid200Response
     */
    'metadata'?: PostProductsRequestMetadata;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof GetProductsUuidUuid200Response
     */
    'quality_scores'?: object;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
     * @type {Array<PostProductsRequestCompletenessesInner>}
     * @memberof GetProductsUuidUuid200Response
     */
    'completenesses'?: Array<PostProductsRequestCompletenessesInner>;
}
/**
 * 
 * @export
 * @interface GetPublishedProductsCode200Response
 */
export interface GetPublishedProductsCode200Response {
    /**
     * Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     * @type {string}
     * @memberof GetPublishedProductsCode200Response
     */
    'identifier': string;
    /**
     * Whether the published product is enable
     * @type {boolean}
     * @memberof GetPublishedProductsCode200Response
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the published product inherits its attributes and attributes requirements
     * @type {string}
     * @memberof GetPublishedProductsCode200Response
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the published product is classified
     * @type {Array<string>}
     * @memberof GetPublishedProductsCode200Response
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the published product belong
     * @type {Array<string>}
     * @memberof GetPublishedProductsCode200Response
     */
    'groups'?: Array<string>;
    /**
     * 
     * @type {GetPublishedProductsCode200ResponseValues}
     * @memberof GetPublishedProductsCode200Response
     */
    'values'?: GetPublishedProductsCode200ResponseValues;
    /**
     * 
     * @type {GetPublishedProductsCode200ResponseAssociations}
     * @memberof GetPublishedProductsCode200Response
     */
    'associations'?: GetPublishedProductsCode200ResponseAssociations;
    /**
     * Warning: associations with quantities are not compatible with the published products. The response will always be empty.
     * @type {object}
     * @memberof GetPublishedProductsCode200Response
     */
    'quantified_associations'?: object;
    /**
     * Date of creation
     * @type {string}
     * @memberof GetPublishedProductsCode200Response
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof GetPublishedProductsCode200Response
     */
    'updated'?: string;
}
/**
 * Several associations related to groups and/or other published products, grouped by association types
 * @export
 * @interface GetPublishedProductsCode200ResponseAssociations
 */
export interface GetPublishedProductsCode200ResponseAssociations {
    /**
     * 
     * @type {GetPublishedProductsCode200ResponseAssociationsAssociationTypeCode}
     * @memberof GetPublishedProductsCode200ResponseAssociations
     */
    'associationTypeCode'?: GetPublishedProductsCode200ResponseAssociationsAssociationTypeCode;
}
/**
 * 
 * @export
 * @interface GetPublishedProductsCode200ResponseAssociationsAssociationTypeCode
 */
export interface GetPublishedProductsCode200ResponseAssociationsAssociationTypeCode {
    /**
     * Array of groups codes with which the published product is in relation
     * @type {Array<string>}
     * @memberof GetPublishedProductsCode200ResponseAssociationsAssociationTypeCode
     */
    'groups'?: Array<string>;
    /**
     * Array of published product identifiers with which the published product is in relation
     * @type {Array<string>}
     * @memberof GetPublishedProductsCode200ResponseAssociationsAssociationTypeCode
     */
    'products'?: Array<string>;
    /**
     * Array of product model codes with which the product is in relation (only available since the v2.1)
     * @type {Array<string>}
     * @memberof GetPublishedProductsCode200ResponseAssociationsAssociationTypeCode
     */
    'product_models'?: Array<string>;
}
/**
 * Published product attributes values, see <a href=\'/concepts/products.html#focus-on-the-product-values\'>Product values</a> section for more details
 * @export
 * @interface GetPublishedProductsCode200ResponseValues
 */
export interface GetPublishedProductsCode200ResponseValues {
    /**
     * 
     * @type {Array<PostProductModelsRequestValuesAttributeCodeInner>}
     * @memberof GetPublishedProductsCode200ResponseValues
     */
    'attributeCode'?: Array<PostProductModelsRequestValuesAttributeCodeInner>;
}
/**
 * 
 * @export
 * @interface GetReferenceEntitiesCode200Response
 */
export interface GetReferenceEntitiesCode200Response {
    /**
     * 
     * @type {GetReferenceEntitiesCode200ResponseLinks}
     * @memberof GetReferenceEntitiesCode200Response
     */
    '_links'?: GetReferenceEntitiesCode200ResponseLinks;
    /**
     * Reference entity code
     * @type {string}
     * @memberof GetReferenceEntitiesCode200Response
     */
    'code': string;
    /**
     * Code of the reference entity image
     * @type {string}
     * @memberof GetReferenceEntitiesCode200Response
     */
    'image'?: string;
    /**
     * 
     * @type {GetReferenceEntitiesCode200ResponseLabels}
     * @memberof GetReferenceEntitiesCode200Response
     */
    'labels'?: GetReferenceEntitiesCode200ResponseLabels;
}
/**
 * Reference entity labels for each locale
 * @export
 * @interface GetReferenceEntitiesCode200ResponseLabels
 */
export interface GetReferenceEntitiesCode200ResponseLabels {
    /**
     * Reference entity label for the locale `localeCode`
     * @type {string}
     * @memberof GetReferenceEntitiesCode200ResponseLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface GetReferenceEntitiesCode200ResponseLinks
 */
export interface GetReferenceEntitiesCode200ResponseLinks {
    /**
     * 
     * @type {GetReferenceEntitiesCode200ResponseLinksImageDownload}
     * @memberof GetReferenceEntitiesCode200ResponseLinks
     */
    'image_download'?: GetReferenceEntitiesCode200ResponseLinksImageDownload;
}
/**
 * 
 * @export
 * @interface GetReferenceEntitiesCode200ResponseLinksImageDownload
 */
export interface GetReferenceEntitiesCode200ResponseLinksImageDownload {
    /**
     * URI to download the binaries of the reference entity image file
     * @type {string}
     * @memberof GetReferenceEntitiesCode200ResponseLinksImageDownload
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface GetReferenceEntitiesCodeAttributes200ResponseInner
 */
export interface GetReferenceEntitiesCodeAttributes200ResponseInner {
    /**
     * Attribute code
     * @type {string}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'code': string;
    /**
     * 
     * @type {PostAttributesRequestLabels}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'labels'?: PostAttributesRequestLabels;
    /**
     * Attribute type. See <a href=\'/concepts/reference-entities.html#reference-entity-attribute\'>type</a> section for more details.
     * @type {string}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'type': GetReferenceEntitiesCodeAttributes200ResponseInnerTypeEnum;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     * @type {boolean}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'value_per_locale'?: boolean;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     * @type {boolean}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'value_per_channel'?: boolean;
    /**
     * Whether the attribute should be part of the record\'s completeness calculation
     * @type {boolean}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'is_required_for_completeness'?: boolean;
    /**
     * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
     * @type {number}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'max_characters'?: number;
    /**
     * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
     * @type {boolean}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'is_textarea'?: boolean;
    /**
     * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
     * @type {boolean}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'is_rich_text_editor'?: boolean;
    /**
     * Validation rule type used to validate the attribute value when the attribute type is `text`
     * @type {string}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'validation_rule'?: GetReferenceEntitiesCodeAttributes200ResponseInnerValidationRuleEnum;
    /**
     * Regexp expression used to validate the attribute value when the attribute type is `text`
     * @type {string}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'validation_regexp'?: string;
    /**
     * Extensions allowed when the attribute type is `image`
     * @type {Array<string>}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'allowed_extensions'?: Array<string>;
    /**
     * Max file size in MB when the attribute type is `image`
     * @type {string}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'max_file_size'?: string;
    /**
     * Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`
     * @type {string}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'reference_entity_code'?: string;
    /**
     * Whether decimals are allowed when the attribute type is `number`
     * @type {boolean}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'decimals_allowed'?: boolean;
    /**
     * Minimum value allowed when the attribute type is `number`
     * @type {string}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'min_value'?: string;
    /**
     * Maximum value allowed when the attribute type is `number`
     * @type {string}
     * @memberof GetReferenceEntitiesCodeAttributes200ResponseInner
     */
    'max_value'?: string;
}

export const GetReferenceEntitiesCodeAttributes200ResponseInnerTypeEnum = {
    Text: 'text',
    Image: 'image',
    Number: 'number',
    SingleOption: 'single_option',
    MultipleOptions: 'multiple_options',
    ReferenceEntitySingleLink: 'reference_entity_single_link',
    ReferenceEntityMultipleLinks: 'reference_entity_multiple_links'
} as const;

export type GetReferenceEntitiesCodeAttributes200ResponseInnerTypeEnum = typeof GetReferenceEntitiesCodeAttributes200ResponseInnerTypeEnum[keyof typeof GetReferenceEntitiesCodeAttributes200ResponseInnerTypeEnum];
export const GetReferenceEntitiesCodeAttributes200ResponseInnerValidationRuleEnum = {
    Email: 'email',
    Url: 'url',
    Regexp: 'regexp',
    None: 'none'
} as const;

export type GetReferenceEntitiesCodeAttributes200ResponseInnerValidationRuleEnum = typeof GetReferenceEntitiesCodeAttributes200ResponseInnerValidationRuleEnum[keyof typeof GetReferenceEntitiesCodeAttributes200ResponseInnerValidationRuleEnum];

/**
 * 
 * @export
 * @interface GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner
 */
export interface GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner {
    /**
     * Attribute\'s option code
     * @type {string}
     * @memberof GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner
     */
    'code': string;
    /**
     * 
     * @type {PostAttributesRequestLabels}
     * @memberof GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner
     */
    'labels'?: PostAttributesRequestLabels;
}
/**
 * 
 * @export
 * @interface GetReferenceFilesLocaleCode200Response
 */
export interface GetReferenceFilesLocaleCode200Response {
    /**
     * Code of the PAM asset reference file
     * @type {string}
     * @memberof GetReferenceFilesLocaleCode200Response
     */
    'code'?: string;
    /**
     * Locale of the PAM asset reference file, equal to `null` if the asset is not localizable
     * @type {string}
     * @memberof GetReferenceFilesLocaleCode200Response
     */
    'locale'?: string;
    /**
     * 
     * @type {GetReferenceFilesLocaleCode200ResponseLink}
     * @memberof GetReferenceFilesLocaleCode200Response
     */
    '_link'?: GetReferenceFilesLocaleCode200ResponseLink;
}
/**
 * Links to get and download the reference file
 * @export
 * @interface GetReferenceFilesLocaleCode200ResponseLink
 */
export interface GetReferenceFilesLocaleCode200ResponseLink {
    /**
     * 
     * @type {PostPamAssetsRequestReferenceFilesInnerLinkDownload}
     * @memberof GetReferenceFilesLocaleCode200ResponseLink
     */
    'download'?: PostPamAssetsRequestReferenceFilesInnerLinkDownload;
}
/**
 * 
 * @export
 * @interface GetSystemInformation200Response
 */
export interface GetSystemInformation200Response {
    /**
     * Version of the PIM
     * @type {string}
     * @memberof GetSystemInformation200Response
     */
    'version'?: string;
    /**
     * Edition of the PIM
     * @type {string}
     * @memberof GetSystemInformation200Response
     */
    'edition'?: string;
}
/**
 * 
 * @export
 * @interface GetVariationFilesChannelCodeLocaleCode200Response
 */
export interface GetVariationFilesChannelCodeLocaleCode200Response {
    /**
     * Code of the PAM asset variation file
     * @type {string}
     * @memberof GetVariationFilesChannelCodeLocaleCode200Response
     */
    'code'?: string;
    /**
     * Locale of the PAM asset variation file, equal to `null` if the asset is not localizable
     * @type {string}
     * @memberof GetVariationFilesChannelCodeLocaleCode200Response
     */
    'locale'?: string;
    /**
     * Channel of the PAM asset variation file
     * @type {string}
     * @memberof GetVariationFilesChannelCodeLocaleCode200Response
     */
    'scope'?: string;
    /**
     * 
     * @type {GetVariationFilesChannelCodeLocaleCode200ResponseLink}
     * @memberof GetVariationFilesChannelCodeLocaleCode200Response
     */
    '_link'?: GetVariationFilesChannelCodeLocaleCode200ResponseLink;
}
/**
 * Links to get and download the reference file
 * @export
 * @interface GetVariationFilesChannelCodeLocaleCode200ResponseLink
 */
export interface GetVariationFilesChannelCodeLocaleCode200ResponseLink {
    /**
     * 
     * @type {PostPamAssetsRequestVariationFilesInnerLinkDownload}
     * @memberof GetVariationFilesChannelCodeLocaleCode200ResponseLink
     */
    'download'?: PostPamAssetsRequestVariationFilesInnerLinkDownload;
}
/**
 * 
 * @export
 * @interface ItemList
 */
export interface ItemList {
    /**
     * 
     * @type {AssetFamilyItemListLinks}
     * @memberof ItemList
     */
    '_links'?: AssetFamilyItemListLinks;
}
/**
 * 
 * @export
 * @interface Locale
 */
export interface Locale {
    /**
     * Locale code
     * @type {string}
     * @memberof Locale
     */
    'code': string;
    /**
     * Whether the locale is enabled
     * @type {boolean}
     * @memberof Locale
     */
    'enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface LocaleList
 */
export interface LocaleList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof LocaleList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Locale code
     * @type {string}
     * @memberof LocaleList
     */
    'code': string;
    /**
     * Whether the locale is enabled
     * @type {boolean}
     * @memberof LocaleList
     */
    'enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface LocaleListAllOf
 */
export interface LocaleListAllOf {
    /**
     * Locale code
     * @type {string}
     * @memberof LocaleListAllOf
     */
    'code': string;
    /**
     * Whether the locale is enabled
     * @type {boolean}
     * @memberof LocaleListAllOf
     */
    'enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface Locales
 */
export interface Locales {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof Locales
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof Locales
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface MeasureFamilies
 */
export interface MeasureFamilies {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof MeasureFamilies
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof MeasureFamilies
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface MeasureFamiliesGet200Response
 */
export interface MeasureFamiliesGet200Response {
    /**
     * Measure family code
     * @type {string}
     * @memberof MeasureFamiliesGet200Response
     */
    'code': string;
    /**
     * Measure family standard
     * @type {string}
     * @memberof MeasureFamiliesGet200Response
     */
    'standard'?: string;
    /**
     * Family units
     * @type {Array<MeasureFamiliesGet200ResponseUnitsInner>}
     * @memberof MeasureFamiliesGet200Response
     */
    'units'?: Array<MeasureFamiliesGet200ResponseUnitsInner>;
}
/**
 * 
 * @export
 * @interface MeasureFamiliesGet200ResponseUnitsInner
 */
export interface MeasureFamiliesGet200ResponseUnitsInner {
    /**
     * Measure code
     * @type {string}
     * @memberof MeasureFamiliesGet200ResponseUnitsInner
     */
    'code'?: string;
    /**
     * Mathematic operation to convert the unit into the standard unit
     * @type {object}
     * @memberof MeasureFamiliesGet200ResponseUnitsInner
     */
    'convert'?: object;
    /**
     * Measure symbol
     * @type {string}
     * @memberof MeasureFamiliesGet200ResponseUnitsInner
     */
    'symbol'?: string;
}
/**
 * 
 * @export
 * @interface MeasureFamily
 */
export interface MeasureFamily {
    /**
     * Measure family code
     * @type {string}
     * @memberof MeasureFamily
     */
    'code': string;
    /**
     * Measure family standard
     * @type {string}
     * @memberof MeasureFamily
     */
    'standard'?: string;
    /**
     * Family units
     * @type {Array<MeasureFamiliesGet200ResponseUnitsInner>}
     * @memberof MeasureFamily
     */
    'units'?: Array<MeasureFamiliesGet200ResponseUnitsInner>;
}
/**
 * 
 * @export
 * @interface MeasureFamilyList
 */
export interface MeasureFamilyList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof MeasureFamilyList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Measure family code
     * @type {string}
     * @memberof MeasureFamilyList
     */
    'code': string;
    /**
     * Measure family standard
     * @type {string}
     * @memberof MeasureFamilyList
     */
    'standard'?: string;
    /**
     * Family units
     * @type {Array<MeasureFamilyListAllOfUnits>}
     * @memberof MeasureFamilyList
     */
    'units'?: Array<MeasureFamilyListAllOfUnits>;
}
/**
 * 
 * @export
 * @interface MeasureFamilyListAllOf
 */
export interface MeasureFamilyListAllOf {
    /**
     * Measure family code
     * @type {string}
     * @memberof MeasureFamilyListAllOf
     */
    'code': string;
    /**
     * Measure family standard
     * @type {string}
     * @memberof MeasureFamilyListAllOf
     */
    'standard'?: string;
    /**
     * Family units
     * @type {Array<MeasureFamilyListAllOfUnits>}
     * @memberof MeasureFamilyListAllOf
     */
    'units'?: Array<MeasureFamilyListAllOfUnits>;
}
/**
 * 
 * @export
 * @interface MeasureFamilyListAllOfUnits
 */
export interface MeasureFamilyListAllOfUnits {
    /**
     * Measure code
     * @type {string}
     * @memberof MeasureFamilyListAllOfUnits
     */
    'code'?: string;
    /**
     * Mathematic operation to convert the unit into the standard unit
     * @type {object}
     * @memberof MeasureFamilyListAllOfUnits
     */
    'convert'?: object;
    /**
     * Measure symbol
     * @type {string}
     * @memberof MeasureFamilyListAllOfUnits
     */
    'symbol'?: string;
}
/**
 * 
 * @export
 * @interface MeasurementFamiliesGetList200Response
 */
export interface MeasurementFamiliesGetList200Response {
    /**
     * Measurement family code
     * @type {string}
     * @memberof MeasurementFamiliesGetList200Response
     */
    'code': string;
    /**
     * 
     * @type {MeasurementFamiliesGetList200ResponseLabels}
     * @memberof MeasurementFamiliesGetList200Response
     */
    'labels'?: MeasurementFamiliesGetList200ResponseLabels;
    /**
     * Unit code used as the standard unit for this measurement family
     * @type {string}
     * @memberof MeasurementFamiliesGetList200Response
     */
    'standard_unit_code': string;
    /**
     * 
     * @type {MeasurementFamiliesGetList200ResponseUnits}
     * @memberof MeasurementFamiliesGetList200Response
     */
    'units': MeasurementFamiliesGetList200ResponseUnits;
}
/**
 * Measurement family labels for each locale
 * @export
 * @interface MeasurementFamiliesGetList200ResponseLabels
 */
export interface MeasurementFamiliesGetList200ResponseLabels {
    /**
     * Measurement family label for the locale `localeCode`
     * @type {string}
     * @memberof MeasurementFamiliesGetList200ResponseLabels
     */
    'localeCode'?: string;
}
/**
 * Measurement units for this family with their conversion operations. More details <a href=\'/concepts/target-market-settings.html#focus-on-the-units\'>here</a>.
 * @export
 * @interface MeasurementFamiliesGetList200ResponseUnits
 */
export interface MeasurementFamiliesGetList200ResponseUnits {
    /**
     * 
     * @type {MeasurementFamiliesGetList200ResponseUnitsUnitCode}
     * @memberof MeasurementFamiliesGetList200ResponseUnits
     */
    'unitCode'?: MeasurementFamiliesGetList200ResponseUnitsUnitCode;
}
/**
 * 
 * @export
 * @interface MeasurementFamiliesGetList200ResponseUnitsUnitCode
 */
export interface MeasurementFamiliesGetList200ResponseUnitsUnitCode {
    /**
     * Measurement unit code. More details <a href=\'/concepts/target-market-settings.html#focus-on-the-units\'>here</a>.
     * @type {string}
     * @memberof MeasurementFamiliesGetList200ResponseUnitsUnitCode
     */
    'code'?: string;
    /**
     * 
     * @type {MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels}
     * @memberof MeasurementFamiliesGetList200ResponseUnitsUnitCode
     */
    'labels'?: MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels;
    /**
     * Calculation to convert the unit from the standard unit. More details <a href=\'/concepts/target-market-settings.html#focus-on-the-units\'>here</a>.
     * @type {Array<MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner>}
     * @memberof MeasurementFamiliesGetList200ResponseUnitsUnitCode
     */
    'convert_from_standard'?: Array<MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner>;
    /**
     * Measurement unit symbol. More details <a href=\'/concepts/target-market-settings.html#focus-on-the-units\'>here</a>.
     * @type {string}
     * @memberof MeasurementFamiliesGetList200ResponseUnitsUnitCode
     */
    'symbol'?: string;
}
/**
 * 
 * @export
 * @interface MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner
 */
export interface MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner {
    /**
     * Operator for a conversion operation to convert the unit in the standard unit
     * @type {string}
     * @memberof MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner
     */
    'operator'?: MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInnerOperatorEnum;
    /**
     * Value for a conversion operation to convert the unit in the standard unit
     * @type {string}
     * @memberof MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner
     */
    'value'?: string;
}

export const MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInnerOperatorEnum = {
    Mul: 'mul',
    Div: 'div',
    Add: 'add',
    Sub: 'sub'
} as const;

export type MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInnerOperatorEnum = typeof MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInnerOperatorEnum[keyof typeof MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInnerOperatorEnum];

/**
 * Unit labels for each locale. More details <a href=\'/concepts/target-market-settings.html#focus-on-the-units\'>here</a>.
 * @export
 * @interface MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels
 */
export interface MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels {
    /**
     * Unit label for the locale `localeCode`
     * @type {string}
     * @memberof MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface MeasurementFamily
 */
export interface MeasurementFamily {
    /**
     * Measurement family code
     * @type {string}
     * @memberof MeasurementFamily
     */
    'code': string;
    /**
     * 
     * @type {MeasurementFamiliesGetList200ResponseLabels}
     * @memberof MeasurementFamily
     */
    'labels'?: MeasurementFamiliesGetList200ResponseLabels;
    /**
     * Unit code used as the standard unit for this measurement family
     * @type {string}
     * @memberof MeasurementFamily
     */
    'standard_unit_code': string;
    /**
     * 
     * @type {MeasurementFamiliesGetList200ResponseUnits}
     * @memberof MeasurementFamily
     */
    'units': MeasurementFamiliesGetList200ResponseUnits;
}
/**
 * 
 * @export
 * @interface MeasurementFamilyList
 */
export interface MeasurementFamilyList {
    /**
     * Measurement family code
     * @type {string}
     * @memberof MeasurementFamilyList
     */
    'code': string;
    /**
     * 
     * @type {MeasurementFamiliesGetList200ResponseLabels}
     * @memberof MeasurementFamilyList
     */
    'labels'?: MeasurementFamiliesGetList200ResponseLabels;
    /**
     * Unit code used as the standard unit for this measurement family
     * @type {string}
     * @memberof MeasurementFamilyList
     */
    'standard_unit_code': string;
    /**
     * 
     * @type {MeasurementFamiliesGetList200ResponseUnits}
     * @memberof MeasurementFamilyList
     */
    'units': MeasurementFamiliesGetList200ResponseUnits;
}
/**
 * 
 * @export
 * @interface MediaFile
 */
export interface MediaFile {
    /**
     * 
     * @type {MediaFileAllOfLinks}
     * @memberof MediaFile
     */
    '_links'?: MediaFileAllOfLinks;
    /**
     * Media file code
     * @type {string}
     * @memberof MediaFile
     */
    'code'?: string;
    /**
     * Original filename of the media file
     * @type {string}
     * @memberof MediaFile
     */
    'original_filename'?: string;
    /**
     * Mime type of the media file
     * @type {string}
     * @memberof MediaFile
     */
    'mime_type'?: string;
    /**
     * Size of the media file
     * @type {number}
     * @memberof MediaFile
     */
    'size'?: number;
    /**
     * Extension of the media file
     * @type {string}
     * @memberof MediaFile
     */
    'extension'?: string;
}
/**
 * 
 * @export
 * @interface MediaFileAllOf
 */
export interface MediaFileAllOf {
    /**
     * 
     * @type {MediaFileAllOfLinks}
     * @memberof MediaFileAllOf
     */
    '_links'?: MediaFileAllOfLinks;
}
/**
 * 
 * @export
 * @interface MediaFileAllOf1
 */
export interface MediaFileAllOf1 {
    /**
     * Media file code
     * @type {string}
     * @memberof MediaFileAllOf1
     */
    'code'?: string;
    /**
     * Original filename of the media file
     * @type {string}
     * @memberof MediaFileAllOf1
     */
    'original_filename'?: string;
    /**
     * Mime type of the media file
     * @type {string}
     * @memberof MediaFileAllOf1
     */
    'mime_type'?: string;
    /**
     * Size of the media file
     * @type {number}
     * @memberof MediaFileAllOf1
     */
    'size'?: number;
    /**
     * Extension of the media file
     * @type {string}
     * @memberof MediaFileAllOf1
     */
    'extension'?: string;
}
/**
 * 
 * @export
 * @interface MediaFileAllOfLinks
 */
export interface MediaFileAllOfLinks {
    /**
     * 
     * @type {MediaFileAllOfLinksDownload}
     * @memberof MediaFileAllOfLinks
     */
    'download'?: MediaFileAllOfLinksDownload;
}
/**
 * 
 * @export
 * @interface MediaFileAllOfLinksDownload
 */
export interface MediaFileAllOfLinksDownload {
    /**
     * URI to download the binaries of the media file
     * @type {string}
     * @memberof MediaFileAllOfLinksDownload
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface MediaFileItemList
 */
export interface MediaFileItemList {
    /**
     * 
     * @type {MediaFileItemListLinks}
     * @memberof MediaFileItemList
     */
    '_links'?: MediaFileItemListLinks;
}
/**
 * 
 * @export
 * @interface MediaFileItemListLinks
 */
export interface MediaFileItemListLinks {
    /**
     * 
     * @type {MediaFileItemListLinksSelf}
     * @memberof MediaFileItemListLinks
     */
    'self'?: MediaFileItemListLinksSelf;
    /**
     * 
     * @type {GetMediaFilesCode200ResponseLinksDownload}
     * @memberof MediaFileItemListLinks
     */
    'download'?: GetMediaFilesCode200ResponseLinksDownload;
}
/**
 * 
 * @export
 * @interface MediaFileItemListLinksSelf
 */
export interface MediaFileItemListLinksSelf {
    /**
     * URI to get the metadata of the media file
     * @type {string}
     * @memberof MediaFileItemListLinksSelf
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface MediaFileList
 */
export interface MediaFileList {
    /**
     * 
     * @type {MediaFileListAllOfLinks}
     * @memberof MediaFileList
     */
    '_links'?: MediaFileListAllOfLinks;
    /**
     * Media file code
     * @type {string}
     * @memberof MediaFileList
     */
    'code'?: string;
    /**
     * Original filename of the media file
     * @type {string}
     * @memberof MediaFileList
     */
    'original_filename'?: string;
    /**
     * Mime type of the media file
     * @type {string}
     * @memberof MediaFileList
     */
    'mime_type'?: string;
    /**
     * Size of the media file
     * @type {number}
     * @memberof MediaFileList
     */
    'size'?: number;
    /**
     * Extension of the media file
     * @type {string}
     * @memberof MediaFileList
     */
    'extension'?: string;
}
/**
 * 
 * @export
 * @interface MediaFileListAllOf
 */
export interface MediaFileListAllOf {
    /**
     * 
     * @type {MediaFileListAllOfLinks}
     * @memberof MediaFileListAllOf
     */
    '_links'?: MediaFileListAllOfLinks;
}
/**
 * 
 * @export
 * @interface MediaFileListAllOfLinks
 */
export interface MediaFileListAllOfLinks {
    /**
     * 
     * @type {MediaFileListAllOfLinksSelf}
     * @memberof MediaFileListAllOfLinks
     */
    'self'?: MediaFileListAllOfLinksSelf;
    /**
     * 
     * @type {MediaFileAllOfLinksDownload}
     * @memberof MediaFileListAllOfLinks
     */
    'download'?: MediaFileAllOfLinksDownload;
}
/**
 * 
 * @export
 * @interface MediaFileListAllOfLinksSelf
 */
export interface MediaFileListAllOfLinksSelf {
    /**
     * URI to get the metadata of the media file
     * @type {string}
     * @memberof MediaFileListAllOfLinksSelf
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface MediaFiles
 */
export interface MediaFiles {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof MediaFiles
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof MediaFiles
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * HTTP status code
     * @type {number}
     * @memberof ModelError
     */
    'code'?: number;
    /**
     * Message explaining the error
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface PAMAssetCategories
 */
export interface PAMAssetCategories {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof PAMAssetCategories
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof PAMAssetCategories
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface PAMAssetTags
 */
export interface PAMAssetTags {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof PAMAssetTags
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof PAMAssetTags
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface PAMAssets
 */
export interface PAMAssets {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof PAMAssets
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof PAMAssets
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof Pagination
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof Pagination
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface PatchAssetCategoriesRequest
 */
export interface PatchAssetCategoriesRequest {
    /**
     * PAM asset category code
     * @type {string}
     * @memberof PatchAssetCategoriesRequest
     */
    'code': string;
    /**
     * PAM ssset category code of the parent\'s asset category
     * @type {string}
     * @memberof PatchAssetCategoriesRequest
     */
    'parent'?: string;
    /**
     * 
     * @type {PostAssetCategoriesRequestLabels}
     * @memberof PatchAssetCategoriesRequest
     */
    'labels'?: PostAssetCategoriesRequestLabels;
}
/**
 * 
 * @export
 * @interface PatchAssetCodeRequest
 */
export interface PatchAssetCodeRequest {
    /**
     * Code of the asset
     * @type {string}
     * @memberof PatchAssetCodeRequest
     */
    'code': string;
    /**
     * 
     * @type {PatchAssetsRequestInnerValues}
     * @memberof PatchAssetCodeRequest
     */
    'values'?: PatchAssetsRequestInnerValues;
    /**
     * Date of creation
     * @type {string}
     * @memberof PatchAssetCodeRequest
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PatchAssetCodeRequest
     */
    'updated'?: string;
}
/**
 * 
 * @export
 * @interface PatchAssetFamilyCodeRequest
 */
export interface PatchAssetFamilyCodeRequest {
    /**
     * Asset family code
     * @type {string}
     * @memberof PatchAssetFamilyCodeRequest
     */
    'code': string;
    /**
     * 
     * @type {GetAssetFamilyCode200ResponseLabels}
     * @memberof PatchAssetFamilyCodeRequest
     */
    'labels'?: GetAssetFamilyCode200ResponseLabels;
    /**
     * Attribute code that is used as the main media of the asset family.
     * @type {string}
     * @memberof PatchAssetFamilyCodeRequest
     */
    'attribute_as_main_media'?: string;
    /**
     * 
     * @type {GetAssetFamilyCode200ResponseNamingConvention}
     * @memberof PatchAssetFamilyCodeRequest
     */
    'naming_convention'?: GetAssetFamilyCode200ResponseNamingConvention;
    /**
     * The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href=\'/concepts/asset-manager.html#focus-on-the-product-link-rule\'>here</a>.
     * @type {Array<GetAssetFamilyCode200ResponseProductLinkRulesInner>}
     * @memberof PatchAssetFamilyCodeRequest
     */
    'product_link_rules'?: Array<GetAssetFamilyCode200ResponseProductLinkRulesInner>;
    /**
     * The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href=\'/concepts/asset-manager.html#focus-on-the-transformations\'>here</a>.
     * @type {Array<GetAssetFamilyCode200ResponseTransformationsInner>}
     * @memberof PatchAssetFamilyCodeRequest
     */
    'transformations'?: Array<GetAssetFamilyCode200ResponseTransformationsInner>;
}
/**
 * 
 * @export
 * @interface PatchAssetsRequestInner
 */
export interface PatchAssetsRequestInner {
    /**
     * Code of the asset
     * @type {string}
     * @memberof PatchAssetsRequestInner
     */
    'code': string;
    /**
     * 
     * @type {PatchAssetsRequestInnerValues}
     * @memberof PatchAssetsRequestInner
     */
    'values'?: PatchAssetsRequestInnerValues;
    /**
     * Date of creation
     * @type {string}
     * @memberof PatchAssetsRequestInner
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PatchAssetsRequestInner
     */
    'updated'?: string;
}
/**
 * Asset attributes values, see the <a href=\'/concepts/asset-manager.html#focus-on-the-asset-values\'>Focus on the asset values</a> section for more details.
 * @export
 * @interface PatchAssetsRequestInnerValues
 */
export interface PatchAssetsRequestInnerValues {
    /**
     * 
     * @type {Array<PatchAssetsRequestInnerValuesAttributeCodeInner>}
     * @memberof PatchAssetsRequestInnerValues
     */
    'attributeCode'?: Array<PatchAssetsRequestInnerValuesAttributeCodeInner>;
}
/**
 * 
 * @export
 * @interface PatchAssetsRequestInnerValuesAttributeCodeInner
 */
export interface PatchAssetsRequestInnerValuesAttributeCodeInner {
    /**
     * Channel code of the asset attribute value
     * @type {string}
     * @memberof PatchAssetsRequestInnerValuesAttributeCodeInner
     */
    'channel'?: string;
    /**
     * Locale code of the asset attribute value
     * @type {string}
     * @memberof PatchAssetsRequestInnerValuesAttributeCodeInner
     */
    'locale'?: string;
    /**
     * Asset attribute value. See <a href=\'/concepts/asset-manager.html#the-data-format\'>the `data` format</a> section for more details.
     * @type {object}
     * @memberof PatchAssetsRequestInnerValuesAttributeCodeInner
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface PatchAttributesAttributeCodeOptionsRequest
 */
export interface PatchAttributesAttributeCodeOptionsRequest {
    /**
     * Code of option
     * @type {string}
     * @memberof PatchAttributesAttributeCodeOptionsRequest
     */
    'code': string;
    /**
     * Code of attribute related to the attribute option
     * @type {string}
     * @memberof PatchAttributesAttributeCodeOptionsRequest
     */
    'attribute'?: string;
    /**
     * Order of attribute option
     * @type {number}
     * @memberof PatchAttributesAttributeCodeOptionsRequest
     */
    'sort_order'?: number;
    /**
     * 
     * @type {PostAttributesAttributeCodeOptionsRequestLabels}
     * @memberof PatchAttributesAttributeCodeOptionsRequest
     */
    'labels'?: PostAttributesAttributeCodeOptionsRequestLabels;
}
/**
 * 
 * @export
 * @interface PatchAttributesRequest
 */
export interface PatchAttributesRequest {
    /**
     * Attribute code
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'code': string;
    /**
     * Attribute type. See <a href=\'/concepts/catalog-structure.html#attribute\'>type</a> section for more details.
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'type': PatchAttributesRequestTypeEnum;
    /**
     * 
     * @type {PostAttributesRequestLabels}
     * @memberof PatchAttributesRequest
     */
    'labels'?: PostAttributesRequestLabels;
    /**
     * Attribute group
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'group': string;
    /**
     * 
     * @type {PostAttributesRequestGroupLabels}
     * @memberof PatchAttributesRequest
     */
    'group_labels'?: PostAttributesRequestGroupLabels;
    /**
     * Order of the attribute in its group
     * @type {number}
     * @memberof PatchAttributesRequest
     */
    'sort_order'?: number;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     * @type {boolean}
     * @memberof PatchAttributesRequest
     */
    'localizable'?: boolean;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     * @type {boolean}
     * @memberof PatchAttributesRequest
     */
    'scopable'?: boolean;
    /**
     * To make the attribute locale specfic, specify here for which locales it is specific
     * @type {Array<string>}
     * @memberof PatchAttributesRequest
     */
    'available_locales'?: Array<string>;
    /**
     * Whether two values for the attribute cannot be the same
     * @type {boolean}
     * @memberof PatchAttributesRequest
     */
    'unique'?: boolean;
    /**
     * Whether the attribute can be used as a filter for the product grid in the PIM user interface
     * @type {boolean}
     * @memberof PatchAttributesRequest
     */
    'useable_as_grid_filter'?: boolean;
    /**
     * Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
     * @type {number}
     * @memberof PatchAttributesRequest
     */
    'max_characters'?: number;
    /**
     * Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'validation_rule'?: string;
    /**
     * Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'validation_regexp'?: string;
    /**
     * Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
     * @type {boolean}
     * @memberof PatchAttributesRequest
     */
    'wysiwyg_enabled'?: boolean;
    /**
     * Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'number_min'?: string;
    /**
     * Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'number_max'?: string;
    /**
     * Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {boolean}
     * @memberof PatchAttributesRequest
     */
    'decimals_allowed'?: boolean;
    /**
     * Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
     * @type {boolean}
     * @memberof PatchAttributesRequest
     */
    'negative_allowed'?: boolean;
    /**
     * Metric family when the attribute type is `pim_catalog_metric`
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'metric_family'?: string;
    /**
     * Default metric unit when the attribute type is `pim_catalog_metric`
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'default_metric_unit'?: string;
    /**
     * Minimum date allowed when the attribute type is `pim_catalog_date`
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'date_min'?: string;
    /**
     * Maximum date allowed when the attribute type is `pim_catalog_date`
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'date_max'?: string;
    /**
     * Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     * @type {Array<string>}
     * @memberof PatchAttributesRequest
     */
    'allowed_extensions'?: Array<string>;
    /**
     * Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'max_file_size'?: string;
    /**
     * Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
     * @type {string}
     * @memberof PatchAttributesRequest
     */
    'reference_data_name'?: string;
    /**
     * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
     * @type {boolean}
     * @memberof PatchAttributesRequest
     */
    'default_value'?: boolean;
    /**
     * Configuration of the Table attribute (columns)
     * @type {Array<PostAttributesRequestTableConfigurationInner>}
     * @memberof PatchAttributesRequest
     */
    'table_configuration'?: Array<PostAttributesRequestTableConfigurationInner>;
}

export const PatchAttributesRequestTypeEnum = {
    PimCatalogIdentifier: 'pim_catalog_identifier',
    PimCatalogMetric: 'pim_catalog_metric',
    PimCatalogNumber: 'pim_catalog_number',
    PimCatalogReferenceDataMultiSelect: 'pim_catalog_reference_data_multi_select',
    PimCatalogReferenceDataSimpleSelect: 'pim_catalog_reference_data_simple_select',
    PimCatalogSimpleselect: 'pim_catalog_simpleselect',
    PimCatalogMultiselect: 'pim_catalog_multiselect',
    PimCatalogDate: 'pim_catalog_date',
    PimCatalogTextarea: 'pim_catalog_textarea',
    PimCatalogText: 'pim_catalog_text',
    PimCatalogFile: 'pim_catalog_file',
    PimCatalogImage: 'pim_catalog_image',
    PimCatalogPriceCollection: 'pim_catalog_price_collection',
    PimCatalogBoolean: 'pim_catalog_boolean',
    AkeneoReferenceEntity: 'akeneo_reference_entity',
    AkeneoReferenceEntityCollection: 'akeneo_reference_entity_collection',
    PimCatalogAssetCollection: 'pim_catalog_asset_collection'
} as const;

export type PatchAttributesRequestTypeEnum = typeof PatchAttributesRequestTypeEnum[keyof typeof PatchAttributesRequestTypeEnum];

/**
 * 
 * @export
 * @interface PatchCategoriesCodeRequest
 */
export interface PatchCategoriesCodeRequest {
    /**
     * Category code
     * @type {string}
     * @memberof PatchCategoriesCodeRequest
     */
    'code': string;
    /**
     * Category code of the parent\'s category
     * @type {string}
     * @memberof PatchCategoriesCodeRequest
     */
    'parent'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PatchCategoriesCodeRequest
     */
    'updated'?: string;
    /**
     * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter \"with_position\" is set to \"true\")
     * @type {number}
     * @memberof PatchCategoriesCodeRequest
     */
    'position'?: number;
    /**
     * 
     * @type {PostCategoriesRequestLabels}
     * @memberof PatchCategoriesCodeRequest
     */
    'labels'?: PostCategoriesRequestLabels;
}
/**
 * 
 * @export
 * @interface PatchCategoriesRequest
 */
export interface PatchCategoriesRequest {
    /**
     * Category code
     * @type {string}
     * @memberof PatchCategoriesRequest
     */
    'code': string;
    /**
     * Category code of the parent\'s category
     * @type {string}
     * @memberof PatchCategoriesRequest
     */
    'parent'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PatchCategoriesRequest
     */
    'updated'?: string;
    /**
     * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter \"with_position\" is set to \"true\")
     * @type {number}
     * @memberof PatchCategoriesRequest
     */
    'position'?: number;
    /**
     * 
     * @type {PostCategoriesRequestLabels}
     * @memberof PatchCategoriesRequest
     */
    'labels'?: PostCategoriesRequestLabels;
}
/**
 * 
 * @export
 * @interface PatchFamiliesFamilyCodeVariantsRequest
 */
export interface PatchFamiliesFamilyCodeVariantsRequest {
    /**
     * Family variant code
     * @type {string}
     * @memberof PatchFamiliesFamilyCodeVariantsRequest
     */
    'code': string;
    /**
     * Attributes distribution according to the enrichment level
     * @type {Array<PostFamiliesFamilyCodeVariantsRequestVariantAttributeSetsInner>}
     * @memberof PatchFamiliesFamilyCodeVariantsRequest
     */
    'variant_attribute_sets': Array<PostFamiliesFamilyCodeVariantsRequestVariantAttributeSetsInner>;
    /**
     * 
     * @type {PostFamiliesFamilyCodeVariantsRequestLabels}
     * @memberof PatchFamiliesFamilyCodeVariantsRequest
     */
    'labels'?: PostFamiliesFamilyCodeVariantsRequestLabels;
}
/**
 * 
 * @export
 * @interface PatchFamiliesRequest
 */
export interface PatchFamiliesRequest {
    /**
     * Family code
     * @type {string}
     * @memberof PatchFamiliesRequest
     */
    'code': string;
    /**
     * Attribute code used as label
     * @type {string}
     * @memberof PatchFamiliesRequest
     */
    'attribute_as_label': string;
    /**
     * Attribute code used as the main picture in the user interface (only since v2.0)
     * @type {string}
     * @memberof PatchFamiliesRequest
     */
    'attribute_as_image'?: string;
    /**
     * Attributes codes that compose the family
     * @type {Array<string>}
     * @memberof PatchFamiliesRequest
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {PostFamiliesRequestAttributeRequirements}
     * @memberof PatchFamiliesRequest
     */
    'attribute_requirements'?: PostFamiliesRequestAttributeRequirements;
    /**
     * 
     * @type {PostFamiliesRequestLabels}
     * @memberof PatchFamiliesRequest
     */
    'labels'?: PostFamiliesRequestLabels;
}
/**
 * 
 * @export
 * @interface PatchMeasurementFamilies200ResponseInner
 */
export interface PatchMeasurementFamilies200ResponseInner {
    /**
     * Resource code
     * @type {string}
     * @memberof PatchMeasurementFamilies200ResponseInner
     */
    'code'?: string;
    /**
     * HTTP status code, see <a href=\"/documentation/responses.html#client-errors\">Client errors</a> to understand the meaning of each code
     * @type {number}
     * @memberof PatchMeasurementFamilies200ResponseInner
     */
    'status_code'?: number;
    /**
     * Message explaining the error
     * @type {string}
     * @memberof PatchMeasurementFamilies200ResponseInner
     */
    'message'?: string;
    /**
     * List of errors
     * @type {Array<PatchMeasurementFamilies200ResponseInnerErrorsInner>}
     * @memberof PatchMeasurementFamilies200ResponseInner
     */
    'errors'?: Array<PatchMeasurementFamilies200ResponseInnerErrorsInner>;
}
/**
 * 
 * @export
 * @interface PatchMeasurementFamilies200ResponseInnerErrorsInner
 */
export interface PatchMeasurementFamilies200ResponseInnerErrorsInner {
    /**
     * 
     * @type {string}
     * @memberof PatchMeasurementFamilies200ResponseInnerErrorsInner
     */
    'property'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchMeasurementFamilies200ResponseInnerErrorsInner
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface PatchPamAssetsRequest
 */
export interface PatchPamAssetsRequest {
    /**
     * PAM asset code
     * @type {string}
     * @memberof PatchPamAssetsRequest
     */
    'code': string;
    /**
     * Codes of the PAM asset categories in which the asset is classified
     * @type {Array<string>}
     * @memberof PatchPamAssetsRequest
     */
    'categories'?: Array<string>;
    /**
     * Description of the PAM asset
     * @type {string}
     * @memberof PatchPamAssetsRequest
     */
    'description'?: string;
    /**
     * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
     * @type {boolean}
     * @memberof PatchPamAssetsRequest
     */
    'localizable'?: boolean;
    /**
     * Tags of the PAM asset
     * @type {Array<string>}
     * @memberof PatchPamAssetsRequest
     */
    'tags'?: Array<string>;
    /**
     * Date on which the PAM asset expire
     * @type {string}
     * @memberof PatchPamAssetsRequest
     */
    'end_of_use'?: string;
    /**
     * Variations of the PAM asset
     * @type {Array<PostPamAssetsRequestVariationFilesInner>}
     * @memberof PatchPamAssetsRequest
     */
    'variation_files'?: Array<PostPamAssetsRequestVariationFilesInner>;
    /**
     * Reference files of the PAM asset
     * @type {Array<PostPamAssetsRequestReferenceFilesInner>}
     * @memberof PatchPamAssetsRequest
     */
    'reference_files'?: Array<PostPamAssetsRequestReferenceFilesInner>;
}
/**
 * 
 * @export
 * @interface PatchProductModelsRequest
 */
export interface PatchProductModelsRequest {
    /**
     * Product model code
     * @type {string}
     * @memberof PatchProductModelsRequest
     */
    'code': string;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
     * @type {string}
     * @memberof PatchProductModelsRequest
     */
    'family'?: string;
    /**
     * Family variant code from which the product model inherits its attributes and variant attributes
     * @type {string}
     * @memberof PatchProductModelsRequest
     */
    'family_variant': string;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a>. This parent can be modified since the 2.3.
     * @type {string}
     * @memberof PatchProductModelsRequest
     */
    'parent'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product model is categorized
     * @type {Array<string>}
     * @memberof PatchProductModelsRequest
     */
    'categories'?: Array<string>;
    /**
     * 
     * @type {PostProductModelsRequestValues}
     * @memberof PatchProductModelsRequest
     */
    'values'?: PostProductModelsRequestValues;
    /**
     * 
     * @type {PostProductModelsRequestAssociations}
     * @memberof PatchProductModelsRequest
     */
    'associations'?: PostProductModelsRequestAssociations;
    /**
     * 
     * @type {PostProductModelsRequestQuantifiedAssociations}
     * @memberof PatchProductModelsRequest
     */
    'quantified_associations'?: PostProductModelsRequestQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof PatchProductModelsRequest
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PatchProductModelsRequest
     */
    'updated'?: string;
    /**
     * 
     * @type {PostProductModelsRequestMetadata}
     * @memberof PatchProductModelsRequest
     */
    'metadata'?: PostProductModelsRequestMetadata;
    /**
     * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof PatchProductModelsRequest
     */
    'quality_scores'?: object;
}
/**
 * 
 * @export
 * @interface PatchProducts200Response
 */
export interface PatchProducts200Response {
    /**
     * Line number
     * @type {number}
     * @memberof PatchProducts200Response
     */
    'line'?: number;
    /**
     * Resource identifier, only filled when the resource is a product
     * @type {string}
     * @memberof PatchProducts200Response
     */
    'identifier'?: string;
    /**
     * Resource code, only filled when the resource is not a product
     * @type {string}
     * @memberof PatchProducts200Response
     */
    'code'?: string;
    /**
     * HTTP status code, see <a href=\"/documentation/responses.html#client-errors\">Client errors</a> to understand the meaning of each code
     * @type {number}
     * @memberof PatchProducts200Response
     */
    'status_code'?: number;
    /**
     * Message explaining the error
     * @type {string}
     * @memberof PatchProducts200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface PatchProductsRequest
 */
export interface PatchProductsRequest {
    /**
     * Product UUID
     * @type {string}
     * @memberof PatchProductsRequest
     */
    'uuid'?: string;
    /**
     * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     * @type {string}
     * @memberof PatchProductsRequest
     */
    'identifier': string;
    /**
     * Whether the product is enabled
     * @type {boolean}
     * @memberof PatchProductsRequest
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the product inherits its attributes and attributes requirements.
     * @type {string}
     * @memberof PatchProductsRequest
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product is classified
     * @type {Array<string>}
     * @memberof PatchProductsRequest
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the product belong
     * @type {Array<string>}
     * @memberof PatchProductsRequest
     */
    'groups'?: Array<string>;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     * @type {string}
     * @memberof PatchProductsRequest
     */
    'parent'?: string;
    /**
     * 
     * @type {PostProductsRequestValues}
     * @memberof PatchProductsRequest
     */
    'values'?: PostProductsRequestValues;
    /**
     * 
     * @type {PostProductsRequestAssociations}
     * @memberof PatchProductsRequest
     */
    'associations'?: PostProductsRequestAssociations;
    /**
     * 
     * @type {PostProductsRequestQuantifiedAssociations}
     * @memberof PatchProductsRequest
     */
    'quantified_associations'?: PostProductsRequestQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof PatchProductsRequest
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PatchProductsRequest
     */
    'updated'?: string;
    /**
     * 
     * @type {PostProductsRequestMetadata}
     * @memberof PatchProductsRequest
     */
    'metadata'?: PostProductsRequestMetadata;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof PatchProductsRequest
     */
    'quality_scores'?: object;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
     * @type {Array<PostProductsRequestCompletenessesInner>}
     * @memberof PatchProductsRequest
     */
    'completenesses'?: Array<PostProductsRequestCompletenessesInner>;
}
/**
 * 
 * @export
 * @interface PatchProductsUuid200Response
 */
export interface PatchProductsUuid200Response {
    /**
     * Line number
     * @type {number}
     * @memberof PatchProductsUuid200Response
     */
    'line'?: number;
    /**
     * Product uuid
     * @type {string}
     * @memberof PatchProductsUuid200Response
     */
    'uuid'?: string;
    /**
     * HTTP status code, see <a href=\"/documentation/responses.html#client-errors\">Client errors</a> to understand the meaning of each code
     * @type {number}
     * @memberof PatchProductsUuid200Response
     */
    'status_code'?: number;
    /**
     * Message explaining the error
     * @type {string}
     * @memberof PatchProductsUuid200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface PatchProductsUuidRequest
 */
export interface PatchProductsUuidRequest {
    /**
     * Product uuid
     * @type {string}
     * @memberof PatchProductsUuidRequest
     */
    'uuid': string;
    /**
     * Whether the product is enabled
     * @type {boolean}
     * @memberof PatchProductsUuidRequest
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the product inherits its attributes and attributes requirements.
     * @type {string}
     * @memberof PatchProductsUuidRequest
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product is classified
     * @type {Array<string>}
     * @memberof PatchProductsUuidRequest
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the product belong
     * @type {Array<string>}
     * @memberof PatchProductsUuidRequest
     */
    'groups'?: Array<string>;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     * @type {string}
     * @memberof PatchProductsUuidRequest
     */
    'parent'?: string;
    /**
     * 
     * @type {PostProductsRequestValues}
     * @memberof PatchProductsUuidRequest
     */
    'values'?: PostProductsRequestValues;
    /**
     * 
     * @type {PostProductsUuidRequestAssociations}
     * @memberof PatchProductsUuidRequest
     */
    'associations'?: PostProductsUuidRequestAssociations;
    /**
     * 
     * @type {PostProductsUuidRequestQuantifiedAssociations}
     * @memberof PatchProductsUuidRequest
     */
    'quantified_associations'?: PostProductsUuidRequestQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof PatchProductsUuidRequest
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PatchProductsUuidRequest
     */
    'updated'?: string;
    /**
     * 
     * @type {PostProductsRequestMetadata}
     * @memberof PatchProductsUuidRequest
     */
    'metadata'?: PostProductsRequestMetadata;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof PatchProductsUuidRequest
     */
    'quality_scores'?: object;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
     * @type {Array<PostProductsRequestCompletenessesInner>}
     * @memberof PatchProductsUuidRequest
     */
    'completenesses'?: Array<PostProductsRequestCompletenessesInner>;
}
/**
 * 
 * @export
 * @interface PatchReferenceEntityAttributesCodeRequest
 */
export interface PatchReferenceEntityAttributesCodeRequest {
    /**
     * Attribute code
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'code': string;
    /**
     * 
     * @type {PostAttributesRequestLabels}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'labels'?: PostAttributesRequestLabels;
    /**
     * Attribute type. See <a href=\'/concepts/reference-entities.html#reference-entity-attribute\'>type</a> section for more details.
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'type': PatchReferenceEntityAttributesCodeRequestTypeEnum;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     * @type {boolean}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'value_per_locale'?: boolean;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     * @type {boolean}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'value_per_channel'?: boolean;
    /**
     * Whether the attribute should be part of the record\'s completeness calculation
     * @type {boolean}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'is_required_for_completeness'?: boolean;
    /**
     * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
     * @type {number}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'max_characters'?: number;
    /**
     * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
     * @type {boolean}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'is_textarea'?: boolean;
    /**
     * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
     * @type {boolean}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'is_rich_text_editor'?: boolean;
    /**
     * Validation rule type used to validate the attribute value when the attribute type is `text`
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'validation_rule'?: PatchReferenceEntityAttributesCodeRequestValidationRuleEnum;
    /**
     * Regexp expression used to validate the attribute value when the attribute type is `text`
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'validation_regexp'?: string;
    /**
     * Extensions allowed when the attribute type is `image`
     * @type {Array<string>}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'allowed_extensions'?: Array<string>;
    /**
     * Max file size in MB when the attribute type is `image`
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'max_file_size'?: string;
    /**
     * Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'reference_entity_code'?: string;
    /**
     * Whether decimals are allowed when the attribute type is `number`
     * @type {boolean}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'decimals_allowed'?: boolean;
    /**
     * Minimum value allowed when the attribute type is `number`
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'min_value'?: string;
    /**
     * Maximum value allowed when the attribute type is `number`
     * @type {string}
     * @memberof PatchReferenceEntityAttributesCodeRequest
     */
    'max_value'?: string;
}

export const PatchReferenceEntityAttributesCodeRequestTypeEnum = {
    Text: 'text',
    Image: 'image',
    Number: 'number',
    SingleOption: 'single_option',
    MultipleOptions: 'multiple_options',
    ReferenceEntitySingleLink: 'reference_entity_single_link',
    ReferenceEntityMultipleLinks: 'reference_entity_multiple_links'
} as const;

export type PatchReferenceEntityAttributesCodeRequestTypeEnum = typeof PatchReferenceEntityAttributesCodeRequestTypeEnum[keyof typeof PatchReferenceEntityAttributesCodeRequestTypeEnum];
export const PatchReferenceEntityAttributesCodeRequestValidationRuleEnum = {
    Email: 'email',
    Url: 'url',
    Regexp: 'regexp',
    None: 'none'
} as const;

export type PatchReferenceEntityAttributesCodeRequestValidationRuleEnum = typeof PatchReferenceEntityAttributesCodeRequestValidationRuleEnum[keyof typeof PatchReferenceEntityAttributesCodeRequestValidationRuleEnum];

/**
 * 
 * @export
 * @interface PatchReferenceEntityCodeRequest
 */
export interface PatchReferenceEntityCodeRequest {
    /**
     * Reference entity code
     * @type {string}
     * @memberof PatchReferenceEntityCodeRequest
     */
    'code': string;
    /**
     * 
     * @type {GetReferenceEntitiesCode200ResponseLabels}
     * @memberof PatchReferenceEntityCodeRequest
     */
    'labels'?: GetReferenceEntitiesCode200ResponseLabels;
    /**
     * Code of the reference entity image
     * @type {string}
     * @memberof PatchReferenceEntityCodeRequest
     */
    'image'?: string;
}
/**
 * 
 * @export
 * @interface PatchReferenceEntityRecords200ResponseInner
 */
export interface PatchReferenceEntityRecords200ResponseInner {
    /**
     * Resource code
     * @type {string}
     * @memberof PatchReferenceEntityRecords200ResponseInner
     */
    'code'?: string;
    /**
     * HTTP status code, see <a href=\"/documentation/responses.html#client-errors\">Client errors</a> to understand the meaning of each code
     * @type {number}
     * @memberof PatchReferenceEntityRecords200ResponseInner
     */
    'status_code'?: number;
    /**
     * Message explaining the error
     * @type {string}
     * @memberof PatchReferenceEntityRecords200ResponseInner
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface PatchReferenceEntityRecordsCodeRequest
 */
export interface PatchReferenceEntityRecordsCodeRequest {
    /**
     * Code of the record
     * @type {string}
     * @memberof PatchReferenceEntityRecordsCodeRequest
     */
    'code': string;
    /**
     * 
     * @type {PatchReferenceEntityRecordsRequestInnerValues}
     * @memberof PatchReferenceEntityRecordsCodeRequest
     */
    'values'?: PatchReferenceEntityRecordsRequestInnerValues;
    /**
     * Date of creation.
     * @type {string}
     * @memberof PatchReferenceEntityRecordsCodeRequest
     */
    'created'?: string;
    /**
     * Date of the last update.
     * @type {string}
     * @memberof PatchReferenceEntityRecordsCodeRequest
     */
    'updated'?: string;
}
/**
 * 
 * @export
 * @interface PatchReferenceEntityRecordsRequestInner
 */
export interface PatchReferenceEntityRecordsRequestInner {
    /**
     * Code of the record
     * @type {string}
     * @memberof PatchReferenceEntityRecordsRequestInner
     */
    'code': string;
    /**
     * 
     * @type {PatchReferenceEntityRecordsRequestInnerValues}
     * @memberof PatchReferenceEntityRecordsRequestInner
     */
    'values'?: PatchReferenceEntityRecordsRequestInnerValues;
    /**
     * Date of creation.
     * @type {string}
     * @memberof PatchReferenceEntityRecordsRequestInner
     */
    'created'?: string;
    /**
     * Date of the last update.
     * @type {string}
     * @memberof PatchReferenceEntityRecordsRequestInner
     */
    'updated'?: string;
}
/**
 * Record attributes values, see <a href=\'/concepts/reference-entities.html#focus-on-the-reference-entity-record-values\'>Reference entity record values</a> section for more details
 * @export
 * @interface PatchReferenceEntityRecordsRequestInnerValues
 */
export interface PatchReferenceEntityRecordsRequestInnerValues {
    /**
     * 
     * @type {Array<PatchReferenceEntityRecordsRequestInnerValuesAttributeCodeInner>}
     * @memberof PatchReferenceEntityRecordsRequestInnerValues
     */
    'attributeCode'?: Array<PatchReferenceEntityRecordsRequestInnerValuesAttributeCodeInner>;
}
/**
 * 
 * @export
 * @interface PatchReferenceEntityRecordsRequestInnerValuesAttributeCodeInner
 */
export interface PatchReferenceEntityRecordsRequestInnerValuesAttributeCodeInner {
    /**
     * Channel code of the reference entity record value
     * @type {string}
     * @memberof PatchReferenceEntityRecordsRequestInnerValuesAttributeCodeInner
     */
    'channel'?: string;
    /**
     * Locale code of the reference entity record value
     * @type {string}
     * @memberof PatchReferenceEntityRecordsRequestInnerValuesAttributeCodeInner
     */
    'locale'?: string;
    /**
     * Reference entity record value. See <a href=\'/concepts/reference-entities.html#the-data-format\'>the `data` format</a> section for more details.
     * @type {object}
     * @memberof PatchReferenceEntityRecordsRequestInnerValuesAttributeCodeInner
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface PostAppCatalog201Response
 */
export interface PostAppCatalog201Response {
    /**
     * Catalog id
     * @type {string}
     * @memberof PostAppCatalog201Response
     */
    'id'?: string;
    /**
     * Catalog name
     * @type {string}
     * @memberof PostAppCatalog201Response
     */
    'name'?: string;
    /**
     * Whether the catalog is enabled or not
     * @type {boolean}
     * @memberof PostAppCatalog201Response
     */
    'enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface PostAppCatalogRequest
 */
export interface PostAppCatalogRequest {
    /**
     * Catalog name
     * @type {string}
     * @memberof PostAppCatalogRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PostAssetCategoriesRequest
 */
export interface PostAssetCategoriesRequest {
    /**
     * PAM asset category code
     * @type {string}
     * @memberof PostAssetCategoriesRequest
     */
    'code': string;
    /**
     * PAM ssset category code of the parent\'s asset category
     * @type {string}
     * @memberof PostAssetCategoriesRequest
     */
    'parent'?: string;
    /**
     * 
     * @type {PostAssetCategoriesRequestLabels}
     * @memberof PostAssetCategoriesRequest
     */
    'labels'?: PostAssetCategoriesRequestLabels;
}
/**
 * PAM asset category labels for each locale
 * @export
 * @interface PostAssetCategoriesRequestLabels
 */
export interface PostAssetCategoriesRequestLabels {
    /**
     * PAM asset category label for the locale `localeCode`
     * @type {string}
     * @memberof PostAssetCategoriesRequestLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface PostAttributesAttributeCodeOptionsRequest
 */
export interface PostAttributesAttributeCodeOptionsRequest {
    /**
     * Code of option
     * @type {string}
     * @memberof PostAttributesAttributeCodeOptionsRequest
     */
    'code': string;
    /**
     * Code of attribute related to the attribute option
     * @type {string}
     * @memberof PostAttributesAttributeCodeOptionsRequest
     */
    'attribute'?: string;
    /**
     * Order of attribute option
     * @type {number}
     * @memberof PostAttributesAttributeCodeOptionsRequest
     */
    'sort_order'?: number;
    /**
     * 
     * @type {PostAttributesAttributeCodeOptionsRequestLabels}
     * @memberof PostAttributesAttributeCodeOptionsRequest
     */
    'labels'?: PostAttributesAttributeCodeOptionsRequestLabels;
}
/**
 * Attribute option labels for each locale
 * @export
 * @interface PostAttributesAttributeCodeOptionsRequestLabels
 */
export interface PostAttributesAttributeCodeOptionsRequestLabels {
    /**
     * Attribute option label for the locale `localeCode`
     * @type {string}
     * @memberof PostAttributesAttributeCodeOptionsRequestLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface PostAttributesRequest
 */
export interface PostAttributesRequest {
    /**
     * Attribute code
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'code': string;
    /**
     * Attribute type. See <a href=\'/concepts/catalog-structure.html#attribute\'>type</a> section for more details.
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'type': PostAttributesRequestTypeEnum;
    /**
     * 
     * @type {PostAttributesRequestLabels}
     * @memberof PostAttributesRequest
     */
    'labels'?: PostAttributesRequestLabels;
    /**
     * Attribute group
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'group': string;
    /**
     * 
     * @type {PostAttributesRequestGroupLabels}
     * @memberof PostAttributesRequest
     */
    'group_labels'?: PostAttributesRequestGroupLabels;
    /**
     * Order of the attribute in its group
     * @type {number}
     * @memberof PostAttributesRequest
     */
    'sort_order'?: number;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     * @type {boolean}
     * @memberof PostAttributesRequest
     */
    'localizable'?: boolean;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     * @type {boolean}
     * @memberof PostAttributesRequest
     */
    'scopable'?: boolean;
    /**
     * To make the attribute locale specfic, specify here for which locales it is specific
     * @type {Array<string>}
     * @memberof PostAttributesRequest
     */
    'available_locales'?: Array<string>;
    /**
     * Whether two values for the attribute cannot be the same
     * @type {boolean}
     * @memberof PostAttributesRequest
     */
    'unique'?: boolean;
    /**
     * Whether the attribute can be used as a filter for the product grid in the PIM user interface
     * @type {boolean}
     * @memberof PostAttributesRequest
     */
    'useable_as_grid_filter'?: boolean;
    /**
     * Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
     * @type {number}
     * @memberof PostAttributesRequest
     */
    'max_characters'?: number;
    /**
     * Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'validation_rule'?: string;
    /**
     * Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'validation_regexp'?: string;
    /**
     * Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
     * @type {boolean}
     * @memberof PostAttributesRequest
     */
    'wysiwyg_enabled'?: boolean;
    /**
     * Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'number_min'?: string;
    /**
     * Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'number_max'?: string;
    /**
     * Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     * @type {boolean}
     * @memberof PostAttributesRequest
     */
    'decimals_allowed'?: boolean;
    /**
     * Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
     * @type {boolean}
     * @memberof PostAttributesRequest
     */
    'negative_allowed'?: boolean;
    /**
     * Metric family when the attribute type is `pim_catalog_metric`
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'metric_family'?: string;
    /**
     * Default metric unit when the attribute type is `pim_catalog_metric`
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'default_metric_unit'?: string;
    /**
     * Minimum date allowed when the attribute type is `pim_catalog_date`
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'date_min'?: string;
    /**
     * Maximum date allowed when the attribute type is `pim_catalog_date`
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'date_max'?: string;
    /**
     * Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     * @type {Array<string>}
     * @memberof PostAttributesRequest
     */
    'allowed_extensions'?: Array<string>;
    /**
     * Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'max_file_size'?: string;
    /**
     * Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
     * @type {string}
     * @memberof PostAttributesRequest
     */
    'reference_data_name'?: string;
    /**
     * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
     * @type {boolean}
     * @memberof PostAttributesRequest
     */
    'default_value'?: boolean;
    /**
     * Configuration of the Table attribute (columns)
     * @type {Array<PostAttributesRequestTableConfigurationInner>}
     * @memberof PostAttributesRequest
     */
    'table_configuration'?: Array<PostAttributesRequestTableConfigurationInner>;
}

export const PostAttributesRequestTypeEnum = {
    PimCatalogIdentifier: 'pim_catalog_identifier',
    PimCatalogMetric: 'pim_catalog_metric',
    PimCatalogNumber: 'pim_catalog_number',
    PimCatalogReferenceDataMultiSelect: 'pim_catalog_reference_data_multi_select',
    PimCatalogReferenceDataSimpleSelect: 'pim_catalog_reference_data_simple_select',
    PimCatalogSimpleselect: 'pim_catalog_simpleselect',
    PimCatalogMultiselect: 'pim_catalog_multiselect',
    PimCatalogDate: 'pim_catalog_date',
    PimCatalogTextarea: 'pim_catalog_textarea',
    PimCatalogText: 'pim_catalog_text',
    PimCatalogFile: 'pim_catalog_file',
    PimCatalogImage: 'pim_catalog_image',
    PimCatalogPriceCollection: 'pim_catalog_price_collection',
    PimCatalogBoolean: 'pim_catalog_boolean',
    AkeneoReferenceEntity: 'akeneo_reference_entity',
    AkeneoReferenceEntityCollection: 'akeneo_reference_entity_collection',
    PimCatalogAssetCollection: 'pim_catalog_asset_collection'
} as const;

export type PostAttributesRequestTypeEnum = typeof PostAttributesRequestTypeEnum[keyof typeof PostAttributesRequestTypeEnum];

/**
 * Group labels for each locale
 * @export
 * @interface PostAttributesRequestGroupLabels
 */
export interface PostAttributesRequestGroupLabels {
    /**
     * Group label for the locale `localeCode`
     * @type {string}
     * @memberof PostAttributesRequestGroupLabels
     */
    'localeCode'?: string;
}
/**
 * Attribute labels for each locale
 * @export
 * @interface PostAttributesRequestLabels
 */
export interface PostAttributesRequestLabels {
    /**
     * Attribute label for the locale `localeCode`
     * @type {string}
     * @memberof PostAttributesRequestLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface PostAttributesRequestTableConfigurationInner
 */
export interface PostAttributesRequestTableConfigurationInner {
    /**
     * Column code
     * @type {string}
     * @memberof PostAttributesRequestTableConfigurationInner
     */
    'code': string;
    /**
     * Column data type
     * @type {string}
     * @memberof PostAttributesRequestTableConfigurationInner
     */
    'data_type': PostAttributesRequestTableConfigurationInnerDataTypeEnum;
    /**
     * 
     * @type {PostAttributesRequestTableConfigurationInnerValidations}
     * @memberof PostAttributesRequestTableConfigurationInner
     */
    'validations'?: PostAttributesRequestTableConfigurationInnerValidations;
    /**
     * 
     * @type {PostAttributesRequestTableConfigurationInnerLabels}
     * @memberof PostAttributesRequestTableConfigurationInner
     */
    'labels'?: PostAttributesRequestTableConfigurationInnerLabels;
    /**
     * Defines if the column should be entirely filled for the attribute to be considered complete
     * @type {boolean}
     * @memberof PostAttributesRequestTableConfigurationInner
     */
    'is_required_for_completeness'?: boolean;
}

export const PostAttributesRequestTableConfigurationInnerDataTypeEnum = {
    Select: 'select',
    Text: 'text',
    Number: 'number',
    Boolean: 'boolean'
} as const;

export type PostAttributesRequestTableConfigurationInnerDataTypeEnum = typeof PostAttributesRequestTableConfigurationInnerDataTypeEnum[keyof typeof PostAttributesRequestTableConfigurationInnerDataTypeEnum];

/**
 * Column labels for each locale
 * @export
 * @interface PostAttributesRequestTableConfigurationInnerLabels
 */
export interface PostAttributesRequestTableConfigurationInnerLabels {
    /**
     * Column label for the locale `localeCode`
     * @type {string}
     * @memberof PostAttributesRequestTableConfigurationInnerLabels
     */
    'localeCode'?: string;
}
/**
 * User defined validation constraints on the cell content
 * @export
 * @interface PostAttributesRequestTableConfigurationInnerValidations
 */
export interface PostAttributesRequestTableConfigurationInnerValidations {
    /**
     * minimum value of a numeric cell
     * @type {number}
     * @memberof PostAttributesRequestTableConfigurationInnerValidations
     */
    'min'?: number;
    /**
     * maximum value of a numeric cell
     * @type {number}
     * @memberof PostAttributesRequestTableConfigurationInnerValidations
     */
    'max'?: number;
    /**
     * whether the value of a numeric cell can hold a decimal part
     * @type {boolean}
     * @memberof PostAttributesRequestTableConfigurationInnerValidations
     */
    'decimals_allowed'?: boolean;
    /**
     * maximum length of a text cell
     * @type {number}
     * @memberof PostAttributesRequestTableConfigurationInnerValidations
     */
    'max_length'?: number;
}
/**
 * 
 * @export
 * @interface PostCategoriesRequest
 */
export interface PostCategoriesRequest {
    /**
     * Category code
     * @type {string}
     * @memberof PostCategoriesRequest
     */
    'code': string;
    /**
     * Category code of the parent\'s category
     * @type {string}
     * @memberof PostCategoriesRequest
     */
    'parent'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PostCategoriesRequest
     */
    'updated'?: string;
    /**
     * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter \"with_position\" is set to \"true\")
     * @type {number}
     * @memberof PostCategoriesRequest
     */
    'position'?: number;
    /**
     * 
     * @type {PostCategoriesRequestLabels}
     * @memberof PostCategoriesRequest
     */
    'labels'?: PostCategoriesRequestLabels;
    /**
     * 
     * @type {PostCategoriesRequestValues}
     * @memberof PostCategoriesRequest
     */
    'values'?: PostCategoriesRequestValues;
}
/**
 * Category labels for each locale
 * @export
 * @interface PostCategoriesRequestLabels
 */
export interface PostCategoriesRequestLabels {
    /**
     * Category label for the locale `localeCode`
     * @type {string}
     * @memberof PostCategoriesRequestLabels
     */
    'localeCode'?: string;
}
/**
 * Attribute values
 * @export
 * @interface PostCategoriesRequestValues
 */
export interface PostCategoriesRequestValues {
    /**
     * 
     * @type {Array<PostCategoriesRequestValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeInner>}
     * @memberof PostCategoriesRequestValues
     */
    'attributeCode|attributeUuid|channelCode|localeCode'?: Array<PostCategoriesRequestValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeInner>;
}
/**
 * 
 * @export
 * @interface PostCategoriesRequestValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeInner
 */
export interface PostCategoriesRequestValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeInner {
    /**
     * Attribute value
     * @type {object}
     * @memberof PostCategoriesRequestValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeInner
     */
    'data'?: object;
    /**
     * The attribute type
     * @type {string}
     * @memberof PostCategoriesRequestValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeInner
     */
    'type'?: string;
    /**
     * <a href=\'api-reference.html#Locale\'>Locale</a> code of the attribute value
     * @type {string}
     * @memberof PostCategoriesRequestValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeInner
     */
    'locale'?: string;
    /**
     * <a href=\'api-reference.html#Channel\'>Channel</a> code of the attribute value
     * @type {string}
     * @memberof PostCategoriesRequestValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeInner
     */
    'channel'?: string;
    /**
     * The attribute code with its uuid (attributeCode|attributeUuid)
     * @type {string}
     * @memberof PostCategoriesRequestValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeInner
     */
    'attribute_code'?: string;
}
/**
 * 
 * @export
 * @interface PostFamiliesFamilyCodeVariantsRequest
 */
export interface PostFamiliesFamilyCodeVariantsRequest {
    /**
     * Family variant code
     * @type {string}
     * @memberof PostFamiliesFamilyCodeVariantsRequest
     */
    'code': string;
    /**
     * Attributes distribution according to the enrichment level
     * @type {Array<PostFamiliesFamilyCodeVariantsRequestVariantAttributeSetsInner>}
     * @memberof PostFamiliesFamilyCodeVariantsRequest
     */
    'variant_attribute_sets': Array<PostFamiliesFamilyCodeVariantsRequestVariantAttributeSetsInner>;
    /**
     * 
     * @type {PostFamiliesFamilyCodeVariantsRequestLabels}
     * @memberof PostFamiliesFamilyCodeVariantsRequest
     */
    'labels'?: PostFamiliesFamilyCodeVariantsRequestLabels;
}
/**
 * Family variant labels for each locale
 * @export
 * @interface PostFamiliesFamilyCodeVariantsRequestLabels
 */
export interface PostFamiliesFamilyCodeVariantsRequestLabels {
    /**
     * Family variant label for the locale `localeCode`
     * @type {string}
     * @memberof PostFamiliesFamilyCodeVariantsRequestLabels
     */
    'localeCode'?: string;
}
/**
 * Enrichment level
 * @export
 * @interface PostFamiliesFamilyCodeVariantsRequestVariantAttributeSetsInner
 */
export interface PostFamiliesFamilyCodeVariantsRequestVariantAttributeSetsInner {
    /**
     * Enrichment level
     * @type {number}
     * @memberof PostFamiliesFamilyCodeVariantsRequestVariantAttributeSetsInner
     */
    'level': number;
    /**
     * Codes of attributes used as variant axes
     * @type {Array<string>}
     * @memberof PostFamiliesFamilyCodeVariantsRequestVariantAttributeSetsInner
     */
    'axes': Array<string>;
    /**
     * Codes of attributes bind to this enrichment level
     * @type {Array<string>}
     * @memberof PostFamiliesFamilyCodeVariantsRequestVariantAttributeSetsInner
     */
    'attributes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PostFamiliesRequest
 */
export interface PostFamiliesRequest {
    /**
     * Family code
     * @type {string}
     * @memberof PostFamiliesRequest
     */
    'code': string;
    /**
     * Attribute code used as label
     * @type {string}
     * @memberof PostFamiliesRequest
     */
    'attribute_as_label': string;
    /**
     * Attribute code used as the main picture in the user interface (only since v2.0)
     * @type {string}
     * @memberof PostFamiliesRequest
     */
    'attribute_as_image'?: string;
    /**
     * Attributes codes that compose the family
     * @type {Array<string>}
     * @memberof PostFamiliesRequest
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {PostFamiliesRequestAttributeRequirements}
     * @memberof PostFamiliesRequest
     */
    'attribute_requirements'?: PostFamiliesRequestAttributeRequirements;
    /**
     * 
     * @type {PostFamiliesRequestLabels}
     * @memberof PostFamiliesRequest
     */
    'labels'?: PostFamiliesRequestLabels;
}
/**
 * Attributes codes of the family that are required for the completeness calculation for each channel
 * @export
 * @interface PostFamiliesRequestAttributeRequirements
 */
export interface PostFamiliesRequestAttributeRequirements {
    /**
     * 
     * @type {Array<string>}
     * @memberof PostFamiliesRequestAttributeRequirements
     */
    'channelCode'?: Array<string>;
}
/**
 * Family labels for each locale
 * @export
 * @interface PostFamiliesRequestLabels
 */
export interface PostFamiliesRequestLabels {
    /**
     * Family label for the locale `localeCode`
     * @type {string}
     * @memberof PostFamiliesRequestLabels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface PostMediaFilesRequest
 */
export interface PostMediaFilesRequest {
    /**
     * The product to which the media file will be associated. It is a JSON string that follows this format \'{\"identifier\":\"product_identifier\", \"attribute\":\"attribute_code\", \"scope\":\"channel_code\",\"locale\":\"locale_code\"}\'. You have to either use this field or the `product_model` field, but not both at the same time.
     * @type {string}
     * @memberof PostMediaFilesRequest
     */
    'product'?: string;
    /**
     * The product model to which the media file will be associated. It is a JSON string that follows this format \'{\"code\":\"product_model_code\", \"attribute\":\"attribute_code\", \"scope\":\"channel_code\",\"locale\":\"locale_code\"}\'. You have to either use this field or the `product` field, but not both at the same time.
     * @type {string}
     * @memberof PostMediaFilesRequest
     */
    'product_model'?: string;
    /**
     * The binaries of the file
     * @type {File}
     * @memberof PostMediaFilesRequest
     */
    'file': File;
}
/**
 * 
 * @export
 * @interface PostPamAssetsRequest
 */
export interface PostPamAssetsRequest {
    /**
     * PAM asset code
     * @type {string}
     * @memberof PostPamAssetsRequest
     */
    'code': string;
    /**
     * Codes of the PAM asset categories in which the asset is classified
     * @type {Array<string>}
     * @memberof PostPamAssetsRequest
     */
    'categories'?: Array<string>;
    /**
     * Description of the PAM asset
     * @type {string}
     * @memberof PostPamAssetsRequest
     */
    'description'?: string;
    /**
     * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
     * @type {boolean}
     * @memberof PostPamAssetsRequest
     */
    'localizable'?: boolean;
    /**
     * Tags of the PAM asset
     * @type {Array<string>}
     * @memberof PostPamAssetsRequest
     */
    'tags'?: Array<string>;
    /**
     * Date on which the PAM asset expire
     * @type {string}
     * @memberof PostPamAssetsRequest
     */
    'end_of_use'?: string;
    /**
     * Variations of the PAM asset
     * @type {Array<PostPamAssetsRequestVariationFilesInner>}
     * @memberof PostPamAssetsRequest
     */
    'variation_files'?: Array<PostPamAssetsRequestVariationFilesInner>;
    /**
     * Reference files of the PAM asset
     * @type {Array<PostPamAssetsRequestReferenceFilesInner>}
     * @memberof PostPamAssetsRequest
     */
    'reference_files'?: Array<PostPamAssetsRequestReferenceFilesInner>;
}
/**
 * 
 * @export
 * @interface PostPamAssetsRequestReferenceFilesInner
 */
export interface PostPamAssetsRequestReferenceFilesInner {
    /**
     * 
     * @type {PostPamAssetsRequestReferenceFilesInnerLink}
     * @memberof PostPamAssetsRequestReferenceFilesInner
     */
    '_link'?: PostPamAssetsRequestReferenceFilesInnerLink;
    /**
     * Locale code of the reference file
     * @type {string}
     * @memberof PostPamAssetsRequestReferenceFilesInner
     */
    'locale'?: string;
    /**
     * Code of the reference file
     * @type {string}
     * @memberof PostPamAssetsRequestReferenceFilesInner
     */
    'code'?: string;
}
/**
 * Links to get and download the reference file
 * @export
 * @interface PostPamAssetsRequestReferenceFilesInnerLink
 */
export interface PostPamAssetsRequestReferenceFilesInnerLink {
    /**
     * 
     * @type {PostPamAssetsRequestReferenceFilesInnerLinkSelf}
     * @memberof PostPamAssetsRequestReferenceFilesInnerLink
     */
    'self'?: PostPamAssetsRequestReferenceFilesInnerLinkSelf;
    /**
     * 
     * @type {PostPamAssetsRequestReferenceFilesInnerLinkDownload}
     * @memberof PostPamAssetsRequestReferenceFilesInnerLink
     */
    'download'?: PostPamAssetsRequestReferenceFilesInnerLinkDownload;
}
/**
 * 
 * @export
 * @interface PostPamAssetsRequestReferenceFilesInnerLinkDownload
 */
export interface PostPamAssetsRequestReferenceFilesInnerLinkDownload {
    /**
     * URI to download the reference file
     * @type {string}
     * @memberof PostPamAssetsRequestReferenceFilesInnerLinkDownload
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface PostPamAssetsRequestReferenceFilesInnerLinkSelf
 */
export interface PostPamAssetsRequestReferenceFilesInnerLinkSelf {
    /**
     * URI of the reference file entity
     * @type {string}
     * @memberof PostPamAssetsRequestReferenceFilesInnerLinkSelf
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface PostPamAssetsRequestVariationFilesInner
 */
export interface PostPamAssetsRequestVariationFilesInner {
    /**
     * 
     * @type {PostPamAssetsRequestVariationFilesInnerLink}
     * @memberof PostPamAssetsRequestVariationFilesInner
     */
    '_link'?: PostPamAssetsRequestVariationFilesInnerLink;
    /**
     * Locale code of the variation
     * @type {string}
     * @memberof PostPamAssetsRequestVariationFilesInner
     */
    'locale'?: string;
    /**
     * Channel code of the variation
     * @type {string}
     * @memberof PostPamAssetsRequestVariationFilesInner
     */
    'scope'?: string;
    /**
     * Code of the variation
     * @type {string}
     * @memberof PostPamAssetsRequestVariationFilesInner
     */
    'code'?: string;
}
/**
 * Links to get and download the variation file
 * @export
 * @interface PostPamAssetsRequestVariationFilesInnerLink
 */
export interface PostPamAssetsRequestVariationFilesInnerLink {
    /**
     * 
     * @type {PostPamAssetsRequestVariationFilesInnerLinkSelf}
     * @memberof PostPamAssetsRequestVariationFilesInnerLink
     */
    'self'?: PostPamAssetsRequestVariationFilesInnerLinkSelf;
    /**
     * 
     * @type {PostPamAssetsRequestVariationFilesInnerLinkDownload}
     * @memberof PostPamAssetsRequestVariationFilesInnerLink
     */
    'download'?: PostPamAssetsRequestVariationFilesInnerLinkDownload;
}
/**
 * 
 * @export
 * @interface PostPamAssetsRequestVariationFilesInnerLinkDownload
 */
export interface PostPamAssetsRequestVariationFilesInnerLinkDownload {
    /**
     * URI to download the variation file
     * @type {string}
     * @memberof PostPamAssetsRequestVariationFilesInnerLinkDownload
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface PostPamAssetsRequestVariationFilesInnerLinkSelf
 */
export interface PostPamAssetsRequestVariationFilesInnerLinkSelf {
    /**
     * URI of the variation entity
     * @type {string}
     * @memberof PostPamAssetsRequestVariationFilesInnerLinkSelf
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface PostProductModelsRequest
 */
export interface PostProductModelsRequest {
    /**
     * Product model code
     * @type {string}
     * @memberof PostProductModelsRequest
     */
    'code': string;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
     * @type {string}
     * @memberof PostProductModelsRequest
     */
    'family'?: string;
    /**
     * Family variant code from which the product model inherits its attributes and variant attributes
     * @type {string}
     * @memberof PostProductModelsRequest
     */
    'family_variant': string;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a>. This parent can be modified since the 2.3.
     * @type {string}
     * @memberof PostProductModelsRequest
     */
    'parent'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product model is categorized
     * @type {Array<string>}
     * @memberof PostProductModelsRequest
     */
    'categories'?: Array<string>;
    /**
     * 
     * @type {PostProductModelsRequestValues}
     * @memberof PostProductModelsRequest
     */
    'values'?: PostProductModelsRequestValues;
    /**
     * 
     * @type {PostProductModelsRequestAssociations}
     * @memberof PostProductModelsRequest
     */
    'associations'?: PostProductModelsRequestAssociations;
    /**
     * 
     * @type {PostProductModelsRequestQuantifiedAssociations}
     * @memberof PostProductModelsRequest
     */
    'quantified_associations'?: PostProductModelsRequestQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof PostProductModelsRequest
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PostProductModelsRequest
     */
    'updated'?: string;
    /**
     * 
     * @type {PostProductModelsRequestMetadata}
     * @memberof PostProductModelsRequest
     */
    'metadata'?: PostProductModelsRequestMetadata;
    /**
     * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof PostProductModelsRequest
     */
    'quality_scores'?: object;
}
/**
 * Several associations related to groups, product and/or other product models, grouped by association types
 * @export
 * @interface PostProductModelsRequestAssociations
 */
export interface PostProductModelsRequestAssociations {
    /**
     * 
     * @type {PostProductsRequestAssociationsAssociationTypeCode}
     * @memberof PostProductModelsRequestAssociations
     */
    'associationTypeCode'?: PostProductsRequestAssociationsAssociationTypeCode;
}
/**
 * More information around the product model (only available since the v2.3 in the Enterprise Edition)
 * @export
 * @interface PostProductModelsRequestMetadata
 */
export interface PostProductModelsRequestMetadata {
    /**
     * Status of the product model regarding the user permissions
     * @type {string}
     * @memberof PostProductModelsRequestMetadata
     */
    'workflow_status'?: PostProductModelsRequestMetadataWorkflowStatusEnum;
}

export const PostProductModelsRequestMetadataWorkflowStatusEnum = {
    ReadOnly: 'read_only',
    DraftInProgress: 'draft_in_progress',
    ProposalWaitingForApproval: 'proposal_waiting_for_approval',
    WorkingCopy: 'working_copy'
} as const;

export type PostProductModelsRequestMetadataWorkflowStatusEnum = typeof PostProductModelsRequestMetadataWorkflowStatusEnum[keyof typeof PostProductModelsRequestMetadataWorkflowStatusEnum];

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 * @export
 * @interface PostProductModelsRequestQuantifiedAssociations
 */
export interface PostProductModelsRequestQuantifiedAssociations {
    /**
     * 
     * @type {PostProductModelsRequestQuantifiedAssociationsQuantifiedAssociationTypeCode}
     * @memberof PostProductModelsRequestQuantifiedAssociations
     */
    'quantifiedAssociationTypeCode'?: PostProductModelsRequestQuantifiedAssociationsQuantifiedAssociationTypeCode;
}
/**
 * 
 * @export
 * @interface PostProductModelsRequestQuantifiedAssociationsQuantifiedAssociationTypeCode
 */
export interface PostProductModelsRequestQuantifiedAssociationsQuantifiedAssociationTypeCode {
    /**
     * Array of objects containing product identifiers and quantities with which the product model is in relation
     * @type {Array<PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner>}
     * @memberof PostProductModelsRequestQuantifiedAssociationsQuantifiedAssociationTypeCode
     */
    'products'?: Array<PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner>;
    /**
     * Array of objects containing product model codes and quantities with which the product model is in relation
     * @type {Array<PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner>}
     * @memberof PostProductModelsRequestQuantifiedAssociationsQuantifiedAssociationTypeCode
     */
    'product_models'?: Array<PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner>;
}
/**
 * Product model attributes values, see <a href=\'/concepts/products.html#focus-on-the-product-values\'>Product values</a> section for more details
 * @export
 * @interface PostProductModelsRequestValues
 */
export interface PostProductModelsRequestValues {
    /**
     * 
     * @type {Array<PostProductModelsRequestValuesAttributeCodeInner>}
     * @memberof PostProductModelsRequestValues
     */
    'attributeCode'?: Array<PostProductModelsRequestValuesAttributeCodeInner>;
}
/**
 * 
 * @export
 * @interface PostProductModelsRequestValuesAttributeCodeInner
 */
export interface PostProductModelsRequestValuesAttributeCodeInner {
    /**
     * <a href=\'api-reference.html#Channel\'>Channel</a> code of the product value
     * @type {string}
     * @memberof PostProductModelsRequestValuesAttributeCodeInner
     */
    'scope'?: string;
    /**
     * <a href=\'api-reference.html#Locale\'>Locale</a> code of the product value
     * @type {string}
     * @memberof PostProductModelsRequestValuesAttributeCodeInner
     */
    'locale'?: string;
    /**
     * <a href=\'api-reference.html#Productuuid\'>Product</a> value
     * @type {object}
     * @memberof PostProductModelsRequestValuesAttributeCodeInner
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface PostProductsRequest
 */
export interface PostProductsRequest {
    /**
     * Product UUID
     * @type {string}
     * @memberof PostProductsRequest
     */
    'uuid'?: string;
    /**
     * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     * @type {string}
     * @memberof PostProductsRequest
     */
    'identifier': string;
    /**
     * Whether the product is enabled
     * @type {boolean}
     * @memberof PostProductsRequest
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the product inherits its attributes and attributes requirements.
     * @type {string}
     * @memberof PostProductsRequest
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product is classified
     * @type {Array<string>}
     * @memberof PostProductsRequest
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the product belong
     * @type {Array<string>}
     * @memberof PostProductsRequest
     */
    'groups'?: Array<string>;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     * @type {string}
     * @memberof PostProductsRequest
     */
    'parent'?: string;
    /**
     * 
     * @type {PostProductsRequestValues}
     * @memberof PostProductsRequest
     */
    'values'?: PostProductsRequestValues;
    /**
     * 
     * @type {PostProductsRequestAssociations}
     * @memberof PostProductsRequest
     */
    'associations'?: PostProductsRequestAssociations;
    /**
     * 
     * @type {PostProductsRequestQuantifiedAssociations}
     * @memberof PostProductsRequest
     */
    'quantified_associations'?: PostProductsRequestQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof PostProductsRequest
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PostProductsRequest
     */
    'updated'?: string;
    /**
     * 
     * @type {PostProductsRequestMetadata}
     * @memberof PostProductsRequest
     */
    'metadata'?: PostProductsRequestMetadata;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof PostProductsRequest
     */
    'quality_scores'?: object;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
     * @type {Array<PostProductsRequestCompletenessesInner>}
     * @memberof PostProductsRequest
     */
    'completenesses'?: Array<PostProductsRequestCompletenessesInner>;
}
/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 * @export
 * @interface PostProductsRequestAssociations
 */
export interface PostProductsRequestAssociations {
    /**
     * 
     * @type {PostProductsRequestAssociationsAssociationTypeCode}
     * @memberof PostProductsRequestAssociations
     */
    'associationTypeCode'?: PostProductsRequestAssociationsAssociationTypeCode;
}
/**
 * 
 * @export
 * @interface PostProductsRequestAssociationsAssociationTypeCode
 */
export interface PostProductsRequestAssociationsAssociationTypeCode {
    /**
     * Array of groups codes with which the product is in relation
     * @type {Array<string>}
     * @memberof PostProductsRequestAssociationsAssociationTypeCode
     */
    'groups'?: Array<string>;
    /**
     * Array of product identifiers with which the product is in relation
     * @type {Array<string>}
     * @memberof PostProductsRequestAssociationsAssociationTypeCode
     */
    'products'?: Array<string>;
    /**
     * Array of product model codes with which the product is in relation (only available since the v2.1)
     * @type {Array<string>}
     * @memberof PostProductsRequestAssociationsAssociationTypeCode
     */
    'product_models'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PostProductsRequestCompletenessesInner
 */
export interface PostProductsRequestCompletenessesInner {
    /**
     * 
     * @type {string}
     * @memberof PostProductsRequestCompletenessesInner
     */
    'scope'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostProductsRequestCompletenessesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {number}
     * @memberof PostProductsRequestCompletenessesInner
     */
    'data'?: number;
}
/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 * @export
 * @interface PostProductsRequestMetadata
 */
export interface PostProductsRequestMetadata {
    /**
     * Status of the product regarding the user permissions
     * @type {string}
     * @memberof PostProductsRequestMetadata
     */
    'workflow_status'?: PostProductsRequestMetadataWorkflowStatusEnum;
}

export const PostProductsRequestMetadataWorkflowStatusEnum = {
    ReadOnly: 'read_only',
    DraftInProgress: 'draft_in_progress',
    ProposalWaitingForApproval: 'proposal_waiting_for_approval',
    WorkingCopy: 'working_copy'
} as const;

export type PostProductsRequestMetadataWorkflowStatusEnum = typeof PostProductsRequestMetadataWorkflowStatusEnum[keyof typeof PostProductsRequestMetadataWorkflowStatusEnum];

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 * @export
 * @interface PostProductsRequestQuantifiedAssociations
 */
export interface PostProductsRequestQuantifiedAssociations {
    /**
     * 
     * @type {PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCode}
     * @memberof PostProductsRequestQuantifiedAssociations
     */
    'quantifiedAssociationTypeCode'?: PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCode;
}
/**
 * 
 * @export
 * @interface PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCode
 */
export interface PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCode {
    /**
     * Array of objects containing product identifiers and quantities with which the product is in relation
     * @type {Array<PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner>}
     * @memberof PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCode
     */
    'products'?: Array<PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner>;
    /**
     * Array of objects containing product model codes and quantities with which the product is in relation
     * @type {Array<PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner>}
     * @memberof PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCode
     */
    'product_models'?: Array<PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner>;
}
/**
 * 
 * @export
 * @interface PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner
 */
export interface PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner {
    /**
     * 
     * @type {string}
     * @memberof PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner
 */
export interface PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner {
    /**
     * 
     * @type {string}
     * @memberof PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner
     */
    'identifier'?: string;
    /**
     * 
     * @type {number}
     * @memberof PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner
     */
    'quantity'?: number;
}
/**
 * Product attributes values, see <a href=\'/concepts/products.html#focus-on-the-product-values\'>Product values</a> section for more details
 * @export
 * @interface PostProductsRequestValues
 */
export interface PostProductsRequestValues {
    /**
     * 
     * @type {Array<PostProductsRequestValuesAttributeCodeInner>}
     * @memberof PostProductsRequestValues
     */
    'attributeCode'?: Array<PostProductsRequestValuesAttributeCodeInner>;
}
/**
 * 
 * @export
 * @interface PostProductsRequestValuesAttributeCodeInner
 */
export interface PostProductsRequestValuesAttributeCodeInner {
    /**
     * <a href=\'api-reference.html#Channel\'>Channel</a> code of the product value
     * @type {string}
     * @memberof PostProductsRequestValuesAttributeCodeInner
     */
    'scope'?: string;
    /**
     * <a href=\'api-reference.html#Locale\'>Locale</a> code of the product value
     * @type {string}
     * @memberof PostProductsRequestValuesAttributeCodeInner
     */
    'locale'?: string;
    /**
     * Product value. See <a href=\'/concepts/products.html#the-data-format\'>the `data` format</a> section for more details.
     * @type {object}
     * @memberof PostProductsRequestValuesAttributeCodeInner
     */
    'data'?: object;
    /**
     * 
     * @type {PostProductsRequestValuesAttributeCodeInnerLinkedData}
     * @memberof PostProductsRequestValuesAttributeCodeInner
     */
    'linked_data'?: PostProductsRequestValuesAttributeCodeInnerLinkedData;
}
/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter \"with_attribute_options\" is set to \"true\"). See <a href=\'/concepts/products.html#the-linked_data-format\'>the `linked_data` format</a> section for more details.
 * @export
 * @interface PostProductsRequestValuesAttributeCodeInnerLinkedData
 */
export interface PostProductsRequestValuesAttributeCodeInnerLinkedData {
    /**
     * 
     * @type {string}
     * @memberof PostProductsRequestValuesAttributeCodeInnerLinkedData
     */
    'attribute'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostProductsRequestValuesAttributeCodeInnerLinkedData
     */
    'code'?: string;
    /**
     * 
     * @type {object}
     * @memberof PostProductsRequestValuesAttributeCodeInnerLinkedData
     */
    'labels'?: object;
}
/**
 * 
 * @export
 * @interface PostProductsUuidRequest
 */
export interface PostProductsUuidRequest {
    /**
     * Product uuid
     * @type {string}
     * @memberof PostProductsUuidRequest
     */
    'uuid'?: string;
    /**
     * Whether the product is enabled
     * @type {boolean}
     * @memberof PostProductsUuidRequest
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the product inherits its attributes and attributes requirements.
     * @type {string}
     * @memberof PostProductsUuidRequest
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product is classified
     * @type {Array<string>}
     * @memberof PostProductsUuidRequest
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the product belong
     * @type {Array<string>}
     * @memberof PostProductsUuidRequest
     */
    'groups'?: Array<string>;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     * @type {string}
     * @memberof PostProductsUuidRequest
     */
    'parent'?: string;
    /**
     * 
     * @type {PostProductsRequestValues}
     * @memberof PostProductsUuidRequest
     */
    'values'?: PostProductsRequestValues;
    /**
     * 
     * @type {PostProductsUuidRequestAssociations}
     * @memberof PostProductsUuidRequest
     */
    'associations'?: PostProductsUuidRequestAssociations;
    /**
     * 
     * @type {PostProductsUuidRequestQuantifiedAssociations}
     * @memberof PostProductsUuidRequest
     */
    'quantified_associations'?: PostProductsUuidRequestQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof PostProductsUuidRequest
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PostProductsUuidRequest
     */
    'updated'?: string;
    /**
     * 
     * @type {PostProductsRequestMetadata}
     * @memberof PostProductsUuidRequest
     */
    'metadata'?: PostProductsRequestMetadata;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof PostProductsUuidRequest
     */
    'quality_scores'?: object;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
     * @type {Array<PostProductsRequestCompletenessesInner>}
     * @memberof PostProductsUuidRequest
     */
    'completenesses'?: Array<PostProductsRequestCompletenessesInner>;
}
/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 * @export
 * @interface PostProductsUuidRequestAssociations
 */
export interface PostProductsUuidRequestAssociations {
    /**
     * 
     * @type {PostProductsUuidRequestAssociationsAssociationTypeCode}
     * @memberof PostProductsUuidRequestAssociations
     */
    'associationTypeCode'?: PostProductsUuidRequestAssociationsAssociationTypeCode;
}
/**
 * 
 * @export
 * @interface PostProductsUuidRequestAssociationsAssociationTypeCode
 */
export interface PostProductsUuidRequestAssociationsAssociationTypeCode {
    /**
     * Array of groups codes with which the product is in relation
     * @type {Array<string>}
     * @memberof PostProductsUuidRequestAssociationsAssociationTypeCode
     */
    'groups'?: Array<string>;
    /**
     * Array of product uuids with which the product is in relation
     * @type {Array<string>}
     * @memberof PostProductsUuidRequestAssociationsAssociationTypeCode
     */
    'products'?: Array<string>;
    /**
     * Array of product model codes with which the product is in relation (only available since the v2.1)
     * @type {Array<string>}
     * @memberof PostProductsUuidRequestAssociationsAssociationTypeCode
     */
    'product_models'?: Array<string>;
}
/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 * @export
 * @interface PostProductsUuidRequestQuantifiedAssociations
 */
export interface PostProductsUuidRequestQuantifiedAssociations {
    /**
     * 
     * @type {PostProductsUuidRequestQuantifiedAssociationsQuantifiedAssociationTypeCode}
     * @memberof PostProductsUuidRequestQuantifiedAssociations
     */
    'quantifiedAssociationTypeCode'?: PostProductsUuidRequestQuantifiedAssociationsQuantifiedAssociationTypeCode;
}
/**
 * 
 * @export
 * @interface PostProductsUuidRequestQuantifiedAssociationsQuantifiedAssociationTypeCode
 */
export interface PostProductsUuidRequestQuantifiedAssociationsQuantifiedAssociationTypeCode {
    /**
     * Array of objects containing product uuids and quantities with which the product is in relation
     * @type {Array<PostProductsUuidRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner>}
     * @memberof PostProductsUuidRequestQuantifiedAssociationsQuantifiedAssociationTypeCode
     */
    'products'?: Array<PostProductsUuidRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner>;
    /**
     * Array of objects containing product model codes and quantities with which the product is in relation
     * @type {Array<PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner>}
     * @memberof PostProductsUuidRequestQuantifiedAssociationsQuantifiedAssociationTypeCode
     */
    'product_models'?: Array<PostProductsRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner>;
}
/**
 * 
 * @export
 * @interface PostProductsUuidRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner
 */
export interface PostProductsUuidRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner {
    /**
     * 
     * @type {string}
     * @memberof PostProductsUuidRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner
     */
    'uuid'?: string;
    /**
     * 
     * @type {number}
     * @memberof PostProductsUuidRequestQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface PostReferenceEntityMediaFilesRequest
 */
export interface PostReferenceEntityMediaFilesRequest {
    /**
     * The binary of the media file
     * @type {File}
     * @memberof PostReferenceEntityMediaFilesRequest
     */
    'file': File;
}
/**
 * 
 * @export
 * @interface PostReferenceFilesLocaleCode201Response
 */
export interface PostReferenceFilesLocaleCode201Response {
    /**
     * Message explaining the warning
     * @type {string}
     * @memberof PostReferenceFilesLocaleCode201Response
     */
    'message'?: string;
    /**
     * 
     * @type {Array<PostReferenceFilesLocaleCode201ResponseErrorsInner>}
     * @memberof PostReferenceFilesLocaleCode201Response
     */
    'errors'?: Array<PostReferenceFilesLocaleCode201ResponseErrorsInner>;
}
/**
 * 
 * @export
 * @interface PostReferenceFilesLocaleCode201ResponseErrorsInner
 */
export interface PostReferenceFilesLocaleCode201ResponseErrorsInner {
    /**
     * Channel for which the variation file generation failed
     * @type {string}
     * @memberof PostReferenceFilesLocaleCode201ResponseErrorsInner
     */
    'channel'?: string;
    /**
     * Locale for which the variation file generation failed
     * @type {string}
     * @memberof PostReferenceFilesLocaleCode201ResponseErrorsInner
     */
    'locale'?: string;
    /**
     * Message explaining why the variation file generation failed
     * @type {string}
     * @memberof PostReferenceFilesLocaleCode201ResponseErrorsInner
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface PostReferenceFilesLocaleCodeRequest
 */
export interface PostReferenceFilesLocaleCodeRequest {
    /**
     * The binaries of the file
     * @type {File}
     * @memberof PostReferenceFilesLocaleCodeRequest
     */
    'file': File;
}
/**
 * 
 * @export
 * @interface PostToken200Response
 */
export interface PostToken200Response {
    /**
     * Authentication token that should be given in every authenticated request to the API
     * @type {string}
     * @memberof PostToken200Response
     */
    'access_token'?: string;
    /**
     * Validity of the token given in seconds, 3600s = 1h by default
     * @type {number}
     * @memberof PostToken200Response
     */
    'expires_in'?: number;
    /**
     * Token type, always equal to \"bearer\"
     * @type {string}
     * @memberof PostToken200Response
     */
    'token_type'?: string;
    /**
     * Unused, always equal to \"null\"
     * @type {string}
     * @memberof PostToken200Response
     */
    'scope'?: string;
    /**
     * Use this token when your access token has expired. See <a href=\"/documentation/authentication.html#refresh-an-expired-token\">Refresh an expired token</a> section for more details.
     * @type {string}
     * @memberof PostToken200Response
     */
    'refresh_token'?: string;
}
/**
 * 
 * @export
 * @interface PostTokenRequest
 */
export interface PostTokenRequest {
    /**
     * Your PIM username
     * @type {string}
     * @memberof PostTokenRequest
     */
    'username': string;
    /**
     * Your PIM password
     * @type {string}
     * @memberof PostTokenRequest
     */
    'password': string;
    /**
     * Always equal to \"password\"
     * @type {string}
     * @memberof PostTokenRequest
     */
    'grant_type': string;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * Product UUID
     * @type {string}
     * @memberof Product
     */
    'uuid'?: string;
    /**
     * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     * @type {string}
     * @memberof Product
     */
    'identifier': string;
    /**
     * Whether the product is enabled
     * @type {boolean}
     * @memberof Product
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the product inherits its attributes and attributes requirements.
     * @type {string}
     * @memberof Product
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product is classified
     * @type {Array<string>}
     * @memberof Product
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the product belong
     * @type {Array<string>}
     * @memberof Product
     */
    'groups'?: Array<string>;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     * @type {string}
     * @memberof Product
     */
    'parent'?: string;
    /**
     * 
     * @type {PostProductsRequestValues}
     * @memberof Product
     */
    'values'?: PostProductsRequestValues;
    /**
     * 
     * @type {PostProductsRequestAssociations}
     * @memberof Product
     */
    'associations'?: PostProductsRequestAssociations;
    /**
     * 
     * @type {PostProductsRequestQuantifiedAssociations}
     * @memberof Product
     */
    'quantified_associations'?: PostProductsRequestQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof Product
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof Product
     */
    'updated'?: string;
    /**
     * 
     * @type {PostProductsRequestMetadata}
     * @memberof Product
     */
    'metadata'?: PostProductsRequestMetadata;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof Product
     */
    'quality_scores'?: object;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
     * @type {Array<PostProductsRequestCompletenessesInner>}
     * @memberof Product
     */
    'completenesses'?: Array<PostProductsRequestCompletenessesInner>;
}
/**
 * 
 * @export
 * @interface ProductList
 */
export interface ProductList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof ProductList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Product UUID
     * @type {string}
     * @memberof ProductList
     */
    'uuid'?: string;
    /**
     * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     * @type {string}
     * @memberof ProductList
     */
    'identifier': string;
    /**
     * Whether the product is enabled
     * @type {boolean}
     * @memberof ProductList
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the product inherits its attributes and attributes requirements.
     * @type {string}
     * @memberof ProductList
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product is classified
     * @type {Array<string>}
     * @memberof ProductList
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the product belong
     * @type {Array<string>}
     * @memberof ProductList
     */
    'groups'?: Array<string>;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     * @type {string}
     * @memberof ProductList
     */
    'parent'?: string;
    /**
     * 
     * @type {ProductListAllOf1Values}
     * @memberof ProductList
     */
    'values'?: ProductListAllOf1Values;
    /**
     * 
     * @type {ProductListAllOf1Associations}
     * @memberof ProductList
     */
    'associations'?: ProductListAllOf1Associations;
    /**
     * 
     * @type {ProductListAllOf1QuantifiedAssociations}
     * @memberof ProductList
     */
    'quantified_associations'?: ProductListAllOf1QuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof ProductList
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof ProductList
     */
    'updated'?: string;
    /**
     * 
     * @type {ProductListAllOf1Metadata}
     * @memberof ProductList
     */
    'metadata'?: ProductListAllOf1Metadata;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof ProductList
     */
    'quality_scores'?: object;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
     * @type {Array<ProductListAllOf1Completenesses>}
     * @memberof ProductList
     */
    'completenesses'?: Array<ProductListAllOf1Completenesses>;
}
/**
 * 
 * @export
 * @interface ProductListAllOf
 */
export interface ProductListAllOf {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof ProductListAllOf
     */
    '_links'?: ProductListAllOfLinks;
}
/**
 * 
 * @export
 * @interface ProductListAllOf1
 */
export interface ProductListAllOf1 {
    /**
     * Product UUID
     * @type {string}
     * @memberof ProductListAllOf1
     */
    'uuid'?: string;
    /**
     * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     * @type {string}
     * @memberof ProductListAllOf1
     */
    'identifier': string;
    /**
     * Whether the product is enabled
     * @type {boolean}
     * @memberof ProductListAllOf1
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the product inherits its attributes and attributes requirements.
     * @type {string}
     * @memberof ProductListAllOf1
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product is classified
     * @type {Array<string>}
     * @memberof ProductListAllOf1
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the product belong
     * @type {Array<string>}
     * @memberof ProductListAllOf1
     */
    'groups'?: Array<string>;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     * @type {string}
     * @memberof ProductListAllOf1
     */
    'parent'?: string;
    /**
     * 
     * @type {ProductListAllOf1Values}
     * @memberof ProductListAllOf1
     */
    'values'?: ProductListAllOf1Values;
    /**
     * 
     * @type {ProductListAllOf1Associations}
     * @memberof ProductListAllOf1
     */
    'associations'?: ProductListAllOf1Associations;
    /**
     * 
     * @type {ProductListAllOf1QuantifiedAssociations}
     * @memberof ProductListAllOf1
     */
    'quantified_associations'?: ProductListAllOf1QuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof ProductListAllOf1
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof ProductListAllOf1
     */
    'updated'?: string;
    /**
     * 
     * @type {ProductListAllOf1Metadata}
     * @memberof ProductListAllOf1
     */
    'metadata'?: ProductListAllOf1Metadata;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof ProductListAllOf1
     */
    'quality_scores'?: object;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
     * @type {Array<ProductListAllOf1Completenesses>}
     * @memberof ProductListAllOf1
     */
    'completenesses'?: Array<ProductListAllOf1Completenesses>;
}
/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 * @export
 * @interface ProductListAllOf1Associations
 */
export interface ProductListAllOf1Associations {
    /**
     * 
     * @type {ProductListAllOf1AssociationsAssociationTypeCode}
     * @memberof ProductListAllOf1Associations
     */
    'associationTypeCode'?: ProductListAllOf1AssociationsAssociationTypeCode;
}
/**
 * 
 * @export
 * @interface ProductListAllOf1AssociationsAssociationTypeCode
 */
export interface ProductListAllOf1AssociationsAssociationTypeCode {
    /**
     * Array of groups codes with which the product is in relation
     * @type {Array<string>}
     * @memberof ProductListAllOf1AssociationsAssociationTypeCode
     */
    'groups'?: Array<string>;
    /**
     * Array of product identifiers with which the product is in relation
     * @type {Array<string>}
     * @memberof ProductListAllOf1AssociationsAssociationTypeCode
     */
    'products'?: Array<string>;
    /**
     * Array of product model codes with which the product is in relation (only available since the v2.1)
     * @type {Array<string>}
     * @memberof ProductListAllOf1AssociationsAssociationTypeCode
     */
    'product_models'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductListAllOf1Completenesses
 */
export interface ProductListAllOf1Completenesses {
    /**
     * 
     * @type {string}
     * @memberof ProductListAllOf1Completenesses
     */
    'scope'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductListAllOf1Completenesses
     */
    'locale'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductListAllOf1Completenesses
     */
    'data'?: number;
}
/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 * @export
 * @interface ProductListAllOf1Metadata
 */
export interface ProductListAllOf1Metadata {
    /**
     * Status of the product regarding the user permissions
     * @type {string}
     * @memberof ProductListAllOf1Metadata
     */
    'workflow_status'?: ProductListAllOf1MetadataWorkflowStatusEnum;
}

export const ProductListAllOf1MetadataWorkflowStatusEnum = {
    ReadOnly: 'read_only',
    DraftInProgress: 'draft_in_progress',
    ProposalWaitingForApproval: 'proposal_waiting_for_approval',
    WorkingCopy: 'working_copy'
} as const;

export type ProductListAllOf1MetadataWorkflowStatusEnum = typeof ProductListAllOf1MetadataWorkflowStatusEnum[keyof typeof ProductListAllOf1MetadataWorkflowStatusEnum];

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 * @export
 * @interface ProductListAllOf1QuantifiedAssociations
 */
export interface ProductListAllOf1QuantifiedAssociations {
    /**
     * 
     * @type {ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCode}
     * @memberof ProductListAllOf1QuantifiedAssociations
     */
    'quantifiedAssociationTypeCode'?: ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCode;
}
/**
 * 
 * @export
 * @interface ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCode
 */
export interface ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCode {
    /**
     * Array of objects containing product identifiers and quantities with which the product is in relation
     * @type {Array<ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProducts>}
     * @memberof ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCode
     */
    'products'?: Array<ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProducts>;
    /**
     * Array of objects containing product model codes and quantities with which the product is in relation
     * @type {Array<ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModels>}
     * @memberof ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCode
     */
    'product_models'?: Array<ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModels>;
}
/**
 * 
 * @export
 * @interface ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModels
 */
export interface ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModels {
    /**
     * 
     * @type {string}
     * @memberof ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModels
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModels
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProducts
 */
export interface ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProducts {
    /**
     * 
     * @type {string}
     * @memberof ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProducts
     */
    'identifier'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProducts
     */
    'quantity'?: number;
}
/**
 * Product attributes values, see <a href=\'/concepts/products.html#focus-on-the-product-values\'>Product values</a> section for more details
 * @export
 * @interface ProductListAllOf1Values
 */
export interface ProductListAllOf1Values {
    /**
     * 
     * @type {Array<ProductListAllOf1ValuesAttributeCode>}
     * @memberof ProductListAllOf1Values
     */
    'attributeCode'?: Array<ProductListAllOf1ValuesAttributeCode>;
}
/**
 * 
 * @export
 * @interface ProductListAllOf1ValuesAttributeCode
 */
export interface ProductListAllOf1ValuesAttributeCode {
    /**
     * <a href=\'api-reference.html#Channel\'>Channel</a> code of the product value
     * @type {string}
     * @memberof ProductListAllOf1ValuesAttributeCode
     */
    'scope'?: string;
    /**
     * <a href=\'api-reference.html#Locale\'>Locale</a> code of the product value
     * @type {string}
     * @memberof ProductListAllOf1ValuesAttributeCode
     */
    'locale'?: string;
    /**
     * Product value. See <a href=\'/concepts/products.html#the-data-format\'>the `data` format</a> section for more details.
     * @type {object}
     * @memberof ProductListAllOf1ValuesAttributeCode
     */
    'data'?: object;
    /**
     * 
     * @type {ProductListAllOf1ValuesLinkedData}
     * @memberof ProductListAllOf1ValuesAttributeCode
     */
    'linked_data'?: ProductListAllOf1ValuesLinkedData;
}
/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter \"with_attribute_options\" is set to \"true\"). See <a href=\'/concepts/products.html#the-linked_data-format\'>the `linked_data` format</a> section for more details.
 * @export
 * @interface ProductListAllOf1ValuesLinkedData
 */
export interface ProductListAllOf1ValuesLinkedData {
    /**
     * 
     * @type {string}
     * @memberof ProductListAllOf1ValuesLinkedData
     */
    'attribute'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductListAllOf1ValuesLinkedData
     */
    'code'?: string;
    /**
     * 
     * @type {object}
     * @memberof ProductListAllOf1ValuesLinkedData
     */
    'labels'?: object;
}
/**
 * 
 * @export
 * @interface ProductListAllOfLinks
 */
export interface ProductListAllOfLinks {
    /**
     * 
     * @type {ProductListAllOfLinksSelf}
     * @memberof ProductListAllOfLinks
     */
    'self'?: ProductListAllOfLinksSelf;
}
/**
 * 
 * @export
 * @interface ProductListAllOfLinksSelf
 */
export interface ProductListAllOfLinksSelf {
    /**
     * URI of the resource
     * @type {string}
     * @memberof ProductListAllOfLinksSelf
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface ProductModel
 */
export interface ProductModel {
    /**
     * Product model code
     * @type {string}
     * @memberof ProductModel
     */
    'code': string;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
     * @type {string}
     * @memberof ProductModel
     */
    'family'?: string;
    /**
     * Family variant code from which the product model inherits its attributes and variant attributes
     * @type {string}
     * @memberof ProductModel
     */
    'family_variant': string;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a>. This parent can be modified since the 2.3.
     * @type {string}
     * @memberof ProductModel
     */
    'parent'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product model is categorized
     * @type {Array<string>}
     * @memberof ProductModel
     */
    'categories'?: Array<string>;
    /**
     * 
     * @type {PostProductModelsRequestValues}
     * @memberof ProductModel
     */
    'values'?: PostProductModelsRequestValues;
    /**
     * 
     * @type {PostProductModelsRequestAssociations}
     * @memberof ProductModel
     */
    'associations'?: PostProductModelsRequestAssociations;
    /**
     * 
     * @type {PostProductModelsRequestQuantifiedAssociations}
     * @memberof ProductModel
     */
    'quantified_associations'?: PostProductModelsRequestQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof ProductModel
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof ProductModel
     */
    'updated'?: string;
    /**
     * 
     * @type {PostProductModelsRequestMetadata}
     * @memberof ProductModel
     */
    'metadata'?: PostProductModelsRequestMetadata;
    /**
     * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof ProductModel
     */
    'quality_scores'?: object;
}
/**
 * 
 * @export
 * @interface ProductModelList
 */
export interface ProductModelList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof ProductModelList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Product model code
     * @type {string}
     * @memberof ProductModelList
     */
    'code': string;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
     * @type {string}
     * @memberof ProductModelList
     */
    'family'?: string;
    /**
     * Family variant code from which the product model inherits its attributes and variant attributes
     * @type {string}
     * @memberof ProductModelList
     */
    'family_variant': string;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a>. This parent can be modified since the 2.3.
     * @type {string}
     * @memberof ProductModelList
     */
    'parent'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product model is categorized
     * @type {Array<string>}
     * @memberof ProductModelList
     */
    'categories'?: Array<string>;
    /**
     * 
     * @type {ProductModelListAllOfValues}
     * @memberof ProductModelList
     */
    'values'?: ProductModelListAllOfValues;
    /**
     * 
     * @type {ProductModelListAllOfAssociations}
     * @memberof ProductModelList
     */
    'associations'?: ProductModelListAllOfAssociations;
    /**
     * 
     * @type {ProductModelListAllOfQuantifiedAssociations}
     * @memberof ProductModelList
     */
    'quantified_associations'?: ProductModelListAllOfQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof ProductModelList
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof ProductModelList
     */
    'updated'?: string;
    /**
     * 
     * @type {ProductModelListAllOfMetadata}
     * @memberof ProductModelList
     */
    'metadata'?: ProductModelListAllOfMetadata;
    /**
     * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof ProductModelList
     */
    'quality_scores'?: object;
}
/**
 * 
 * @export
 * @interface ProductModelListAllOf
 */
export interface ProductModelListAllOf {
    /**
     * Product model code
     * @type {string}
     * @memberof ProductModelListAllOf
     */
    'code': string;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
     * @type {string}
     * @memberof ProductModelListAllOf
     */
    'family'?: string;
    /**
     * Family variant code from which the product model inherits its attributes and variant attributes
     * @type {string}
     * @memberof ProductModelListAllOf
     */
    'family_variant': string;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a>. This parent can be modified since the 2.3.
     * @type {string}
     * @memberof ProductModelListAllOf
     */
    'parent'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product model is categorized
     * @type {Array<string>}
     * @memberof ProductModelListAllOf
     */
    'categories'?: Array<string>;
    /**
     * 
     * @type {ProductModelListAllOfValues}
     * @memberof ProductModelListAllOf
     */
    'values'?: ProductModelListAllOfValues;
    /**
     * 
     * @type {ProductModelListAllOfAssociations}
     * @memberof ProductModelListAllOf
     */
    'associations'?: ProductModelListAllOfAssociations;
    /**
     * 
     * @type {ProductModelListAllOfQuantifiedAssociations}
     * @memberof ProductModelListAllOf
     */
    'quantified_associations'?: ProductModelListAllOfQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof ProductModelListAllOf
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof ProductModelListAllOf
     */
    'updated'?: string;
    /**
     * 
     * @type {ProductModelListAllOfMetadata}
     * @memberof ProductModelListAllOf
     */
    'metadata'?: ProductModelListAllOfMetadata;
    /**
     * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof ProductModelListAllOf
     */
    'quality_scores'?: object;
}
/**
 * Several associations related to groups, product and/or other product models, grouped by association types
 * @export
 * @interface ProductModelListAllOfAssociations
 */
export interface ProductModelListAllOfAssociations {
    /**
     * 
     * @type {ProductListAllOf1AssociationsAssociationTypeCode}
     * @memberof ProductModelListAllOfAssociations
     */
    'associationTypeCode'?: ProductListAllOf1AssociationsAssociationTypeCode;
}
/**
 * More information around the product model (only available since the v2.3 in the Enterprise Edition)
 * @export
 * @interface ProductModelListAllOfMetadata
 */
export interface ProductModelListAllOfMetadata {
    /**
     * Status of the product model regarding the user permissions
     * @type {string}
     * @memberof ProductModelListAllOfMetadata
     */
    'workflow_status'?: ProductModelListAllOfMetadataWorkflowStatusEnum;
}

export const ProductModelListAllOfMetadataWorkflowStatusEnum = {
    ReadOnly: 'read_only',
    DraftInProgress: 'draft_in_progress',
    ProposalWaitingForApproval: 'proposal_waiting_for_approval',
    WorkingCopy: 'working_copy'
} as const;

export type ProductModelListAllOfMetadataWorkflowStatusEnum = typeof ProductModelListAllOfMetadataWorkflowStatusEnum[keyof typeof ProductModelListAllOfMetadataWorkflowStatusEnum];

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 * @export
 * @interface ProductModelListAllOfQuantifiedAssociations
 */
export interface ProductModelListAllOfQuantifiedAssociations {
    /**
     * 
     * @type {ProductModelListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode}
     * @memberof ProductModelListAllOfQuantifiedAssociations
     */
    'quantifiedAssociationTypeCode'?: ProductModelListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode;
}
/**
 * 
 * @export
 * @interface ProductModelListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode
 */
export interface ProductModelListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode {
    /**
     * Array of objects containing product identifiers and quantities with which the product model is in relation
     * @type {Array<ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProducts>}
     * @memberof ProductModelListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode
     */
    'products'?: Array<ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProducts>;
    /**
     * Array of objects containing product model codes and quantities with which the product model is in relation
     * @type {Array<ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModels>}
     * @memberof ProductModelListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode
     */
    'product_models'?: Array<ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModels>;
}
/**
 * Product model attributes values, see <a href=\'/concepts/products.html#focus-on-the-product-values\'>Product values</a> section for more details
 * @export
 * @interface ProductModelListAllOfValues
 */
export interface ProductModelListAllOfValues {
    /**
     * 
     * @type {Array<ProductModelListAllOfValuesAttributeCode>}
     * @memberof ProductModelListAllOfValues
     */
    'attributeCode'?: Array<ProductModelListAllOfValuesAttributeCode>;
}
/**
 * 
 * @export
 * @interface ProductModelListAllOfValuesAttributeCode
 */
export interface ProductModelListAllOfValuesAttributeCode {
    /**
     * <a href=\'api-reference.html#Channel\'>Channel</a> code of the product value
     * @type {string}
     * @memberof ProductModelListAllOfValuesAttributeCode
     */
    'scope'?: string;
    /**
     * <a href=\'api-reference.html#Locale\'>Locale</a> code of the product value
     * @type {string}
     * @memberof ProductModelListAllOfValuesAttributeCode
     */
    'locale'?: string;
    /**
     * <a href=\'api-reference.html#Productuuid\'>Product</a> value
     * @type {object}
     * @memberof ProductModelListAllOfValuesAttributeCode
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface ProductModels
 */
export interface ProductModels {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof ProductModels
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof ProductModels
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface ProductUuid
 */
export interface ProductUuid {
    /**
     * Product uuid
     * @type {string}
     * @memberof ProductUuid
     */
    'uuid'?: string;
    /**
     * Whether the product is enabled
     * @type {boolean}
     * @memberof ProductUuid
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the product inherits its attributes and attributes requirements.
     * @type {string}
     * @memberof ProductUuid
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product is classified
     * @type {Array<string>}
     * @memberof ProductUuid
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the product belong
     * @type {Array<string>}
     * @memberof ProductUuid
     */
    'groups'?: Array<string>;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     * @type {string}
     * @memberof ProductUuid
     */
    'parent'?: string;
    /**
     * 
     * @type {PostProductsRequestValues}
     * @memberof ProductUuid
     */
    'values'?: PostProductsRequestValues;
    /**
     * 
     * @type {PostProductsUuidRequestAssociations}
     * @memberof ProductUuid
     */
    'associations'?: PostProductsUuidRequestAssociations;
    /**
     * 
     * @type {PostProductsUuidRequestQuantifiedAssociations}
     * @memberof ProductUuid
     */
    'quantified_associations'?: PostProductsUuidRequestQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof ProductUuid
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof ProductUuid
     */
    'updated'?: string;
    /**
     * 
     * @type {PostProductsRequestMetadata}
     * @memberof ProductUuid
     */
    'metadata'?: PostProductsRequestMetadata;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof ProductUuid
     */
    'quality_scores'?: object;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
     * @type {Array<PostProductsRequestCompletenessesInner>}
     * @memberof ProductUuid
     */
    'completenesses'?: Array<PostProductsRequestCompletenessesInner>;
}
/**
 * 
 * @export
 * @interface ProductUuidList
 */
export interface ProductUuidList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof ProductUuidList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Product uuid
     * @type {string}
     * @memberof ProductUuidList
     */
    'uuid'?: string;
    /**
     * Whether the product is enabled
     * @type {boolean}
     * @memberof ProductUuidList
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the product inherits its attributes and attributes requirements.
     * @type {string}
     * @memberof ProductUuidList
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product is classified
     * @type {Array<string>}
     * @memberof ProductUuidList
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the product belong
     * @type {Array<string>}
     * @memberof ProductUuidList
     */
    'groups'?: Array<string>;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     * @type {string}
     * @memberof ProductUuidList
     */
    'parent'?: string;
    /**
     * 
     * @type {ProductListAllOf1Values}
     * @memberof ProductUuidList
     */
    'values'?: ProductListAllOf1Values;
    /**
     * 
     * @type {ProductUuidListAllOfAssociations}
     * @memberof ProductUuidList
     */
    'associations'?: ProductUuidListAllOfAssociations;
    /**
     * 
     * @type {ProductUuidListAllOfQuantifiedAssociations}
     * @memberof ProductUuidList
     */
    'quantified_associations'?: ProductUuidListAllOfQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof ProductUuidList
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof ProductUuidList
     */
    'updated'?: string;
    /**
     * 
     * @type {ProductListAllOf1Metadata}
     * @memberof ProductUuidList
     */
    'metadata'?: ProductListAllOf1Metadata;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof ProductUuidList
     */
    'quality_scores'?: object;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
     * @type {Array<ProductListAllOf1Completenesses>}
     * @memberof ProductUuidList
     */
    'completenesses'?: Array<ProductListAllOf1Completenesses>;
}
/**
 * 
 * @export
 * @interface ProductUuidListAllOf
 */
export interface ProductUuidListAllOf {
    /**
     * Product uuid
     * @type {string}
     * @memberof ProductUuidListAllOf
     */
    'uuid'?: string;
    /**
     * Whether the product is enabled
     * @type {boolean}
     * @memberof ProductUuidListAllOf
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the product inherits its attributes and attributes requirements.
     * @type {string}
     * @memberof ProductUuidListAllOf
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the product is classified
     * @type {Array<string>}
     * @memberof ProductUuidListAllOf
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the product belong
     * @type {Array<string>}
     * @memberof ProductUuidListAllOf
     */
    'groups'?: Array<string>;
    /**
     * Code of the parent <a href=\'api-reference.html#Productmodel\'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     * @type {string}
     * @memberof ProductUuidListAllOf
     */
    'parent'?: string;
    /**
     * 
     * @type {ProductListAllOf1Values}
     * @memberof ProductUuidListAllOf
     */
    'values'?: ProductListAllOf1Values;
    /**
     * 
     * @type {ProductUuidListAllOfAssociations}
     * @memberof ProductUuidListAllOf
     */
    'associations'?: ProductUuidListAllOfAssociations;
    /**
     * 
     * @type {ProductUuidListAllOfQuantifiedAssociations}
     * @memberof ProductUuidListAllOf
     */
    'quantified_associations'?: ProductUuidListAllOfQuantifiedAssociations;
    /**
     * Date of creation
     * @type {string}
     * @memberof ProductUuidListAllOf
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof ProductUuidListAllOf
     */
    'updated'?: string;
    /**
     * 
     * @type {ProductListAllOf1Metadata}
     * @memberof ProductUuidListAllOf
     */
    'metadata'?: ProductListAllOf1Metadata;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
     * @type {object}
     * @memberof ProductUuidListAllOf
     */
    'quality_scores'?: object;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
     * @type {Array<ProductListAllOf1Completenesses>}
     * @memberof ProductUuidListAllOf
     */
    'completenesses'?: Array<ProductListAllOf1Completenesses>;
}
/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 * @export
 * @interface ProductUuidListAllOfAssociations
 */
export interface ProductUuidListAllOfAssociations {
    /**
     * 
     * @type {ProductUuidListAllOfAssociationsAssociationTypeCode}
     * @memberof ProductUuidListAllOfAssociations
     */
    'associationTypeCode'?: ProductUuidListAllOfAssociationsAssociationTypeCode;
}
/**
 * 
 * @export
 * @interface ProductUuidListAllOfAssociationsAssociationTypeCode
 */
export interface ProductUuidListAllOfAssociationsAssociationTypeCode {
    /**
     * Array of groups codes with which the product is in relation
     * @type {Array<string>}
     * @memberof ProductUuidListAllOfAssociationsAssociationTypeCode
     */
    'groups'?: Array<string>;
    /**
     * Array of product uuids with which the product is in relation
     * @type {Array<string>}
     * @memberof ProductUuidListAllOfAssociationsAssociationTypeCode
     */
    'products'?: Array<string>;
    /**
     * Array of product model codes with which the product is in relation (only available since the v2.1)
     * @type {Array<string>}
     * @memberof ProductUuidListAllOfAssociationsAssociationTypeCode
     */
    'product_models'?: Array<string>;
}
/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 * @export
 * @interface ProductUuidListAllOfQuantifiedAssociations
 */
export interface ProductUuidListAllOfQuantifiedAssociations {
    /**
     * 
     * @type {ProductUuidListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode}
     * @memberof ProductUuidListAllOfQuantifiedAssociations
     */
    'quantifiedAssociationTypeCode'?: ProductUuidListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode;
}
/**
 * 
 * @export
 * @interface ProductUuidListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode
 */
export interface ProductUuidListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode {
    /**
     * Array of objects containing product uuids and quantities with which the product is in relation
     * @type {Array<ProductUuidListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProducts>}
     * @memberof ProductUuidListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode
     */
    'products'?: Array<ProductUuidListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProducts>;
    /**
     * Array of objects containing product model codes and quantities with which the product is in relation
     * @type {Array<ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModels>}
     * @memberof ProductUuidListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode
     */
    'product_models'?: Array<ProductListAllOf1QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModels>;
}
/**
 * 
 * @export
 * @interface ProductUuidListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProducts
 */
export interface ProductUuidListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProducts {
    /**
     * 
     * @type {string}
     * @memberof ProductUuidListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProducts
     */
    'uuid'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductUuidListAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProducts
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface ProductUuids
 */
export interface ProductUuids {
    /**
     * 
     * @type {ReferenceEntitiesLinks}
     * @memberof ProductUuids
     */
    '_links'?: ReferenceEntitiesLinks;
}
/**
 * 
 * @export
 * @interface Products
 */
export interface Products {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof Products
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof Products
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface Products1
 */
export interface Products1 {
    /**
     * 
     * @type {ReferenceEntitiesLinks}
     * @memberof Products1
     */
    '_links'?: ReferenceEntitiesLinks;
}
/**
 * 
 * @export
 * @interface ProductsLinks
 */
export interface ProductsLinks {
    /**
     * 
     * @type {ProductsLinksSelf}
     * @memberof ProductsLinks
     */
    'self'?: ProductsLinksSelf;
    /**
     * 
     * @type {ProductsLinksFirst}
     * @memberof ProductsLinks
     */
    'first'?: ProductsLinksFirst;
    /**
     * 
     * @type {ProductsLinksPrevious}
     * @memberof ProductsLinks
     */
    'previous'?: ProductsLinksPrevious;
    /**
     * 
     * @type {ProductsLinksNext}
     * @memberof ProductsLinks
     */
    'next'?: ProductsLinksNext;
}
/**
 * 
 * @export
 * @interface ProductsLinksFirst
 */
export interface ProductsLinksFirst {
    /**
     * URI of the first page of resources
     * @type {string}
     * @memberof ProductsLinksFirst
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface ProductsLinksNext
 */
export interface ProductsLinksNext {
    /**
     * URI of the next page of resources
     * @type {string}
     * @memberof ProductsLinksNext
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface ProductsLinksPrevious
 */
export interface ProductsLinksPrevious {
    /**
     * URI of the previous page of resources
     * @type {string}
     * @memberof ProductsLinksPrevious
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface ProductsLinksSelf
 */
export interface ProductsLinksSelf {
    /**
     * URI of the current page of resources
     * @type {string}
     * @memberof ProductsLinksSelf
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface PublishedProduct
 */
export interface PublishedProduct {
    /**
     * Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     * @type {string}
     * @memberof PublishedProduct
     */
    'identifier': string;
    /**
     * Whether the published product is enable
     * @type {boolean}
     * @memberof PublishedProduct
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the published product inherits its attributes and attributes requirements
     * @type {string}
     * @memberof PublishedProduct
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the published product is classified
     * @type {Array<string>}
     * @memberof PublishedProduct
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the published product belong
     * @type {Array<string>}
     * @memberof PublishedProduct
     */
    'groups'?: Array<string>;
    /**
     * 
     * @type {GetPublishedProductsCode200ResponseValues}
     * @memberof PublishedProduct
     */
    'values'?: GetPublishedProductsCode200ResponseValues;
    /**
     * 
     * @type {GetPublishedProductsCode200ResponseAssociations}
     * @memberof PublishedProduct
     */
    'associations'?: GetPublishedProductsCode200ResponseAssociations;
    /**
     * Warning: associations with quantities are not compatible with the published products. The response will always be empty.
     * @type {object}
     * @memberof PublishedProduct
     */
    'quantified_associations'?: object;
    /**
     * Date of creation
     * @type {string}
     * @memberof PublishedProduct
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PublishedProduct
     */
    'updated'?: string;
}
/**
 * 
 * @export
 * @interface PublishedProductList
 */
export interface PublishedProductList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof PublishedProductList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     * @type {string}
     * @memberof PublishedProductList
     */
    'identifier': string;
    /**
     * Whether the published product is enable
     * @type {boolean}
     * @memberof PublishedProductList
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the published product inherits its attributes and attributes requirements
     * @type {string}
     * @memberof PublishedProductList
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the published product is classified
     * @type {Array<string>}
     * @memberof PublishedProductList
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the published product belong
     * @type {Array<string>}
     * @memberof PublishedProductList
     */
    'groups'?: Array<string>;
    /**
     * 
     * @type {PublishedProductListAllOfValues}
     * @memberof PublishedProductList
     */
    'values'?: PublishedProductListAllOfValues;
    /**
     * 
     * @type {PublishedProductListAllOfAssociations}
     * @memberof PublishedProductList
     */
    'associations'?: PublishedProductListAllOfAssociations;
    /**
     * Warning: associations with quantities are not compatible with the published products. The response will always be empty.
     * @type {object}
     * @memberof PublishedProductList
     */
    'quantified_associations'?: object;
    /**
     * Date of creation
     * @type {string}
     * @memberof PublishedProductList
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PublishedProductList
     */
    'updated'?: string;
}
/**
 * 
 * @export
 * @interface PublishedProductListAllOf
 */
export interface PublishedProductListAllOf {
    /**
     * Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     * @type {string}
     * @memberof PublishedProductListAllOf
     */
    'identifier': string;
    /**
     * Whether the published product is enable
     * @type {boolean}
     * @memberof PublishedProductListAllOf
     */
    'enabled'?: boolean;
    /**
     * <a href=\'api-reference.html#Family\'>Family</a> code from which the published product inherits its attributes and attributes requirements
     * @type {string}
     * @memberof PublishedProductListAllOf
     */
    'family'?: string;
    /**
     * Codes of the <a href=\'api-reference.html#Category\'>categories</a> in which the published product is classified
     * @type {Array<string>}
     * @memberof PublishedProductListAllOf
     */
    'categories'?: Array<string>;
    /**
     * Codes of the groups to which the published product belong
     * @type {Array<string>}
     * @memberof PublishedProductListAllOf
     */
    'groups'?: Array<string>;
    /**
     * 
     * @type {PublishedProductListAllOfValues}
     * @memberof PublishedProductListAllOf
     */
    'values'?: PublishedProductListAllOfValues;
    /**
     * 
     * @type {PublishedProductListAllOfAssociations}
     * @memberof PublishedProductListAllOf
     */
    'associations'?: PublishedProductListAllOfAssociations;
    /**
     * Warning: associations with quantities are not compatible with the published products. The response will always be empty.
     * @type {object}
     * @memberof PublishedProductListAllOf
     */
    'quantified_associations'?: object;
    /**
     * Date of creation
     * @type {string}
     * @memberof PublishedProductListAllOf
     */
    'created'?: string;
    /**
     * Date of the last update
     * @type {string}
     * @memberof PublishedProductListAllOf
     */
    'updated'?: string;
}
/**
 * Several associations related to groups and/or other published products, grouped by association types
 * @export
 * @interface PublishedProductListAllOfAssociations
 */
export interface PublishedProductListAllOfAssociations {
    /**
     * 
     * @type {PublishedProductListAllOfAssociationsAssociationTypeCode}
     * @memberof PublishedProductListAllOfAssociations
     */
    'associationTypeCode'?: PublishedProductListAllOfAssociationsAssociationTypeCode;
}
/**
 * 
 * @export
 * @interface PublishedProductListAllOfAssociationsAssociationTypeCode
 */
export interface PublishedProductListAllOfAssociationsAssociationTypeCode {
    /**
     * Array of groups codes with which the published product is in relation
     * @type {Array<string>}
     * @memberof PublishedProductListAllOfAssociationsAssociationTypeCode
     */
    'groups'?: Array<string>;
    /**
     * Array of published product identifiers with which the published product is in relation
     * @type {Array<string>}
     * @memberof PublishedProductListAllOfAssociationsAssociationTypeCode
     */
    'products'?: Array<string>;
    /**
     * Array of product model codes with which the product is in relation (only available since the v2.1)
     * @type {Array<string>}
     * @memberof PublishedProductListAllOfAssociationsAssociationTypeCode
     */
    'product_models'?: Array<string>;
}
/**
 * Published product attributes values, see <a href=\'/concepts/products.html#focus-on-the-product-values\'>Product values</a> section for more details
 * @export
 * @interface PublishedProductListAllOfValues
 */
export interface PublishedProductListAllOfValues {
    /**
     * 
     * @type {Array<ProductModelListAllOfValuesAttributeCode>}
     * @memberof PublishedProductListAllOfValues
     */
    'attributeCode'?: Array<ProductModelListAllOfValuesAttributeCode>;
}
/**
 * 
 * @export
 * @interface PublishedProducts
 */
export interface PublishedProducts {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof PublishedProducts
     */
    '_links'?: ProductsLinks;
    /**
     * Current page number
     * @type {number}
     * @memberof PublishedProducts
     */
    'current_page'?: number;
}
/**
 * 
 * @export
 * @interface ReferenceEntities
 */
export interface ReferenceEntities {
    /**
     * 
     * @type {ReferenceEntitiesLinks}
     * @memberof ReferenceEntities
     */
    '_links'?: ReferenceEntitiesLinks;
}
/**
 * 
 * @export
 * @interface ReferenceEntitiesLinks
 */
export interface ReferenceEntitiesLinks {
    /**
     * 
     * @type {ProductsLinksSelf}
     * @memberof ReferenceEntitiesLinks
     */
    'self'?: ProductsLinksSelf;
    /**
     * 
     * @type {ProductsLinksFirst}
     * @memberof ReferenceEntitiesLinks
     */
    'first'?: ProductsLinksFirst;
    /**
     * 
     * @type {ProductsLinksNext}
     * @memberof ReferenceEntitiesLinks
     */
    'next'?: ProductsLinksNext;
}
/**
 * 
 * @export
 * @interface ReferenceEntity
 */
export interface ReferenceEntity {
    /**
     * 
     * @type {ReferenceEntityAllOfLinks}
     * @memberof ReferenceEntity
     */
    '_links'?: ReferenceEntityAllOfLinks;
    /**
     * Reference entity code
     * @type {string}
     * @memberof ReferenceEntity
     */
    'code': string;
    /**
     * 
     * @type {ReferenceEntityAllOf1Labels}
     * @memberof ReferenceEntity
     */
    'labels'?: ReferenceEntityAllOf1Labels;
    /**
     * Code of the reference entity image
     * @type {string}
     * @memberof ReferenceEntity
     */
    'image'?: string;
}
/**
 * 
 * @export
 * @interface ReferenceEntityAllOf
 */
export interface ReferenceEntityAllOf {
    /**
     * 
     * @type {ReferenceEntityAllOfLinks}
     * @memberof ReferenceEntityAllOf
     */
    '_links'?: ReferenceEntityAllOfLinks;
}
/**
 * 
 * @export
 * @interface ReferenceEntityAllOf1
 */
export interface ReferenceEntityAllOf1 {
    /**
     * Reference entity code
     * @type {string}
     * @memberof ReferenceEntityAllOf1
     */
    'code': string;
    /**
     * 
     * @type {ReferenceEntityAllOf1Labels}
     * @memberof ReferenceEntityAllOf1
     */
    'labels'?: ReferenceEntityAllOf1Labels;
    /**
     * Code of the reference entity image
     * @type {string}
     * @memberof ReferenceEntityAllOf1
     */
    'image'?: string;
}
/**
 * Reference entity labels for each locale
 * @export
 * @interface ReferenceEntityAllOf1Labels
 */
export interface ReferenceEntityAllOf1Labels {
    /**
     * Reference entity label for the locale `localeCode`
     * @type {string}
     * @memberof ReferenceEntityAllOf1Labels
     */
    'localeCode'?: string;
}
/**
 * 
 * @export
 * @interface ReferenceEntityAllOfLinks
 */
export interface ReferenceEntityAllOfLinks {
    /**
     * 
     * @type {ReferenceEntityAllOfLinksImageDownload}
     * @memberof ReferenceEntityAllOfLinks
     */
    'image_download'?: ReferenceEntityAllOfLinksImageDownload;
}
/**
 * 
 * @export
 * @interface ReferenceEntityAllOfLinksImageDownload
 */
export interface ReferenceEntityAllOfLinksImageDownload {
    /**
     * URI to download the binaries of the reference entity image file
     * @type {string}
     * @memberof ReferenceEntityAllOfLinksImageDownload
     */
    'href'?: string;
}
/**
 * 
 * @export
 * @interface ReferenceEntityAttribute
 */
export interface ReferenceEntityAttribute {
    /**
     * Attribute code
     * @type {string}
     * @memberof ReferenceEntityAttribute
     */
    'code': string;
    /**
     * 
     * @type {PostAttributesRequestLabels}
     * @memberof ReferenceEntityAttribute
     */
    'labels'?: PostAttributesRequestLabels;
    /**
     * Attribute type. See <a href=\'/concepts/reference-entities.html#reference-entity-attribute\'>type</a> section for more details.
     * @type {string}
     * @memberof ReferenceEntityAttribute
     */
    'type': ReferenceEntityAttributeTypeEnum;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     * @type {boolean}
     * @memberof ReferenceEntityAttribute
     */
    'value_per_locale'?: boolean;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     * @type {boolean}
     * @memberof ReferenceEntityAttribute
     */
    'value_per_channel'?: boolean;
    /**
     * Whether the attribute should be part of the record\'s completeness calculation
     * @type {boolean}
     * @memberof ReferenceEntityAttribute
     */
    'is_required_for_completeness'?: boolean;
    /**
     * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
     * @type {number}
     * @memberof ReferenceEntityAttribute
     */
    'max_characters'?: number;
    /**
     * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
     * @type {boolean}
     * @memberof ReferenceEntityAttribute
     */
    'is_textarea'?: boolean;
    /**
     * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
     * @type {boolean}
     * @memberof ReferenceEntityAttribute
     */
    'is_rich_text_editor'?: boolean;
    /**
     * Validation rule type used to validate the attribute value when the attribute type is `text`
     * @type {string}
     * @memberof ReferenceEntityAttribute
     */
    'validation_rule'?: ReferenceEntityAttributeValidationRuleEnum;
    /**
     * Regexp expression used to validate the attribute value when the attribute type is `text`
     * @type {string}
     * @memberof ReferenceEntityAttribute
     */
    'validation_regexp'?: string;
    /**
     * Extensions allowed when the attribute type is `image`
     * @type {Array<string>}
     * @memberof ReferenceEntityAttribute
     */
    'allowed_extensions'?: Array<string>;
    /**
     * Max file size in MB when the attribute type is `image`
     * @type {string}
     * @memberof ReferenceEntityAttribute
     */
    'max_file_size'?: string;
    /**
     * Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`
     * @type {string}
     * @memberof ReferenceEntityAttribute
     */
    'reference_entity_code'?: string;
    /**
     * Whether decimals are allowed when the attribute type is `number`
     * @type {boolean}
     * @memberof ReferenceEntityAttribute
     */
    'decimals_allowed'?: boolean;
    /**
     * Minimum value allowed when the attribute type is `number`
     * @type {string}
     * @memberof ReferenceEntityAttribute
     */
    'min_value'?: string;
    /**
     * Maximum value allowed when the attribute type is `number`
     * @type {string}
     * @memberof ReferenceEntityAttribute
     */
    'max_value'?: string;
}

export const ReferenceEntityAttributeTypeEnum = {
    Text: 'text',
    Image: 'image',
    Number: 'number',
    SingleOption: 'single_option',
    MultipleOptions: 'multiple_options',
    ReferenceEntitySingleLink: 'reference_entity_single_link',
    ReferenceEntityMultipleLinks: 'reference_entity_multiple_links'
} as const;

export type ReferenceEntityAttributeTypeEnum = typeof ReferenceEntityAttributeTypeEnum[keyof typeof ReferenceEntityAttributeTypeEnum];
export const ReferenceEntityAttributeValidationRuleEnum = {
    Email: 'email',
    Url: 'url',
    Regexp: 'regexp',
    None: 'none'
} as const;

export type ReferenceEntityAttributeValidationRuleEnum = typeof ReferenceEntityAttributeValidationRuleEnum[keyof typeof ReferenceEntityAttributeValidationRuleEnum];

/**
 * 
 * @export
 * @interface ReferenceEntityAttributeOption
 */
export interface ReferenceEntityAttributeOption {
    /**
     * Attribute\'s option code
     * @type {string}
     * @memberof ReferenceEntityAttributeOption
     */
    'code': string;
    /**
     * 
     * @type {PostAttributesRequestLabels}
     * @memberof ReferenceEntityAttributeOption
     */
    'labels'?: PostAttributesRequestLabels;
}
/**
 * 
 * @export
 * @interface ReferenceEntityItemList
 */
export interface ReferenceEntityItemList {
    /**
     * 
     * @type {ReferenceEntityItemListLinks}
     * @memberof ReferenceEntityItemList
     */
    '_links'?: ReferenceEntityItemListLinks;
}
/**
 * 
 * @export
 * @interface ReferenceEntityItemListLinks
 */
export interface ReferenceEntityItemListLinks {
    /**
     * 
     * @type {AssetFamilyItemListLinksSelf}
     * @memberof ReferenceEntityItemListLinks
     */
    'self'?: AssetFamilyItemListLinksSelf;
    /**
     * 
     * @type {GetReferenceEntitiesCode200ResponseLinksImageDownload}
     * @memberof ReferenceEntityItemListLinks
     */
    'image_download'?: GetReferenceEntitiesCode200ResponseLinksImageDownload;
}
/**
 * 
 * @export
 * @interface ReferenceEntityList
 */
export interface ReferenceEntityList {
    /**
     * 
     * @type {ReferenceEntityListAllOfLinks}
     * @memberof ReferenceEntityList
     */
    '_links'?: ReferenceEntityListAllOfLinks;
    /**
     * Reference entity code
     * @type {string}
     * @memberof ReferenceEntityList
     */
    'code': string;
    /**
     * 
     * @type {ReferenceEntityAllOf1Labels}
     * @memberof ReferenceEntityList
     */
    'labels'?: ReferenceEntityAllOf1Labels;
    /**
     * Code of the reference entity image
     * @type {string}
     * @memberof ReferenceEntityList
     */
    'image'?: string;
}
/**
 * 
 * @export
 * @interface ReferenceEntityListAllOf
 */
export interface ReferenceEntityListAllOf {
    /**
     * 
     * @type {ReferenceEntityListAllOfLinks}
     * @memberof ReferenceEntityListAllOf
     */
    '_links'?: ReferenceEntityListAllOfLinks;
}
/**
 * 
 * @export
 * @interface ReferenceEntityListAllOfLinks
 */
export interface ReferenceEntityListAllOfLinks {
    /**
     * 
     * @type {ProductListAllOfLinksSelf}
     * @memberof ReferenceEntityListAllOfLinks
     */
    'self'?: ProductListAllOfLinksSelf;
    /**
     * 
     * @type {ReferenceEntityAllOfLinksImageDownload}
     * @memberof ReferenceEntityListAllOfLinks
     */
    'image_download'?: ReferenceEntityAllOfLinksImageDownload;
}
/**
 * 
 * @export
 * @interface ReferenceEntityRecord
 */
export interface ReferenceEntityRecord {
    /**
     * 
     * @type {ReferenceEntitiesLinks}
     * @memberof ReferenceEntityRecord
     */
    '_links'?: ReferenceEntitiesLinks;
}
/**
 * 
 * @export
 * @interface ReferenceEntityRecordItemList
 */
export interface ReferenceEntityRecordItemList {
    /**
     * 
     * @type {AssetFamilyItemListLinks}
     * @memberof ReferenceEntityRecordItemList
     */
    '_links'?: AssetFamilyItemListLinks;
}
/**
 * 
 * @export
 * @interface ReferenceEntityRecordList
 */
export interface ReferenceEntityRecordList {
    /**
     * 
     * @type {ProductListAllOfLinks}
     * @memberof ReferenceEntityRecordList
     */
    '_links'?: ProductListAllOfLinks;
    /**
     * Code of the record
     * @type {string}
     * @memberof ReferenceEntityRecordList
     */
    'code': string;
    /**
     * 
     * @type {ReferenceEntityRecordListAllOfValues}
     * @memberof ReferenceEntityRecordList
     */
    'values'?: ReferenceEntityRecordListAllOfValues;
    /**
     * Date of creation.
     * @type {string}
     * @memberof ReferenceEntityRecordList
     */
    'created'?: string;
    /**
     * Date of the last update.
     * @type {string}
     * @memberof ReferenceEntityRecordList
     */
    'updated'?: string;
}
/**
 * 
 * @export
 * @interface ReferenceEntityRecordListAllOf
 */
export interface ReferenceEntityRecordListAllOf {
    /**
     * Code of the record
     * @type {string}
     * @memberof ReferenceEntityRecordListAllOf
     */
    'code': string;
    /**
     * 
     * @type {ReferenceEntityRecordListAllOfValues}
     * @memberof ReferenceEntityRecordListAllOf
     */
    'values'?: ReferenceEntityRecordListAllOfValues;
    /**
     * Date of creation.
     * @type {string}
     * @memberof ReferenceEntityRecordListAllOf
     */
    'created'?: string;
    /**
     * Date of the last update.
     * @type {string}
     * @memberof ReferenceEntityRecordListAllOf
     */
    'updated'?: string;
}
/**
 * Record attributes values, see <a href=\'/concepts/reference-entities.html#focus-on-the-reference-entity-record-values\'>Reference entity record values</a> section for more details
 * @export
 * @interface ReferenceEntityRecordListAllOfValues
 */
export interface ReferenceEntityRecordListAllOfValues {
    /**
     * 
     * @type {Array<ReferenceEntityRecordListAllOfValuesAttributeCode>}
     * @memberof ReferenceEntityRecordListAllOfValues
     */
    'attributeCode'?: Array<ReferenceEntityRecordListAllOfValuesAttributeCode>;
}
/**
 * 
 * @export
 * @interface ReferenceEntityRecordListAllOfValuesAttributeCode
 */
export interface ReferenceEntityRecordListAllOfValuesAttributeCode {
    /**
     * Channel code of the reference entity record value
     * @type {string}
     * @memberof ReferenceEntityRecordListAllOfValuesAttributeCode
     */
    'channel'?: string;
    /**
     * Locale code of the reference entity record value
     * @type {string}
     * @memberof ReferenceEntityRecordListAllOfValuesAttributeCode
     */
    'locale'?: string;
    /**
     * Reference entity record value. See <a href=\'/concepts/reference-entities.html#the-data-format\'>the `data` format</a> section for more details.
     * @type {object}
     * @memberof ReferenceEntityRecordListAllOfValuesAttributeCode
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface SearchAfterPagination
 */
export interface SearchAfterPagination {
    /**
     * 
     * @type {ReferenceEntitiesLinks}
     * @memberof SearchAfterPagination
     */
    '_links'?: ReferenceEntitiesLinks;
}
/**
 * 
 * @export
 * @interface SeveralAssociationTypesPatchRequest
 */
export interface SeveralAssociationTypesPatchRequest {
    /**
     * Association type code
     * @type {string}
     * @memberof SeveralAssociationTypesPatchRequest
     */
    'code': string;
    /**
     * 
     * @type {AssociationTypesPostRequestLabels}
     * @memberof SeveralAssociationTypesPatchRequest
     */
    'labels'?: AssociationTypesPostRequestLabels;
    /**
     * When true, the association is a quantified association (Only available in the PIM Serenity version.)
     * @type {boolean}
     * @memberof SeveralAssociationTypesPatchRequest
     */
    'is_quantified'?: boolean;
    /**
     * When true, the association is a two-way association (Only available in the PIM Serenity version.)
     * @type {boolean}
     * @memberof SeveralAssociationTypesPatchRequest
     */
    'is_two_way'?: boolean;
}
/**
 * 
 * @export
 * @interface SeveralAttributeGroupsPatchRequest
 */
export interface SeveralAttributeGroupsPatchRequest {
    /**
     * Attribute group code
     * @type {string}
     * @memberof SeveralAttributeGroupsPatchRequest
     */
    'code': string;
    /**
     * Attribute group order among other attribute groups
     * @type {number}
     * @memberof SeveralAttributeGroupsPatchRequest
     */
    'sort_order'?: number;
    /**
     * Attribute codes that compose the attribute group
     * @type {Array<string>}
     * @memberof SeveralAttributeGroupsPatchRequest
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {AttributeGroupsPostRequestLabels}
     * @memberof SeveralAttributeGroupsPatchRequest
     */
    'labels'?: AttributeGroupsPostRequestLabels;
}
/**
 * 
 * @export
 * @interface SeveralChannelsPatchRequest
 */
export interface SeveralChannelsPatchRequest {
    /**
     * Channel code
     * @type {string}
     * @memberof SeveralChannelsPatchRequest
     */
    'code': string;
    /**
     * Codes of activated locales for the channel
     * @type {Array<string>}
     * @memberof SeveralChannelsPatchRequest
     */
    'locales': Array<string>;
    /**
     * Codes of activated currencies for the channel
     * @type {Array<string>}
     * @memberof SeveralChannelsPatchRequest
     */
    'currencies': Array<string>;
    /**
     * Code of the category tree linked to the channel
     * @type {string}
     * @memberof SeveralChannelsPatchRequest
     */
    'category_tree': string;
    /**
     * 
     * @type {ChannelsPostRequestConversionUnits}
     * @memberof SeveralChannelsPatchRequest
     */
    'conversion_units'?: ChannelsPostRequestConversionUnits;
    /**
     * 
     * @type {ChannelsPostRequestLabels}
     * @memberof SeveralChannelsPatchRequest
     */
    'labels'?: ChannelsPostRequestLabels;
}

/**
 * AssetApi - axios parameter creator
 * @export
 */
export const AssetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to delete a given asset. This endpoint is case sensitive on the asset family code.
         * @summary Delete an asset
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssetsCode: async (assetFamilyCode: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetFamilyCode' is not null or undefined
            assertParamExists('deleteAssetsCode', 'assetFamilyCode', assetFamilyCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteAssetsCode', 'code', code)
            const localVarPath = `/api/rest/v1/asset-families/{asset_family_code}/assets/{code}`
                .replace(`{${"asset_family_code"}}`, encodeURIComponent(String(assetFamilyCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get a list of assets of a given asset family. Assets are paginated. This endpoint is case sensitive on the asset family code.
         * @summary Get the list of the assets of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} [search] Filter assets, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-assets\&quot;&gt;Asset filters&lt;/a&gt; section
         * @param {string} [channel] Filter asset values to return scopable asset attributes for the given channel as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-channel\&quot;&gt;Filter asset values by channel&lt;/a&gt; section
         * @param {string} [locales] Filter asset values to return localizable attributes for the given locales as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-locale\&quot;&gt;Filter asset values by locale&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssets: async (assetFamilyCode: string, search?: string, channel?: string, locales?: string, searchAfter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetFamilyCode' is not null or undefined
            assertParamExists('getAssets', 'assetFamilyCode', assetFamilyCode)
            const localVarPath = `/api/rest/v1/asset-families/{asset_family_code}/assets`
                .replace(`{${"asset_family_code"}}`, encodeURIComponent(String(assetFamilyCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (locales !== undefined) {
                localVarQueryParameter['locales'] = locales;
            }

            if (searchAfter !== undefined) {
                localVarQueryParameter['search_after'] = searchAfter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given asset for a given asset family. This endpoint is case sensitive on the asset family code.
         * @summary Get an asset of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetsCode: async (assetFamilyCode: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetFamilyCode' is not null or undefined
            assertParamExists('getAssetsCode', 'assetFamilyCode', assetFamilyCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getAssetsCode', 'code', code)
            const localVarPath = `/api/rest/v1/asset-families/{asset_family_code}/assets/{code}`
                .replace(`{${"asset_family_code"}}`, encodeURIComponent(String(assetFamilyCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given asset of a given asset family. Learn more about the <a href=\"/documentation/update.html#patch-asset-attribute-values\">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
         * @summary Update/create an asset
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {PatchAssetCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetCode: async (assetFamilyCode: string, code: string, body: PatchAssetCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetFamilyCode' is not null or undefined
            assertParamExists('patchAssetCode', 'assetFamilyCode', assetFamilyCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchAssetCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchAssetCode', 'body', body)
            const localVarPath = `/api/rest/v1/asset-families/{asset_family_code}/assets/{code}`
                .replace(`{${"asset_family_code"}}`, encodeURIComponent(String(assetFamilyCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update and/or create several assets of one given asset family at once. Learn more about the <a href=\"/documentation/update.html#patch-asset-attribute-values\">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
         * @summary Update/create several assets
         * @param {string} assetFamilyCode Code of the asset family
         * @param {Array<PatchAssetsRequestInner>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssets: async (assetFamilyCode: string, body: Array<PatchAssetsRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetFamilyCode' is not null or undefined
            assertParamExists('patchAssets', 'assetFamilyCode', assetFamilyCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchAssets', 'body', body)
            const localVarPath = `/api/rest/v1/asset-families/{asset_family_code}/assets`
                .replace(`{${"asset_family_code"}}`, encodeURIComponent(String(assetFamilyCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetApi - functional programming interface
 * @export
 */
export const AssetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to delete a given asset. This endpoint is case sensitive on the asset family code.
         * @summary Delete an asset
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssetsCode(assetFamilyCode: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssetsCode(assetFamilyCode, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get a list of assets of a given asset family. Assets are paginated. This endpoint is case sensitive on the asset family code.
         * @summary Get the list of the assets of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} [search] Filter assets, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-assets\&quot;&gt;Asset filters&lt;/a&gt; section
         * @param {string} [channel] Filter asset values to return scopable asset attributes for the given channel as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-channel\&quot;&gt;Filter asset values by channel&lt;/a&gt; section
         * @param {string} [locales] Filter asset values to return localizable attributes for the given locales as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-locale\&quot;&gt;Filter asset values by locale&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssets(assetFamilyCode: string, search?: string, channel?: string, locales?: string, searchAfter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Asset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssets(assetFamilyCode, search, channel, locales, searchAfter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given asset for a given asset family. This endpoint is case sensitive on the asset family code.
         * @summary Get an asset of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetsCode(assetFamilyCode: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchAssetsRequestInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetsCode(assetFamilyCode, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given asset of a given asset family. Learn more about the <a href=\"/documentation/update.html#patch-asset-attribute-values\">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
         * @summary Update/create an asset
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {PatchAssetCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssetCode(assetFamilyCode: string, code: string, body: PatchAssetCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssetCode(assetFamilyCode, code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update and/or create several assets of one given asset family at once. Learn more about the <a href=\"/documentation/update.html#patch-asset-attribute-values\">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
         * @summary Update/create several assets
         * @param {string} assetFamilyCode Code of the asset family
         * @param {Array<PatchAssetsRequestInner>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssets(assetFamilyCode: string, body: Array<PatchAssetsRequestInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatchReferenceEntityRecords200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssets(assetFamilyCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssetApi - factory interface
 * @export
 */
export const AssetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetApiFp(configuration)
    return {
        /**
         * This endpoint allows you to delete a given asset. This endpoint is case sensitive on the asset family code.
         * @summary Delete an asset
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssetsCode(assetFamilyCode: string, code: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAssetsCode(assetFamilyCode, code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get a list of assets of a given asset family. Assets are paginated. This endpoint is case sensitive on the asset family code.
         * @summary Get the list of the assets of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} [search] Filter assets, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-assets\&quot;&gt;Asset filters&lt;/a&gt; section
         * @param {string} [channel] Filter asset values to return scopable asset attributes for the given channel as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-channel\&quot;&gt;Filter asset values by channel&lt;/a&gt; section
         * @param {string} [locales] Filter asset values to return localizable attributes for the given locales as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-locale\&quot;&gt;Filter asset values by locale&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssets(assetFamilyCode: string, search?: string, channel?: string, locales?: string, searchAfter?: string, options?: any): AxiosPromise<Asset> {
            return localVarFp.getAssets(assetFamilyCode, search, channel, locales, searchAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given asset for a given asset family. This endpoint is case sensitive on the asset family code.
         * @summary Get an asset of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetsCode(assetFamilyCode: string, code: string, options?: any): AxiosPromise<PatchAssetsRequestInner> {
            return localVarFp.getAssetsCode(assetFamilyCode, code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given asset of a given asset family. Learn more about the <a href=\"/documentation/update.html#patch-asset-attribute-values\">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
         * @summary Update/create an asset
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {PatchAssetCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetCode(assetFamilyCode: string, code: string, body: PatchAssetCodeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchAssetCode(assetFamilyCode, code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update and/or create several assets of one given asset family at once. Learn more about the <a href=\"/documentation/update.html#patch-asset-attribute-values\">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
         * @summary Update/create several assets
         * @param {string} assetFamilyCode Code of the asset family
         * @param {Array<PatchAssetsRequestInner>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssets(assetFamilyCode: string, body: Array<PatchAssetsRequestInner>, options?: any): AxiosPromise<Array<PatchReferenceEntityRecords200ResponseInner>> {
            return localVarFp.patchAssets(assetFamilyCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetApi - object-oriented interface
 * @export
 * @class AssetApi
 * @extends {BaseAPI}
 */
export class AssetApi extends BaseAPI {
    /**
     * This endpoint allows you to delete a given asset. This endpoint is case sensitive on the asset family code.
     * @summary Delete an asset
     * @param {string} assetFamilyCode Code of the asset family
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public deleteAssetsCode(assetFamilyCode: string, code: string, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).deleteAssetsCode(assetFamilyCode, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get a list of assets of a given asset family. Assets are paginated. This endpoint is case sensitive on the asset family code.
     * @summary Get the list of the assets of a given asset family
     * @param {string} assetFamilyCode Code of the asset family
     * @param {string} [search] Filter assets, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-assets\&quot;&gt;Asset filters&lt;/a&gt; section
     * @param {string} [channel] Filter asset values to return scopable asset attributes for the given channel as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-channel\&quot;&gt;Filter asset values by channel&lt;/a&gt; section
     * @param {string} [locales] Filter asset values to return localizable attributes for the given locales as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-locale\&quot;&gt;Filter asset values by locale&lt;/a&gt; section
     * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public getAssets(assetFamilyCode: string, search?: string, channel?: string, locales?: string, searchAfter?: string, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).getAssets(assetFamilyCode, search, channel, locales, searchAfter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given asset for a given asset family. This endpoint is case sensitive on the asset family code.
     * @summary Get an asset of a given asset family
     * @param {string} assetFamilyCode Code of the asset family
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public getAssetsCode(assetFamilyCode: string, code: string, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).getAssetsCode(assetFamilyCode, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given asset of a given asset family. Learn more about the <a href=\"/documentation/update.html#patch-asset-attribute-values\">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
     * @summary Update/create an asset
     * @param {string} assetFamilyCode Code of the asset family
     * @param {string} code Code of the resource
     * @param {PatchAssetCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public patchAssetCode(assetFamilyCode: string, code: string, body: PatchAssetCodeRequest, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).patchAssetCode(assetFamilyCode, code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update and/or create several assets of one given asset family at once. Learn more about the <a href=\"/documentation/update.html#patch-asset-attribute-values\">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
     * @summary Update/create several assets
     * @param {string} assetFamilyCode Code of the asset family
     * @param {Array<PatchAssetsRequestInner>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public patchAssets(assetFamilyCode: string, body: Array<PatchAssetsRequestInner>, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).patchAssets(assetFamilyCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AssetAttributeApi - axios parameter creator
 * @export
 */
export const AssetAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get the list of attributes of a given asset family.
         * @summary Get the list of attributes of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetFamiliesCodeAttributes: async (assetFamilyCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetFamilyCode' is not null or undefined
            assertParamExists('getAssetFamiliesCodeAttributes', 'assetFamilyCode', assetFamilyCode)
            const localVarPath = `/api/rest/v1/asset-families/{asset_family_code}/attributes`
                .replace(`{${"asset_family_code"}}`, encodeURIComponent(String(assetFamilyCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given attribute for a given asset family.
         * @summary Get an attribute of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetFamilyAttributesCode: async (assetFamilyCode: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetFamilyCode' is not null or undefined
            assertParamExists('getAssetFamilyAttributesCode', 'assetFamilyCode', assetFamilyCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getAssetFamilyAttributesCode', 'code', code)
            const localVarPath = `/api/rest/v1/asset-families/{asset_family_code}/attributes/{code}`
                .replace(`{${"asset_family_code"}}`, encodeURIComponent(String(assetFamilyCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given attribute for a given asset family. Note that if the attribute does not already exist for the given asset family, it creates it.
         * @summary Update/create an attribute of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {GetAssetFamiliesCodeAttributes200ResponseInner} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetFamilyAttributesCode: async (assetFamilyCode: string, code: string, body: GetAssetFamiliesCodeAttributes200ResponseInner, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetFamilyCode' is not null or undefined
            assertParamExists('patchAssetFamilyAttributesCode', 'assetFamilyCode', assetFamilyCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchAssetFamilyAttributesCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchAssetFamilyAttributesCode', 'body', body)
            const localVarPath = `/api/rest/v1/asset-families/{asset_family_code}/attributes/{code}`
                .replace(`{${"asset_family_code"}}`, encodeURIComponent(String(assetFamilyCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetAttributeApi - functional programming interface
 * @export
 */
export const AssetAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get the list of attributes of a given asset family.
         * @summary Get the list of attributes of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetFamiliesCodeAttributes(assetFamilyCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAssetFamiliesCodeAttributes200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetFamiliesCodeAttributes(assetFamilyCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given attribute for a given asset family.
         * @summary Get an attribute of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetFamilyAttributesCode(assetFamilyCode: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAssetFamiliesCodeAttributes200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetFamilyAttributesCode(assetFamilyCode, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given attribute for a given asset family. Note that if the attribute does not already exist for the given asset family, it creates it.
         * @summary Update/create an attribute of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {GetAssetFamiliesCodeAttributes200ResponseInner} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssetFamilyAttributesCode(assetFamilyCode: string, code: string, body: GetAssetFamiliesCodeAttributes200ResponseInner, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssetFamilyAttributesCode(assetFamilyCode, code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssetAttributeApi - factory interface
 * @export
 */
export const AssetAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetAttributeApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get the list of attributes of a given asset family.
         * @summary Get the list of attributes of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetFamiliesCodeAttributes(assetFamilyCode: string, options?: any): AxiosPromise<Array<GetAssetFamiliesCodeAttributes200ResponseInner>> {
            return localVarFp.getAssetFamiliesCodeAttributes(assetFamilyCode, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given attribute for a given asset family.
         * @summary Get an attribute of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetFamilyAttributesCode(assetFamilyCode: string, code: string, options?: any): AxiosPromise<GetAssetFamiliesCodeAttributes200ResponseInner> {
            return localVarFp.getAssetFamilyAttributesCode(assetFamilyCode, code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given attribute for a given asset family. Note that if the attribute does not already exist for the given asset family, it creates it.
         * @summary Update/create an attribute of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} code Code of the resource
         * @param {GetAssetFamiliesCodeAttributes200ResponseInner} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetFamilyAttributesCode(assetFamilyCode: string, code: string, body: GetAssetFamiliesCodeAttributes200ResponseInner, options?: any): AxiosPromise<void> {
            return localVarFp.patchAssetFamilyAttributesCode(assetFamilyCode, code, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetAttributeApi - object-oriented interface
 * @export
 * @class AssetAttributeApi
 * @extends {BaseAPI}
 */
export class AssetAttributeApi extends BaseAPI {
    /**
     * This endpoint allows you to get the list of attributes of a given asset family.
     * @summary Get the list of attributes of a given asset family
     * @param {string} assetFamilyCode Code of the asset family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAttributeApi
     */
    public getAssetFamiliesCodeAttributes(assetFamilyCode: string, options?: AxiosRequestConfig) {
        return AssetAttributeApiFp(this.configuration).getAssetFamiliesCodeAttributes(assetFamilyCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given attribute for a given asset family.
     * @summary Get an attribute of a given asset family
     * @param {string} assetFamilyCode Code of the asset family
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAttributeApi
     */
    public getAssetFamilyAttributesCode(assetFamilyCode: string, code: string, options?: AxiosRequestConfig) {
        return AssetAttributeApiFp(this.configuration).getAssetFamilyAttributesCode(assetFamilyCode, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given attribute for a given asset family. Note that if the attribute does not already exist for the given asset family, it creates it.
     * @summary Update/create an attribute of a given asset family
     * @param {string} assetFamilyCode Code of the asset family
     * @param {string} code Code of the resource
     * @param {GetAssetFamiliesCodeAttributes200ResponseInner} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAttributeApi
     */
    public patchAssetFamilyAttributesCode(assetFamilyCode: string, code: string, body: GetAssetFamiliesCodeAttributes200ResponseInner, options?: AxiosRequestConfig) {
        return AssetAttributeApiFp(this.configuration).patchAssetFamilyAttributesCode(assetFamilyCode, code, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AssetAttributeOptionApi - axios parameter creator
 * @export
 */
export const AssetAttributeOptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get the information about a given asset attribute option.
         * @summary Get an attribute option for a given attribute of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetAttributesAttributeCodeOptionsCode: async (assetFamilyCode: string, attributeCode: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetFamilyCode' is not null or undefined
            assertParamExists('getAssetAttributesAttributeCodeOptionsCode', 'assetFamilyCode', assetFamilyCode)
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('getAssetAttributesAttributeCodeOptionsCode', 'attributeCode', attributeCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getAssetAttributesAttributeCodeOptionsCode', 'code', code)
            const localVarPath = `/api/rest/v1/asset-families/{asset_family_code}/attributes/{attribute_code}/options/{code}`
                .replace(`{${"asset_family_code"}}`, encodeURIComponent(String(assetFamilyCode)))
                .replace(`{${"attribute_code"}}`, encodeURIComponent(String(attributeCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get a list of attribute options for a given asset family.
         * @summary Get a list of attribute options of a given attribute for a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} attributeCode Code of the attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetFamilyAttributesAttributeCodeOptions: async (assetFamilyCode: string, attributeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetFamilyCode' is not null or undefined
            assertParamExists('getAssetFamilyAttributesAttributeCodeOptions', 'assetFamilyCode', assetFamilyCode)
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('getAssetFamilyAttributesAttributeCodeOptions', 'attributeCode', attributeCode)
            const localVarPath = `/api/rest/v1/asset-families/{asset_family_code}/attributes/{attribute_code}/options`
                .replace(`{${"asset_family_code"}}`, encodeURIComponent(String(assetFamilyCode)))
                .replace(`{${"attribute_code"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given option for a given attribute and a given asset family. Learn more about the <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given asset family, it creates it.
         * @summary Update/create an asset attribute option for a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetAttributesAttributeCodeOptionsCode: async (assetFamilyCode: string, attributeCode: string, code: string, body: GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetFamilyCode' is not null or undefined
            assertParamExists('patchAssetAttributesAttributeCodeOptionsCode', 'assetFamilyCode', assetFamilyCode)
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('patchAssetAttributesAttributeCodeOptionsCode', 'attributeCode', attributeCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchAssetAttributesAttributeCodeOptionsCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchAssetAttributesAttributeCodeOptionsCode', 'body', body)
            const localVarPath = `/api/rest/v1/asset-families/{asset_family_code}/attributes/{attribute_code}/options/{code}`
                .replace(`{${"asset_family_code"}}`, encodeURIComponent(String(assetFamilyCode)))
                .replace(`{${"attribute_code"}}`, encodeURIComponent(String(attributeCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetAttributeOptionApi - functional programming interface
 * @export
 */
export const AssetAttributeOptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetAttributeOptionApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get the information about a given asset attribute option.
         * @summary Get an attribute option for a given attribute of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetAttributesAttributeCodeOptionsCode(assetFamilyCode: string, attributeCode: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetAttributesAttributeCodeOptionsCode(assetFamilyCode, attributeCode, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get a list of attribute options for a given asset family.
         * @summary Get a list of attribute options of a given attribute for a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} attributeCode Code of the attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetFamilyAttributesAttributeCodeOptions(assetFamilyCode: string, attributeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetFamilyAttributesAttributeCodeOptions(assetFamilyCode, attributeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given option for a given attribute and a given asset family. Learn more about the <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given asset family, it creates it.
         * @summary Update/create an asset attribute option for a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssetAttributesAttributeCodeOptionsCode(assetFamilyCode: string, attributeCode: string, code: string, body: GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssetAttributesAttributeCodeOptionsCode(assetFamilyCode, attributeCode, code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssetAttributeOptionApi - factory interface
 * @export
 */
export const AssetAttributeOptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetAttributeOptionApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get the information about a given asset attribute option.
         * @summary Get an attribute option for a given attribute of a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetAttributesAttributeCodeOptionsCode(assetFamilyCode: string, attributeCode: string, code: string, options?: any): AxiosPromise<GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner> {
            return localVarFp.getAssetAttributesAttributeCodeOptionsCode(assetFamilyCode, attributeCode, code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get a list of attribute options for a given asset family.
         * @summary Get a list of attribute options of a given attribute for a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} attributeCode Code of the attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetFamilyAttributesAttributeCodeOptions(assetFamilyCode: string, attributeCode: string, options?: any): AxiosPromise<Array<GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner>> {
            return localVarFp.getAssetFamilyAttributesAttributeCodeOptions(assetFamilyCode, attributeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given option for a given attribute and a given asset family. Learn more about the <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given asset family, it creates it.
         * @summary Update/create an asset attribute option for a given asset family
         * @param {string} assetFamilyCode Code of the asset family
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetAttributesAttributeCodeOptionsCode(assetFamilyCode: string, attributeCode: string, code: string, body: GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner, options?: any): AxiosPromise<void> {
            return localVarFp.patchAssetAttributesAttributeCodeOptionsCode(assetFamilyCode, attributeCode, code, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetAttributeOptionApi - object-oriented interface
 * @export
 * @class AssetAttributeOptionApi
 * @extends {BaseAPI}
 */
export class AssetAttributeOptionApi extends BaseAPI {
    /**
     * This endpoint allows you to get the information about a given asset attribute option.
     * @summary Get an attribute option for a given attribute of a given asset family
     * @param {string} assetFamilyCode Code of the asset family
     * @param {string} attributeCode Code of the attribute
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAttributeOptionApi
     */
    public getAssetAttributesAttributeCodeOptionsCode(assetFamilyCode: string, attributeCode: string, code: string, options?: AxiosRequestConfig) {
        return AssetAttributeOptionApiFp(this.configuration).getAssetAttributesAttributeCodeOptionsCode(assetFamilyCode, attributeCode, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get a list of attribute options for a given asset family.
     * @summary Get a list of attribute options of a given attribute for a given asset family
     * @param {string} assetFamilyCode Code of the asset family
     * @param {string} attributeCode Code of the attribute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAttributeOptionApi
     */
    public getAssetFamilyAttributesAttributeCodeOptions(assetFamilyCode: string, attributeCode: string, options?: AxiosRequestConfig) {
        return AssetAttributeOptionApiFp(this.configuration).getAssetFamilyAttributesAttributeCodeOptions(assetFamilyCode, attributeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given option for a given attribute and a given asset family. Learn more about the <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given asset family, it creates it.
     * @summary Update/create an asset attribute option for a given asset family
     * @param {string} assetFamilyCode Code of the asset family
     * @param {string} attributeCode Code of the attribute
     * @param {string} code Code of the resource
     * @param {GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAttributeOptionApi
     */
    public patchAssetAttributesAttributeCodeOptionsCode(assetFamilyCode: string, attributeCode: string, code: string, body: GetAssetFamilyAttributesAttributeCodeOptions200ResponseInner, options?: AxiosRequestConfig) {
        return AssetAttributeOptionApiFp(this.configuration).patchAssetAttributesAttributeCodeOptionsCode(assetFamilyCode, attributeCode, code, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AssetFamilyApi - axios parameter creator
 * @export
 */
export const AssetFamilyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of asset families. Asset families are paginated.
         * @summary Get list of asset families
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetFamilies: async (searchAfter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/asset-families`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchAfter !== undefined) {
                localVarQueryParameter['search_after'] = searchAfter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given asset family.
         * @summary Get an asset family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetFamilyCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getAssetFamilyCode', 'code', code)
            const localVarPath = `/api/rest/v1/asset-families/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given asset family. Note that if the asset family does not already exist, it creates it.
         * @summary Update/create an asset family
         * @param {string} code Code of the resource
         * @param {PatchAssetFamilyCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetFamilyCode: async (code: string, body: PatchAssetFamilyCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchAssetFamilyCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchAssetFamilyCode', 'body', body)
            const localVarPath = `/api/rest/v1/asset-families/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetFamilyApi - functional programming interface
 * @export
 */
export const AssetFamilyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetFamilyApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of asset families. Asset families are paginated.
         * @summary Get list of asset families
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetFamilies(searchAfter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetFamilies>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetFamilies(searchAfter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given asset family.
         * @summary Get an asset family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetFamilyCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAssetFamilyCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetFamilyCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given asset family. Note that if the asset family does not already exist, it creates it.
         * @summary Update/create an asset family
         * @param {string} code Code of the resource
         * @param {PatchAssetFamilyCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssetFamilyCode(code: string, body: PatchAssetFamilyCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssetFamilyCode(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssetFamilyApi - factory interface
 * @export
 */
export const AssetFamilyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetFamilyApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of asset families. Asset families are paginated.
         * @summary Get list of asset families
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetFamilies(searchAfter?: string, options?: any): AxiosPromise<AssetFamilies> {
            return localVarFp.getAssetFamilies(searchAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given asset family.
         * @summary Get an asset family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetFamilyCode(code: string, options?: any): AxiosPromise<GetAssetFamilyCode200Response> {
            return localVarFp.getAssetFamilyCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given asset family. Note that if the asset family does not already exist, it creates it.
         * @summary Update/create an asset family
         * @param {string} code Code of the resource
         * @param {PatchAssetFamilyCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetFamilyCode(code: string, body: PatchAssetFamilyCodeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchAssetFamilyCode(code, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetFamilyApi - object-oriented interface
 * @export
 * @class AssetFamilyApi
 * @extends {BaseAPI}
 */
export class AssetFamilyApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of asset families. Asset families are paginated.
     * @summary Get list of asset families
     * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetFamilyApi
     */
    public getAssetFamilies(searchAfter?: string, options?: AxiosRequestConfig) {
        return AssetFamilyApiFp(this.configuration).getAssetFamilies(searchAfter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given asset family.
     * @summary Get an asset family
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetFamilyApi
     */
    public getAssetFamilyCode(code: string, options?: AxiosRequestConfig) {
        return AssetFamilyApiFp(this.configuration).getAssetFamilyCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given asset family. Note that if the asset family does not already exist, it creates it.
     * @summary Update/create an asset family
     * @param {string} code Code of the resource
     * @param {PatchAssetFamilyCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetFamilyApi
     */
    public patchAssetFamilyCode(code: string, body: PatchAssetFamilyCodeRequest, options?: AxiosRequestConfig) {
        return AssetFamilyApiFp(this.configuration).patchAssetFamilyCode(code, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AssetMediaFileApi - axios parameter creator
 * @export
 */
export const AssetMediaFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to download a given media file that is associated with an asset.
         * @summary Download the media file associated to an asset
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetMediaFilesCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getAssetMediaFilesCode', 'code', code)
            const localVarPath = `/api/rest/v1/asset-media-files/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new media file and associate it to a media file attribute value of an asset.
         * @summary Create a new media file for an asset
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostReferenceEntityMediaFilesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetMediaFiles: async (contentType: string, body?: PostReferenceEntityMediaFilesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postAssetMediaFiles', 'contentType', contentType)
            const localVarPath = `/api/rest/v1/asset-media-files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType != null) {
                localVarHeaderParameter['Content-type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetMediaFileApi - functional programming interface
 * @export
 */
export const AssetMediaFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetMediaFileApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to download a given media file that is associated with an asset.
         * @summary Download the media file associated to an asset
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetMediaFilesCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetMediaFilesCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new media file and associate it to a media file attribute value of an asset.
         * @summary Create a new media file for an asset
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostReferenceEntityMediaFilesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAssetMediaFiles(contentType: string, body?: PostReferenceEntityMediaFilesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAssetMediaFiles(contentType, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssetMediaFileApi - factory interface
 * @export
 */
export const AssetMediaFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetMediaFileApiFp(configuration)
    return {
        /**
         * This endpoint allows you to download a given media file that is associated with an asset.
         * @summary Download the media file associated to an asset
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetMediaFilesCode(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.getAssetMediaFilesCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new media file and associate it to a media file attribute value of an asset.
         * @summary Create a new media file for an asset
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostReferenceEntityMediaFilesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetMediaFiles(contentType: string, body?: PostReferenceEntityMediaFilesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postAssetMediaFiles(contentType, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetMediaFileApi - object-oriented interface
 * @export
 * @class AssetMediaFileApi
 * @extends {BaseAPI}
 */
export class AssetMediaFileApi extends BaseAPI {
    /**
     * This endpoint allows you to download a given media file that is associated with an asset.
     * @summary Download the media file associated to an asset
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetMediaFileApi
     */
    public getAssetMediaFilesCode(code: string, options?: AxiosRequestConfig) {
        return AssetMediaFileApiFp(this.configuration).getAssetMediaFilesCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new media file and associate it to a media file attribute value of an asset.
     * @summary Create a new media file for an asset
     * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
     * @param {PostReferenceEntityMediaFilesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetMediaFileApi
     */
    public postAssetMediaFiles(contentType: string, body?: PostReferenceEntityMediaFilesRequest, options?: AxiosRequestConfig) {
        return AssetMediaFileApiFp(this.configuration).postAssetMediaFiles(contentType, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AssociationTypeApi - axios parameter creator
 * @export
 */
export const AssociationTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get the information about a given association type.
         * @summary Get an association type
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associationTypesGet: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('associationTypesGet', 'code', code)
            const localVarPath = `/api/rest/v1/association-types/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get a list of association types. Association types are paginated and sorted by code.
         * @summary Get a list of association types
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associationTypesGetList: async (page?: number, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/association-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given association type. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no association type exists for the given code, it creates it.
         * @summary Update/create an association type
         * @param {string} code Code of the resource
         * @param {AssociationTypesPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associationTypesPatch: async (code: string, body: AssociationTypesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('associationTypesPatch', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('associationTypesPatch', 'body', body)
            const localVarPath = `/api/rest/v1/association-types/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new association type.
         * @summary Create a new association type
         * @param {AssociationTypesPostRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associationTypesPost: async (body?: AssociationTypesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/association-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update and/or create several association types at once.
         * @summary Update/create several association types
         * @param {SeveralAssociationTypesPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        severalAssociationTypesPatch: async (body?: SeveralAssociationTypesPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/association-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssociationTypeApi - functional programming interface
 * @export
 */
export const AssociationTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssociationTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get the information about a given association type.
         * @summary Get an association type
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async associationTypesGet(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationTypesPostRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.associationTypesGet(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get a list of association types. Association types are paginated and sorted by code.
         * @summary Get a list of association types
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async associationTypesGetList(page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.associationTypesGetList(page, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given association type. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no association type exists for the given code, it creates it.
         * @summary Update/create an association type
         * @param {string} code Code of the resource
         * @param {AssociationTypesPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async associationTypesPatch(code: string, body: AssociationTypesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.associationTypesPatch(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new association type.
         * @summary Create a new association type
         * @param {AssociationTypesPostRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async associationTypesPost(body?: AssociationTypesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.associationTypesPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update and/or create several association types at once.
         * @summary Update/create several association types
         * @param {SeveralAssociationTypesPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async severalAssociationTypesPatch(body?: SeveralAssociationTypesPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.severalAssociationTypesPatch(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssociationTypeApi - factory interface
 * @export
 */
export const AssociationTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssociationTypeApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get the information about a given association type.
         * @summary Get an association type
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associationTypesGet(code: string, options?: any): AxiosPromise<AssociationTypesPostRequest> {
            return localVarFp.associationTypesGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get a list of association types. Association types are paginated and sorted by code.
         * @summary Get a list of association types
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associationTypesGetList(page?: number, limit?: number, withCount?: boolean, options?: any): AxiosPromise<AssociationTypes> {
            return localVarFp.associationTypesGetList(page, limit, withCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given association type. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no association type exists for the given code, it creates it.
         * @summary Update/create an association type
         * @param {string} code Code of the resource
         * @param {AssociationTypesPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associationTypesPatch(code: string, body: AssociationTypesPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.associationTypesPatch(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new association type.
         * @summary Create a new association type
         * @param {AssociationTypesPostRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associationTypesPost(body?: AssociationTypesPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.associationTypesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update and/or create several association types at once.
         * @summary Update/create several association types
         * @param {SeveralAssociationTypesPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        severalAssociationTypesPatch(body?: SeveralAssociationTypesPatchRequest, options?: any): AxiosPromise<PatchProducts200Response> {
            return localVarFp.severalAssociationTypesPatch(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssociationTypeApi - object-oriented interface
 * @export
 * @class AssociationTypeApi
 * @extends {BaseAPI}
 */
export class AssociationTypeApi extends BaseAPI {
    /**
     * This endpoint allows you to get the information about a given association type.
     * @summary Get an association type
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationTypeApi
     */
    public associationTypesGet(code: string, options?: AxiosRequestConfig) {
        return AssociationTypeApiFp(this.configuration).associationTypesGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get a list of association types. Association types are paginated and sorted by code.
     * @summary Get a list of association types
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationTypeApi
     */
    public associationTypesGetList(page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return AssociationTypeApiFp(this.configuration).associationTypesGetList(page, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given association type. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no association type exists for the given code, it creates it.
     * @summary Update/create an association type
     * @param {string} code Code of the resource
     * @param {AssociationTypesPostRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationTypeApi
     */
    public associationTypesPatch(code: string, body: AssociationTypesPostRequest, options?: AxiosRequestConfig) {
        return AssociationTypeApiFp(this.configuration).associationTypesPatch(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new association type.
     * @summary Create a new association type
     * @param {AssociationTypesPostRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationTypeApi
     */
    public associationTypesPost(body?: AssociationTypesPostRequest, options?: AxiosRequestConfig) {
        return AssociationTypeApiFp(this.configuration).associationTypesPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update and/or create several association types at once.
     * @summary Update/create several association types
     * @param {SeveralAssociationTypesPatchRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationTypeApi
     */
    public severalAssociationTypesPatch(body?: SeveralAssociationTypesPatchRequest, options?: AxiosRequestConfig) {
        return AssociationTypeApiFp(this.configuration).severalAssociationTypesPatch(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AttributeApi - axios parameter creator
 * @export
 */
export const AttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of attributes. Attributes are paginated and sorted by code.
         * @summary Get list of attributes
         * @param {string} [search] Filter attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attributes\&quot;&gt;Filters&lt;/a&gt; section.
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withTableSelectOptions] Return the options of \&#39;select\&#39; column types (of a table attribute) in the response. (Only available since the 7.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes: async (search?: string, page?: number, limit?: number, withCount?: boolean, withTableSelectOptions?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }

            if (withTableSelectOptions !== undefined) {
                localVarQueryParameter['with_table_select_options'] = withTableSelectOptions;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given attribute.
         * @summary Get an attribute
         * @param {string} code Code of the resource
         * @param {boolean} [withTableSelectOptions] Return the options of \&#39;select\&#39; column types (of a table attribute) in the response. (Only available since the 7.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesCode: async (code: string, withTableSelectOptions?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getAttributesCode', 'code', code)
            const localVarPath = `/api/rest/v1/attributes/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (withTableSelectOptions !== undefined) {
                localVarQueryParameter['with_table_select_options'] = withTableSelectOptions;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update and/or create several attributes at once.
         * @summary Update/create several attributes
         * @param {PatchAttributesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttributes: async (body?: PatchAttributesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given attribute. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute exists for the given code, it creates it.
         * @summary Update/create an attribute
         * @param {string} code Code of the resource
         * @param {PostAttributesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttributesCode: async (code: string, body: PostAttributesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchAttributesCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchAttributesCode', 'body', body)
            const localVarPath = `/api/rest/v1/attributes/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new attribute.
         * @summary Create a new attribute
         * @param {PostAttributesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributes: async (body?: PostAttributesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeApi - functional programming interface
 * @export
 */
export const AttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of attributes. Attributes are paginated and sorted by code.
         * @summary Get list of attributes
         * @param {string} [search] Filter attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attributes\&quot;&gt;Filters&lt;/a&gt; section.
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withTableSelectOptions] Return the options of \&#39;select\&#39; column types (of a table attribute) in the response. (Only available since the 7.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributes(search?: string, page?: number, limit?: number, withCount?: boolean, withTableSelectOptions?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributes(search, page, limit, withCount, withTableSelectOptions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given attribute.
         * @summary Get an attribute
         * @param {string} code Code of the resource
         * @param {boolean} [withTableSelectOptions] Return the options of \&#39;select\&#39; column types (of a table attribute) in the response. (Only available since the 7.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributesCode(code: string, withTableSelectOptions?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAttributesCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributesCode(code, withTableSelectOptions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update and/or create several attributes at once.
         * @summary Update/create several attributes
         * @param {PatchAttributesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAttributes(body?: PatchAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAttributes(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given attribute. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute exists for the given code, it creates it.
         * @summary Update/create an attribute
         * @param {string} code Code of the resource
         * @param {PostAttributesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAttributesCode(code: string, body: PostAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAttributesCode(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new attribute.
         * @summary Create a new attribute
         * @param {PostAttributesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAttributes(body?: PostAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAttributes(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeApi - factory interface
 * @export
 */
export const AttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of attributes. Attributes are paginated and sorted by code.
         * @summary Get list of attributes
         * @param {string} [search] Filter attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attributes\&quot;&gt;Filters&lt;/a&gt; section.
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withTableSelectOptions] Return the options of \&#39;select\&#39; column types (of a table attribute) in the response. (Only available since the 7.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes(search?: string, page?: number, limit?: number, withCount?: boolean, withTableSelectOptions?: boolean, options?: any): AxiosPromise<Attributes> {
            return localVarFp.getAttributes(search, page, limit, withCount, withTableSelectOptions, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given attribute.
         * @summary Get an attribute
         * @param {string} code Code of the resource
         * @param {boolean} [withTableSelectOptions] Return the options of \&#39;select\&#39; column types (of a table attribute) in the response. (Only available since the 7.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesCode(code: string, withTableSelectOptions?: boolean, options?: any): AxiosPromise<GetAttributesCode200Response> {
            return localVarFp.getAttributesCode(code, withTableSelectOptions, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update and/or create several attributes at once.
         * @summary Update/create several attributes
         * @param {PatchAttributesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttributes(body?: PatchAttributesRequest, options?: any): AxiosPromise<PatchProducts200Response> {
            return localVarFp.patchAttributes(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given attribute. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute exists for the given code, it creates it.
         * @summary Update/create an attribute
         * @param {string} code Code of the resource
         * @param {PostAttributesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttributesCode(code: string, body: PostAttributesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchAttributesCode(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new attribute.
         * @summary Create a new attribute
         * @param {PostAttributesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributes(body?: PostAttributesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postAttributes(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributeApi - object-oriented interface
 * @export
 * @class AttributeApi
 * @extends {BaseAPI}
 */
export class AttributeApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of attributes. Attributes are paginated and sorted by code.
     * @summary Get list of attributes
     * @param {string} [search] Filter attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attributes\&quot;&gt;Filters&lt;/a&gt; section.
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {boolean} [withTableSelectOptions] Return the options of \&#39;select\&#39; column types (of a table attribute) in the response. (Only available since the 7.0 version)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApi
     */
    public getAttributes(search?: string, page?: number, limit?: number, withCount?: boolean, withTableSelectOptions?: boolean, options?: AxiosRequestConfig) {
        return AttributeApiFp(this.configuration).getAttributes(search, page, limit, withCount, withTableSelectOptions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given attribute.
     * @summary Get an attribute
     * @param {string} code Code of the resource
     * @param {boolean} [withTableSelectOptions] Return the options of \&#39;select\&#39; column types (of a table attribute) in the response. (Only available since the 7.0 version)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApi
     */
    public getAttributesCode(code: string, withTableSelectOptions?: boolean, options?: AxiosRequestConfig) {
        return AttributeApiFp(this.configuration).getAttributesCode(code, withTableSelectOptions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update and/or create several attributes at once.
     * @summary Update/create several attributes
     * @param {PatchAttributesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApi
     */
    public patchAttributes(body?: PatchAttributesRequest, options?: AxiosRequestConfig) {
        return AttributeApiFp(this.configuration).patchAttributes(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given attribute. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute exists for the given code, it creates it.
     * @summary Update/create an attribute
     * @param {string} code Code of the resource
     * @param {PostAttributesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApi
     */
    public patchAttributesCode(code: string, body: PostAttributesRequest, options?: AxiosRequestConfig) {
        return AttributeApiFp(this.configuration).patchAttributesCode(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new attribute.
     * @summary Create a new attribute
     * @param {PostAttributesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApi
     */
    public postAttributes(body?: PostAttributesRequest, options?: AxiosRequestConfig) {
        return AttributeApiFp(this.configuration).postAttributes(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AttributeGroupApi - axios parameter creator
 * @export
 */
export const AttributeGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get the information about a given attribute group.
         * @summary Get an attribute group
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributeGroupsGet: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('attributeGroupsGet', 'code', code)
            const localVarPath = `/api/rest/v1/attribute-groups/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
         * @summary Get list of attribute groups
         * @param {string} [search] Filter attribute groups, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attribute-groups\&quot;&gt;Filters&lt;/a&gt; section.
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributeGroupsGetList: async (search?: string, page?: number, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/attribute-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given attribute group. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute group exists for the given code, it creates it.
         * @summary Update/create an attribute group
         * @param {string} code Code of the resource
         * @param {AttributeGroupsPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributeGroupsPatch: async (code: string, body: AttributeGroupsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('attributeGroupsPatch', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('attributeGroupsPatch', 'body', body)
            const localVarPath = `/api/rest/v1/attribute-groups/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new attribute group.
         * @summary Create a new attribute group
         * @param {AttributeGroupsPostRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributeGroupsPost: async (body?: AttributeGroupsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/attribute-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update and/or create several attribute groups at once.
         * @summary Update/create several attribute groups
         * @param {SeveralAttributeGroupsPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        severalAttributeGroupsPatch: async (body?: SeveralAttributeGroupsPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/attribute-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeGroupApi - functional programming interface
 * @export
 */
export const AttributeGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get the information about a given attribute group.
         * @summary Get an attribute group
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attributeGroupsGet(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeGroupsPostRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attributeGroupsGet(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
         * @summary Get list of attribute groups
         * @param {string} [search] Filter attribute groups, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attribute-groups\&quot;&gt;Filters&lt;/a&gt; section.
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attributeGroupsGetList(search?: string, page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeGroups>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attributeGroupsGetList(search, page, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given attribute group. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute group exists for the given code, it creates it.
         * @summary Update/create an attribute group
         * @param {string} code Code of the resource
         * @param {AttributeGroupsPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attributeGroupsPatch(code: string, body: AttributeGroupsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attributeGroupsPatch(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new attribute group.
         * @summary Create a new attribute group
         * @param {AttributeGroupsPostRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attributeGroupsPost(body?: AttributeGroupsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attributeGroupsPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update and/or create several attribute groups at once.
         * @summary Update/create several attribute groups
         * @param {SeveralAttributeGroupsPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async severalAttributeGroupsPatch(body?: SeveralAttributeGroupsPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.severalAttributeGroupsPatch(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeGroupApi - factory interface
 * @export
 */
export const AttributeGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeGroupApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get the information about a given attribute group.
         * @summary Get an attribute group
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributeGroupsGet(code: string, options?: any): AxiosPromise<AttributeGroupsPostRequest> {
            return localVarFp.attributeGroupsGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
         * @summary Get list of attribute groups
         * @param {string} [search] Filter attribute groups, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attribute-groups\&quot;&gt;Filters&lt;/a&gt; section.
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributeGroupsGetList(search?: string, page?: number, limit?: number, withCount?: boolean, options?: any): AxiosPromise<AttributeGroups> {
            return localVarFp.attributeGroupsGetList(search, page, limit, withCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given attribute group. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute group exists for the given code, it creates it.
         * @summary Update/create an attribute group
         * @param {string} code Code of the resource
         * @param {AttributeGroupsPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributeGroupsPatch(code: string, body: AttributeGroupsPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.attributeGroupsPatch(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new attribute group.
         * @summary Create a new attribute group
         * @param {AttributeGroupsPostRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributeGroupsPost(body?: AttributeGroupsPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.attributeGroupsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update and/or create several attribute groups at once.
         * @summary Update/create several attribute groups
         * @param {SeveralAttributeGroupsPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        severalAttributeGroupsPatch(body?: SeveralAttributeGroupsPatchRequest, options?: any): AxiosPromise<PatchProducts200Response> {
            return localVarFp.severalAttributeGroupsPatch(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributeGroupApi - object-oriented interface
 * @export
 * @class AttributeGroupApi
 * @extends {BaseAPI}
 */
export class AttributeGroupApi extends BaseAPI {
    /**
     * This endpoint allows you to get the information about a given attribute group.
     * @summary Get an attribute group
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeGroupApi
     */
    public attributeGroupsGet(code: string, options?: AxiosRequestConfig) {
        return AttributeGroupApiFp(this.configuration).attributeGroupsGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
     * @summary Get list of attribute groups
     * @param {string} [search] Filter attribute groups, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-attribute-groups\&quot;&gt;Filters&lt;/a&gt; section.
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeGroupApi
     */
    public attributeGroupsGetList(search?: string, page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return AttributeGroupApiFp(this.configuration).attributeGroupsGetList(search, page, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given attribute group. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute group exists for the given code, it creates it.
     * @summary Update/create an attribute group
     * @param {string} code Code of the resource
     * @param {AttributeGroupsPostRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeGroupApi
     */
    public attributeGroupsPatch(code: string, body: AttributeGroupsPostRequest, options?: AxiosRequestConfig) {
        return AttributeGroupApiFp(this.configuration).attributeGroupsPatch(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new attribute group.
     * @summary Create a new attribute group
     * @param {AttributeGroupsPostRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeGroupApi
     */
    public attributeGroupsPost(body?: AttributeGroupsPostRequest, options?: AxiosRequestConfig) {
        return AttributeGroupApiFp(this.configuration).attributeGroupsPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update and/or create several attribute groups at once.
     * @summary Update/create several attribute groups
     * @param {SeveralAttributeGroupsPatchRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeGroupApi
     */
    public severalAttributeGroupsPatch(body?: SeveralAttributeGroupsPatchRequest, options?: AxiosRequestConfig) {
        return AttributeGroupApiFp(this.configuration).severalAttributeGroupsPatch(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AttributeOptionApi - axios parameter creator
 * @export
 */
export const AttributeOptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
         * @summary Get list of attribute options
         * @param {string} attributeCode Code of the attribute
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesAttributeCodeOptions: async (attributeCode: string, page?: number, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('getAttributesAttributeCodeOptions', 'attributeCode', attributeCode)
            const localVarPath = `/api/rest/v1/attributes/{attribute_code}/options`
                .replace(`{${"attribute_code"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given attribute option.
         * @summary Get an attribute option
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesAttributeCodeOptionsCode: async (attributeCode: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('getAttributesAttributeCodeOptionsCode', 'attributeCode', attributeCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getAttributesAttributeCodeOptionsCode', 'code', code)
            const localVarPath = `/api/rest/v1/attributes/{attribute_code}/options/{code}`
                .replace(`{${"attribute_code"}}`, encodeURIComponent(String(attributeCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update several attribute options at once.
         * @summary Update/create several attribute options
         * @param {string} attributeCode Code of the attribute
         * @param {PatchAttributesAttributeCodeOptionsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttributesAttributeCodeOptions: async (attributeCode: string, body?: PatchAttributesAttributeCodeOptionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('patchAttributesAttributeCodeOptions', 'attributeCode', attributeCode)
            const localVarPath = `/api/rest/v1/attributes/{attribute_code}/options`
                .replace(`{${"attribute_code"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given attribute option. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute option exists for the given code, it creates it.
         * @summary Update/create an attribute option
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {PostAttributesAttributeCodeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttributesAttributeCodeOptionsCode: async (attributeCode: string, code: string, body: PostAttributesAttributeCodeOptionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('patchAttributesAttributeCodeOptionsCode', 'attributeCode', attributeCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchAttributesAttributeCodeOptionsCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchAttributesAttributeCodeOptionsCode', 'body', body)
            const localVarPath = `/api/rest/v1/attributes/{attribute_code}/options/{code}`
                .replace(`{${"attribute_code"}}`, encodeURIComponent(String(attributeCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new attribute option.
         * @summary Create a new attribute option
         * @param {string} attributeCode Code of the attribute
         * @param {PostAttributesAttributeCodeOptionsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributesAttributeCodeOptions: async (attributeCode: string, body?: PostAttributesAttributeCodeOptionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('postAttributesAttributeCodeOptions', 'attributeCode', attributeCode)
            const localVarPath = `/api/rest/v1/attributes/{attribute_code}/options`
                .replace(`{${"attribute_code"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeOptionApi - functional programming interface
 * @export
 */
export const AttributeOptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeOptionApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
         * @summary Get list of attribute options
         * @param {string} attributeCode Code of the attribute
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributesAttributeCodeOptions(attributeCode: string, page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeOptions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributesAttributeCodeOptions(attributeCode, page, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given attribute option.
         * @summary Get an attribute option
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributesAttributeCodeOptionsCode(attributeCode: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAttributesAttributeCodeOptionsRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributesAttributeCodeOptionsCode(attributeCode, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update several attribute options at once.
         * @summary Update/create several attribute options
         * @param {string} attributeCode Code of the attribute
         * @param {PatchAttributesAttributeCodeOptionsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAttributesAttributeCodeOptions(attributeCode: string, body?: PatchAttributesAttributeCodeOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAttributesAttributeCodeOptions(attributeCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given attribute option. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute option exists for the given code, it creates it.
         * @summary Update/create an attribute option
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {PostAttributesAttributeCodeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAttributesAttributeCodeOptionsCode(attributeCode: string, code: string, body: PostAttributesAttributeCodeOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAttributesAttributeCodeOptionsCode(attributeCode, code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new attribute option.
         * @summary Create a new attribute option
         * @param {string} attributeCode Code of the attribute
         * @param {PostAttributesAttributeCodeOptionsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAttributesAttributeCodeOptions(attributeCode: string, body?: PostAttributesAttributeCodeOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAttributesAttributeCodeOptions(attributeCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeOptionApi - factory interface
 * @export
 */
export const AttributeOptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeOptionApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
         * @summary Get list of attribute options
         * @param {string} attributeCode Code of the attribute
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesAttributeCodeOptions(attributeCode: string, page?: number, limit?: number, withCount?: boolean, options?: any): AxiosPromise<AttributeOptions> {
            return localVarFp.getAttributesAttributeCodeOptions(attributeCode, page, limit, withCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given attribute option.
         * @summary Get an attribute option
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesAttributeCodeOptionsCode(attributeCode: string, code: string, options?: any): AxiosPromise<PostAttributesAttributeCodeOptionsRequest> {
            return localVarFp.getAttributesAttributeCodeOptionsCode(attributeCode, code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update several attribute options at once.
         * @summary Update/create several attribute options
         * @param {string} attributeCode Code of the attribute
         * @param {PatchAttributesAttributeCodeOptionsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttributesAttributeCodeOptions(attributeCode: string, body?: PatchAttributesAttributeCodeOptionsRequest, options?: any): AxiosPromise<PatchProducts200Response> {
            return localVarFp.patchAttributesAttributeCodeOptions(attributeCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given attribute option. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute option exists for the given code, it creates it.
         * @summary Update/create an attribute option
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {PostAttributesAttributeCodeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttributesAttributeCodeOptionsCode(attributeCode: string, code: string, body: PostAttributesAttributeCodeOptionsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchAttributesAttributeCodeOptionsCode(attributeCode, code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new attribute option.
         * @summary Create a new attribute option
         * @param {string} attributeCode Code of the attribute
         * @param {PostAttributesAttributeCodeOptionsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttributesAttributeCodeOptions(attributeCode: string, body?: PostAttributesAttributeCodeOptionsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postAttributesAttributeCodeOptions(attributeCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttributeOptionApi - object-oriented interface
 * @export
 * @class AttributeOptionApi
 * @extends {BaseAPI}
 */
export class AttributeOptionApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
     * @summary Get list of attribute options
     * @param {string} attributeCode Code of the attribute
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeOptionApi
     */
    public getAttributesAttributeCodeOptions(attributeCode: string, page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return AttributeOptionApiFp(this.configuration).getAttributesAttributeCodeOptions(attributeCode, page, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given attribute option.
     * @summary Get an attribute option
     * @param {string} attributeCode Code of the attribute
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeOptionApi
     */
    public getAttributesAttributeCodeOptionsCode(attributeCode: string, code: string, options?: AxiosRequestConfig) {
        return AttributeOptionApiFp(this.configuration).getAttributesAttributeCodeOptionsCode(attributeCode, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update several attribute options at once.
     * @summary Update/create several attribute options
     * @param {string} attributeCode Code of the attribute
     * @param {PatchAttributesAttributeCodeOptionsRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeOptionApi
     */
    public patchAttributesAttributeCodeOptions(attributeCode: string, body?: PatchAttributesAttributeCodeOptionsRequest, options?: AxiosRequestConfig) {
        return AttributeOptionApiFp(this.configuration).patchAttributesAttributeCodeOptions(attributeCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given attribute option. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute option exists for the given code, it creates it.
     * @summary Update/create an attribute option
     * @param {string} attributeCode Code of the attribute
     * @param {string} code Code of the resource
     * @param {PostAttributesAttributeCodeOptionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeOptionApi
     */
    public patchAttributesAttributeCodeOptionsCode(attributeCode: string, code: string, body: PostAttributesAttributeCodeOptionsRequest, options?: AxiosRequestConfig) {
        return AttributeOptionApiFp(this.configuration).patchAttributesAttributeCodeOptionsCode(attributeCode, code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new attribute option.
     * @summary Create a new attribute option
     * @param {string} attributeCode Code of the attribute
     * @param {PostAttributesAttributeCodeOptionsRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeOptionApi
     */
    public postAttributesAttributeCodeOptions(attributeCode: string, body?: PostAttributesAttributeCodeOptionsRequest, options?: AxiosRequestConfig) {
        return AttributeOptionApiFp(this.configuration).postAttributesAttributeCodeOptions(attributeCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get an authentication token. No need to be authenticated to use this endpoint.
         * @summary Get authentication token
         * @param {string} contentType Equal to \&#39;application/json\&#39; or \&#39;application/x-www-form-urlencoded\&#39;, no other value allowed
         * @param {string} authorization Equal to \&#39;Basic xx\&#39;, where \&#39;xx\&#39; is the base 64 encoding of the client id and secret. Find out how to generate them in the &lt;a href&#x3D;\&quot;/documentation/authentication.html#client-idsecret-generation\&quot;&gt;Client ID/secret generation&lt;/a&gt; section.
         * @param {PostTokenRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postToken: async (contentType: string, authorization: string, body?: PostTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postToken', 'contentType', contentType)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postToken', 'authorization', authorization)
            const localVarPath = `/api/oauth/v1/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType != null) {
                localVarHeaderParameter['Content-type'] = String(contentType);
            }

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get an authentication token. No need to be authenticated to use this endpoint.
         * @summary Get authentication token
         * @param {string} contentType Equal to \&#39;application/json\&#39; or \&#39;application/x-www-form-urlencoded\&#39;, no other value allowed
         * @param {string} authorization Equal to \&#39;Basic xx\&#39;, where \&#39;xx\&#39; is the base 64 encoding of the client id and secret. Find out how to generate them in the &lt;a href&#x3D;\&quot;/documentation/authentication.html#client-idsecret-generation\&quot;&gt;Client ID/secret generation&lt;/a&gt; section.
         * @param {PostTokenRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postToken(contentType: string, authorization: string, body?: PostTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostToken200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postToken(contentType, authorization, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get an authentication token. No need to be authenticated to use this endpoint.
         * @summary Get authentication token
         * @param {string} contentType Equal to \&#39;application/json\&#39; or \&#39;application/x-www-form-urlencoded\&#39;, no other value allowed
         * @param {string} authorization Equal to \&#39;Basic xx\&#39;, where \&#39;xx\&#39; is the base 64 encoding of the client id and secret. Find out how to generate them in the &lt;a href&#x3D;\&quot;/documentation/authentication.html#client-idsecret-generation\&quot;&gt;Client ID/secret generation&lt;/a&gt; section.
         * @param {PostTokenRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postToken(contentType: string, authorization: string, body?: PostTokenRequest, options?: any): AxiosPromise<PostToken200Response> {
            return localVarFp.postToken(contentType, authorization, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * This endpoint allows you to get an authentication token. No need to be authenticated to use this endpoint.
     * @summary Get authentication token
     * @param {string} contentType Equal to \&#39;application/json\&#39; or \&#39;application/x-www-form-urlencoded\&#39;, no other value allowed
     * @param {string} authorization Equal to \&#39;Basic xx\&#39;, where \&#39;xx\&#39; is the base 64 encoding of the client id and secret. Find out how to generate them in the &lt;a href&#x3D;\&quot;/documentation/authentication.html#client-idsecret-generation\&quot;&gt;Client ID/secret generation&lt;/a&gt; section.
     * @param {PostTokenRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postToken(contentType: string, authorization: string, body?: PostTokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postToken(contentType, authorization, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CatalogProductsApi - axios parameter creator
 * @export
 */
export const CatalogProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get the list of products related to a catalog when the mapping is enabled. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
         * @summary Get the list of mapped products related to a catalog
         * @param {string} id Catalog ID
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
         * @param {string} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalogMappedProducts: async (id: string, searchAfter?: string, limit?: number, updatedBefore?: string, updatedAfter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAppCatalogMappedProducts', 'id', id)
            const localVarPath = `/api/rest/v1/catalogs/{id}/mapped-products`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchAfter !== undefined) {
                localVarQueryParameter['search_after'] = searchAfter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (updatedBefore !== undefined) {
                localVarQueryParameter['updated_before'] = (updatedBefore as any instanceof Date) ?
                    (updatedBefore as any).toISOString().substr(0,10) :
                    updatedBefore;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['updated_after'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString().substr(0,10) :
                    updatedAfter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
         * @summary Get the list of product uuids
         * @param {string} id Id of the catalog
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
         * @param {string} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalogProductUuids: async (id: string, searchAfter?: string, limit?: number, updatedBefore?: string, updatedAfter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAppCatalogProductUuids', 'id', id)
            const localVarPath = `/api/rest/v1/catalogs/{id}/product-uuids`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchAfter !== undefined) {
                localVarQueryParameter['search_after'] = searchAfter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (updatedBefore !== undefined) {
                localVarQueryParameter['updated_before'] = (updatedBefore as any instanceof Date) ?
                    (updatedBefore as any).toISOString().substr(0,10) :
                    updatedBefore;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['updated_after'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString().substr(0,10) :
                    updatedAfter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
         * @summary Get the list of products related to a catalog
         * @param {string} id Catalog ID
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
         * @param {string} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalogProducts: async (id: string, searchAfter?: string, limit?: number, updatedBefore?: string, updatedAfter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAppCatalogProducts', 'id', id)
            const localVarPath = `/api/rest/v1/catalogs/{id}/products`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchAfter !== undefined) {
                localVarQueryParameter['search_after'] = searchAfter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (updatedBefore !== undefined) {
                localVarQueryParameter['updated_before'] = (updatedBefore as any instanceof Date) ?
                    (updatedBefore as any).toISOString().substr(0,10) :
                    updatedBefore;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['updated_after'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString().substr(0,10) :
                    updatedAfter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
         * @summary Get a product related to a catalog
         * @param {string} id Catalog ID
         * @param {string} uuid Product UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalogProductsUuid: async (id: string, uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAppCatalogProductsUuid', 'id', id)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getAppCatalogProductsUuid', 'uuid', uuid)
            const localVarPath = `/api/rest/v1/catalogs/{id}/products/{uuid}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogProductsApi - functional programming interface
 * @export
 */
export const CatalogProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get the list of products related to a catalog when the mapping is enabled. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
         * @summary Get the list of mapped products related to a catalog
         * @param {string} id Catalog ID
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
         * @param {string} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppCatalogMappedProducts(id: string, searchAfter?: string, limit?: number, updatedBefore?: string, updatedAfter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Products1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppCatalogMappedProducts(id, searchAfter, limit, updatedBefore, updatedAfter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
         * @summary Get the list of product uuids
         * @param {string} id Id of the catalog
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
         * @param {string} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppCatalogProductUuids(id: string, searchAfter?: string, limit?: number, updatedBefore?: string, updatedAfter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductUuids>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppCatalogProductUuids(id, searchAfter, limit, updatedBefore, updatedAfter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
         * @summary Get the list of products related to a catalog
         * @param {string} id Catalog ID
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
         * @param {string} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppCatalogProducts(id: string, searchAfter?: string, limit?: number, updatedBefore?: string, updatedAfter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Products1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppCatalogProducts(id, searchAfter, limit, updatedBefore, updatedAfter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
         * @summary Get a product related to a catalog
         * @param {string} id Catalog ID
         * @param {string} uuid Product UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppCatalogProductsUuid(id: string, uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppCatalogProductsUuid(id, uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogProductsApi - factory interface
 * @export
 */
export const CatalogProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogProductsApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get the list of products related to a catalog when the mapping is enabled. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
         * @summary Get the list of mapped products related to a catalog
         * @param {string} id Catalog ID
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
         * @param {string} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalogMappedProducts(id: string, searchAfter?: string, limit?: number, updatedBefore?: string, updatedAfter?: string, options?: any): AxiosPromise<Products1> {
            return localVarFp.getAppCatalogMappedProducts(id, searchAfter, limit, updatedBefore, updatedAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
         * @summary Get the list of product uuids
         * @param {string} id Id of the catalog
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
         * @param {string} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalogProductUuids(id: string, searchAfter?: string, limit?: number, updatedBefore?: string, updatedAfter?: string, options?: any): AxiosPromise<ProductUuids> {
            return localVarFp.getAppCatalogProductUuids(id, searchAfter, limit, updatedBefore, updatedAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
         * @summary Get the list of products related to a catalog
         * @param {string} id Catalog ID
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
         * @param {string} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalogProducts(id: string, searchAfter?: string, limit?: number, updatedBefore?: string, updatedAfter?: string, options?: any): AxiosPromise<Products1> {
            return localVarFp.getAppCatalogProducts(id, searchAfter, limit, updatedBefore, updatedAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
         * @summary Get a product related to a catalog
         * @param {string} id Catalog ID
         * @param {string} uuid Product UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalogProductsUuid(id: string, uuid: string, options?: any): AxiosPromise<void> {
            return localVarFp.getAppCatalogProductsUuid(id, uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CatalogProductsApi - object-oriented interface
 * @export
 * @class CatalogProductsApi
 * @extends {BaseAPI}
 */
export class CatalogProductsApi extends BaseAPI {
    /**
     * This endpoint allows you to get the list of products related to a catalog when the mapping is enabled. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * @summary Get the list of mapped products related to a catalog
     * @param {string} id Catalog ID
     * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {string} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
     * @param {string} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogProductsApi
     */
    public getAppCatalogMappedProducts(id: string, searchAfter?: string, limit?: number, updatedBefore?: string, updatedAfter?: string, options?: AxiosRequestConfig) {
        return CatalogProductsApiFp(this.configuration).getAppCatalogMappedProducts(id, searchAfter, limit, updatedBefore, updatedAfter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * @summary Get the list of product uuids
     * @param {string} id Id of the catalog
     * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {string} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
     * @param {string} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogProductsApi
     */
    public getAppCatalogProductUuids(id: string, searchAfter?: string, limit?: number, updatedBefore?: string, updatedAfter?: string, options?: AxiosRequestConfig) {
        return CatalogProductsApiFp(this.configuration).getAppCatalogProductUuids(id, searchAfter, limit, updatedBefore, updatedAfter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * @summary Get the list of products related to a catalog
     * @param {string} id Catalog ID
     * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {string} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
     * @param {string} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogProductsApi
     */
    public getAppCatalogProducts(id: string, searchAfter?: string, limit?: number, updatedBefore?: string, updatedAfter?: string, options?: AxiosRequestConfig) {
        return CatalogProductsApiFp(this.configuration).getAppCatalogProducts(id, searchAfter, limit, updatedBefore, updatedAfter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * @summary Get a product related to a catalog
     * @param {string} id Catalog ID
     * @param {string} uuid Product UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogProductsApi
     */
    public getAppCatalogProductsUuid(id: string, uuid: string, options?: AxiosRequestConfig) {
        return CatalogProductsApiFp(this.configuration).getAppCatalogProductsUuid(id, uuid, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CatalogsApi - axios parameter creator
 * @export
 */
export const CatalogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to delete a catalog.
         * @summary Delete a catalog
         * @param {string} id Catalog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppCatalog: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAppCatalog', 'id', id)
            const localVarPath = `/api/rest/v1/catalogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a catalog.
         * @summary Get a catalog
         * @param {string} id Catalog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalog: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAppCatalog', 'id', id)
            const localVarPath = `/api/rest/v1/catalogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the list of catalogs you owned.
         * @summary Get the list of owned catalogs
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalogs: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/catalogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a catalog.
         * @summary Update a catalog
         * @param {string} id Catalog ID
         * @param {PostAppCatalogRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAppCatalog: async (id: string, body?: PostAppCatalogRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchAppCatalog', 'id', id)
            const localVarPath = `/api/rest/v1/catalogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new catalog.
         * @summary Create a new catalog
         * @param {PostAppCatalogRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAppCatalog: async (body?: PostAppCatalogRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/catalogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogsApi - functional programming interface
 * @export
 */
export const CatalogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to delete a catalog.
         * @summary Delete a catalog
         * @param {string} id Catalog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppCatalog(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAppCatalog(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a catalog.
         * @summary Get a catalog
         * @param {string} id Catalog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppCatalog(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAppCatalog201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppCatalog(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the list of catalogs you owned.
         * @summary Get the list of owned catalogs
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppCatalogs(page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Catalogs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppCatalogs(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a catalog.
         * @summary Update a catalog
         * @param {string} id Catalog ID
         * @param {PostAppCatalogRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAppCatalog(id: string, body?: PostAppCatalogRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAppCatalog201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAppCatalog(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new catalog.
         * @summary Create a new catalog
         * @param {PostAppCatalogRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAppCatalog(body?: PostAppCatalogRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAppCatalog201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAppCatalog(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogsApi - factory interface
 * @export
 */
export const CatalogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogsApiFp(configuration)
    return {
        /**
         * This endpoint allows you to delete a catalog.
         * @summary Delete a catalog
         * @param {string} id Catalog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppCatalog(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAppCatalog(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a catalog.
         * @summary Get a catalog
         * @param {string} id Catalog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalog(id: string, options?: any): AxiosPromise<PostAppCatalog201Response> {
            return localVarFp.getAppCatalog(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the list of catalogs you owned.
         * @summary Get the list of owned catalogs
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalogs(page?: number, limit?: number, options?: any): AxiosPromise<Catalogs> {
            return localVarFp.getAppCatalogs(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a catalog.
         * @summary Update a catalog
         * @param {string} id Catalog ID
         * @param {PostAppCatalogRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAppCatalog(id: string, body?: PostAppCatalogRequest, options?: any): AxiosPromise<PostAppCatalog201Response> {
            return localVarFp.patchAppCatalog(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new catalog.
         * @summary Create a new catalog
         * @param {PostAppCatalogRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAppCatalog(body?: PostAppCatalogRequest, options?: any): AxiosPromise<PostAppCatalog201Response> {
            return localVarFp.postAppCatalog(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CatalogsApi - object-oriented interface
 * @export
 * @class CatalogsApi
 * @extends {BaseAPI}
 */
export class CatalogsApi extends BaseAPI {
    /**
     * This endpoint allows you to delete a catalog.
     * @summary Delete a catalog
     * @param {string} id Catalog ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public deleteAppCatalog(id: string, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).deleteAppCatalog(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a catalog.
     * @summary Get a catalog
     * @param {string} id Catalog ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public getAppCatalog(id: string, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).getAppCatalog(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the list of catalogs you owned.
     * @summary Get the list of owned catalogs
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public getAppCatalogs(page?: number, limit?: number, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).getAppCatalogs(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a catalog.
     * @summary Update a catalog
     * @param {string} id Catalog ID
     * @param {PostAppCatalogRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public patchAppCatalog(id: string, body?: PostAppCatalogRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).patchAppCatalog(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new catalog.
     * @summary Create a new catalog
     * @param {PostAppCatalogRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public postAppCatalog(body?: PostAppCatalogRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).postAppCatalog(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of categories. Categories are paginated and sorted by `root/left`.
         * @summary Get list of categories
         * @param {string} [search] Filter categories, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-categories\&quot;&gt;Filters&lt;/a&gt; section.
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withPosition] Return information about category position into its category tree (only available since the 7.0 version)
         * @param {boolean} [withEnrichedAttributes] Return attribute values of the category (only available on SaaS platforms)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (search?: string, page?: number, limit?: number, withCount?: boolean, withPosition?: boolean, withEnrichedAttributes?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }

            if (withPosition !== undefined) {
                localVarQueryParameter['with_position'] = withPosition;
            }

            if (withEnrichedAttributes !== undefined) {
                localVarQueryParameter['with_enriched_attributes'] = withEnrichedAttributes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given category.
         * @summary Get a category
         * @param {string} code Code of the resource
         * @param {boolean} [withPosition] Return information about category position into its category tree (only available since the 7.0 version)
         * @param {boolean} [withEnrichedAttributes] Return attribute values of the category (only available on SaaS platforms)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesCode: async (code: string, withPosition?: boolean, withEnrichedAttributes?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getCategoriesCode', 'code', code)
            const localVarPath = `/api/rest/v1/categories/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (withPosition !== undefined) {
                localVarQueryParameter['with_position'] = withPosition;
            }

            if (withEnrichedAttributes !== undefined) {
                localVarQueryParameter['with_enriched_attributes'] = withEnrichedAttributes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to download a given media file that is used as an attribute value of a enriched category.
         * @summary Download a category media file
         * @param {string} filePath Path of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryMediaFilesFilePathDownload: async (filePath: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filePath' is not null or undefined
            assertParamExists('getCategoryMediaFilesFilePathDownload', 'filePath', filePath)
            const localVarPath = `/api/rest/v1/category-media-files/{file_path}/download`
                .replace(`{${"file_path"}}`, encodeURIComponent(String(filePath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update several categories at once.
         * @summary Update/create several categories
         * @param {PatchCategoriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCategories: async (body?: PatchCategoriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given category. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no category exists for the given code, it creates it.
         * @summary Update/create a category
         * @param {string} code Code of the resource
         * @param {PatchCategoriesCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCategoriesCode: async (code: string, body: PatchCategoriesCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchCategoriesCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchCategoriesCode', 'body', body)
            const localVarPath = `/api/rest/v1/categories/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new category.
         * @summary Create a new category
         * @param {PostCategoriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategories: async (body?: PostCategoriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of categories. Categories are paginated and sorted by `root/left`.
         * @summary Get list of categories
         * @param {string} [search] Filter categories, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-categories\&quot;&gt;Filters&lt;/a&gt; section.
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withPosition] Return information about category position into its category tree (only available since the 7.0 version)
         * @param {boolean} [withEnrichedAttributes] Return attribute values of the category (only available on SaaS platforms)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(search?: string, page?: number, limit?: number, withCount?: boolean, withPosition?: boolean, withEnrichedAttributes?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Categories>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(search, page, limit, withCount, withPosition, withEnrichedAttributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given category.
         * @summary Get a category
         * @param {string} code Code of the resource
         * @param {boolean} [withPosition] Return information about category position into its category tree (only available since the 7.0 version)
         * @param {boolean} [withEnrichedAttributes] Return attribute values of the category (only available on SaaS platforms)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoriesCode(code: string, withPosition?: boolean, withEnrichedAttributes?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCategoriesCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoriesCode(code, withPosition, withEnrichedAttributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to download a given media file that is used as an attribute value of a enriched category.
         * @summary Download a category media file
         * @param {string} filePath Path of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryMediaFilesFilePathDownload(filePath: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoryMediaFilesFilePathDownload(filePath, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update several categories at once.
         * @summary Update/create several categories
         * @param {PatchCategoriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCategories(body?: PatchCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCategories(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given category. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no category exists for the given code, it creates it.
         * @summary Update/create a category
         * @param {string} code Code of the resource
         * @param {PatchCategoriesCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCategoriesCode(code: string, body: PatchCategoriesCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCategoriesCode(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new category.
         * @summary Create a new category
         * @param {PostCategoriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategories(body?: PostCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCategories(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of categories. Categories are paginated and sorted by `root/left`.
         * @summary Get list of categories
         * @param {string} [search] Filter categories, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-categories\&quot;&gt;Filters&lt;/a&gt; section.
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withPosition] Return information about category position into its category tree (only available since the 7.0 version)
         * @param {boolean} [withEnrichedAttributes] Return attribute values of the category (only available on SaaS platforms)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(search?: string, page?: number, limit?: number, withCount?: boolean, withPosition?: boolean, withEnrichedAttributes?: boolean, options?: any): AxiosPromise<Categories> {
            return localVarFp.getCategories(search, page, limit, withCount, withPosition, withEnrichedAttributes, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given category.
         * @summary Get a category
         * @param {string} code Code of the resource
         * @param {boolean} [withPosition] Return information about category position into its category tree (only available since the 7.0 version)
         * @param {boolean} [withEnrichedAttributes] Return attribute values of the category (only available on SaaS platforms)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesCode(code: string, withPosition?: boolean, withEnrichedAttributes?: boolean, options?: any): AxiosPromise<GetCategoriesCode200Response> {
            return localVarFp.getCategoriesCode(code, withPosition, withEnrichedAttributes, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to download a given media file that is used as an attribute value of a enriched category.
         * @summary Download a category media file
         * @param {string} filePath Path of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryMediaFilesFilePathDownload(filePath: string, options?: any): AxiosPromise<void> {
            return localVarFp.getCategoryMediaFilesFilePathDownload(filePath, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update several categories at once.
         * @summary Update/create several categories
         * @param {PatchCategoriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCategories(body?: PatchCategoriesRequest, options?: any): AxiosPromise<PatchProducts200Response> {
            return localVarFp.patchCategories(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given category. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no category exists for the given code, it creates it.
         * @summary Update/create a category
         * @param {string} code Code of the resource
         * @param {PatchCategoriesCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCategoriesCode(code: string, body: PatchCategoriesCodeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchCategoriesCode(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new category.
         * @summary Create a new category
         * @param {PostCategoriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategories(body?: PostCategoriesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postCategories(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of categories. Categories are paginated and sorted by `root/left`.
     * @summary Get list of categories
     * @param {string} [search] Filter categories, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-categories\&quot;&gt;Filters&lt;/a&gt; section.
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {boolean} [withPosition] Return information about category position into its category tree (only available since the 7.0 version)
     * @param {boolean} [withEnrichedAttributes] Return attribute values of the category (only available on SaaS platforms)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getCategories(search?: string, page?: number, limit?: number, withCount?: boolean, withPosition?: boolean, withEnrichedAttributes?: boolean, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).getCategories(search, page, limit, withCount, withPosition, withEnrichedAttributes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given category.
     * @summary Get a category
     * @param {string} code Code of the resource
     * @param {boolean} [withPosition] Return information about category position into its category tree (only available since the 7.0 version)
     * @param {boolean} [withEnrichedAttributes] Return attribute values of the category (only available on SaaS platforms)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getCategoriesCode(code: string, withPosition?: boolean, withEnrichedAttributes?: boolean, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).getCategoriesCode(code, withPosition, withEnrichedAttributes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to download a given media file that is used as an attribute value of a enriched category.
     * @summary Download a category media file
     * @param {string} filePath Path of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getCategoryMediaFilesFilePathDownload(filePath: string, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).getCategoryMediaFilesFilePathDownload(filePath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update several categories at once.
     * @summary Update/create several categories
     * @param {PatchCategoriesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public patchCategories(body?: PatchCategoriesRequest, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).patchCategories(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given category. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no category exists for the given code, it creates it.
     * @summary Update/create a category
     * @param {string} code Code of the resource
     * @param {PatchCategoriesCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public patchCategoriesCode(code: string, body: PatchCategoriesCodeRequest, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).patchCategoriesCode(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new category.
     * @summary Create a new category
     * @param {PostCategoriesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public postCategories(body?: PostCategoriesRequest, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).postCategories(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChannelApi - axios parameter creator
 * @export
 */
export const ChannelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to update a given channel. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no channel exists for the given code, it creates it.
         * @summary Update/create a channel
         * @param {string} code Code of the resource
         * @param {ChannelsPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsPatch: async (code: string, body: ChannelsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('channelsPatch', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('channelsPatch', 'body', body)
            const localVarPath = `/api/rest/v1/channels/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new channel.
         * @summary Create a new channel
         * @param {ChannelsPostRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsPost: async (body?: ChannelsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get a list of channels. Channels are paginated and sorted by code.
         * @summary Get a list of channels
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels: async (page?: number, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given channel.
         * @summary Get a channel
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelsCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getChannelsCode', 'code', code)
            const localVarPath = `/api/rest/v1/channels/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update and/or create several channels at once.
         * @summary Update/create several channels
         * @param {SeveralChannelsPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        severalChannelsPatch: async (body?: SeveralChannelsPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelApi - functional programming interface
 * @export
 */
export const ChannelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to update a given channel. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no channel exists for the given code, it creates it.
         * @summary Update/create a channel
         * @param {string} code Code of the resource
         * @param {ChannelsPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelsPatch(code: string, body: ChannelsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelsPatch(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new channel.
         * @summary Create a new channel
         * @param {ChannelsPostRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelsPost(body?: ChannelsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelsPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get a list of channels. Channels are paginated and sorted by code.
         * @summary Get a list of channels
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannels(page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channels>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChannels(page, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given channel.
         * @summary Get a channel
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelsCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelsPostRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelsCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update and/or create several channels at once.
         * @summary Update/create several channels
         * @param {SeveralChannelsPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async severalChannelsPatch(body?: SeveralChannelsPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.severalChannelsPatch(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelApi - factory interface
 * @export
 */
export const ChannelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelApiFp(configuration)
    return {
        /**
         * This endpoint allows you to update a given channel. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no channel exists for the given code, it creates it.
         * @summary Update/create a channel
         * @param {string} code Code of the resource
         * @param {ChannelsPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsPatch(code: string, body: ChannelsPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.channelsPatch(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new channel.
         * @summary Create a new channel
         * @param {ChannelsPostRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsPost(body?: ChannelsPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.channelsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get a list of channels. Channels are paginated and sorted by code.
         * @summary Get a list of channels
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels(page?: number, limit?: number, withCount?: boolean, options?: any): AxiosPromise<Channels> {
            return localVarFp.getChannels(page, limit, withCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given channel.
         * @summary Get a channel
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelsCode(code: string, options?: any): AxiosPromise<ChannelsPostRequest> {
            return localVarFp.getChannelsCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update and/or create several channels at once.
         * @summary Update/create several channels
         * @param {SeveralChannelsPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        severalChannelsPatch(body?: SeveralChannelsPatchRequest, options?: any): AxiosPromise<PatchProducts200Response> {
            return localVarFp.severalChannelsPatch(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export class ChannelApi extends BaseAPI {
    /**
     * This endpoint allows you to update a given channel. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no channel exists for the given code, it creates it.
     * @summary Update/create a channel
     * @param {string} code Code of the resource
     * @param {ChannelsPostRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public channelsPatch(code: string, body: ChannelsPostRequest, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).channelsPatch(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new channel.
     * @summary Create a new channel
     * @param {ChannelsPostRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public channelsPost(body?: ChannelsPostRequest, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).channelsPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get a list of channels. Channels are paginated and sorted by code.
     * @summary Get a list of channels
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public getChannels(page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).getChannels(page, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given channel.
     * @summary Get a channel
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public getChannelsCode(code: string, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).getChannelsCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update and/or create several channels at once.
     * @summary Update/create several channels
     * @param {SeveralChannelsPatchRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public severalChannelsPatch(body?: SeveralChannelsPatchRequest, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).severalChannelsPatch(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CurrencyApi - axios parameter creator
 * @export
 */
export const CurrencyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get the information about a given currency.
         * @summary Get a currency
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currenciesGet: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('currenciesGet', 'code', code)
            const localVarPath = `/api/rest/v1/currencies/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get a list of currencies. Currencies are paginated and sorted by code.
         * @summary Get a list of currencies
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currenciesGetList: async (page?: number, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CurrencyApi - functional programming interface
 * @export
 */
export const CurrencyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CurrencyApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get the information about a given currency.
         * @summary Get a currency
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currenciesGet(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrenciesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currenciesGet(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get a list of currencies. Currencies are paginated and sorted by code.
         * @summary Get a list of currencies
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currenciesGetList(page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Currencies>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currenciesGetList(page, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CurrencyApi - factory interface
 * @export
 */
export const CurrencyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CurrencyApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get the information about a given currency.
         * @summary Get a currency
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currenciesGet(code: string, options?: any): AxiosPromise<CurrenciesGet200Response> {
            return localVarFp.currenciesGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get a list of currencies. Currencies are paginated and sorted by code.
         * @summary Get a list of currencies
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currenciesGetList(page?: number, limit?: number, withCount?: boolean, options?: any): AxiosPromise<Currencies> {
            return localVarFp.currenciesGetList(page, limit, withCount, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CurrencyApi - object-oriented interface
 * @export
 * @class CurrencyApi
 * @extends {BaseAPI}
 */
export class CurrencyApi extends BaseAPI {
    /**
     * This endpoint allows you to get the information about a given currency.
     * @summary Get a currency
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public currenciesGet(code: string, options?: AxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).currenciesGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get a list of currencies. Currencies are paginated and sorted by code.
     * @summary Get a list of currencies
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public currenciesGetList(page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).currenciesGetList(page, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FamilyApi - axios parameter creator
 * @export
 */
export const FamilyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of families. Families are paginated and sorted by code.
         * @summary Get list of families
         * @param {string} [search] Filter families, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-families\&quot;&gt;Filters&lt;/a&gt; section.
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamilies: async (search?: string, page?: number, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/families`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given family.
         * @summary Get a family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamiliesCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getFamiliesCode', 'code', code)
            const localVarPath = `/api/rest/v1/families/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update and/or create several families at once.
         * @summary Update/create several families
         * @param {PatchFamiliesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFamilies: async (body?: PatchFamiliesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/families`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given family. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no family exists for the given code, it creates it.
         * @summary Update/create a family
         * @param {string} code Code of the resource
         * @param {PostFamiliesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFamiliesCode: async (code: string, body: PostFamiliesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchFamiliesCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchFamiliesCode', 'body', body)
            const localVarPath = `/api/rest/v1/families/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new family.
         * @summary Create a new family
         * @param {PostFamiliesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFamilies: async (body?: PostFamiliesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/families`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a family variant.
         * @summary Create a new family variant
         * @param {string} familyCode Code of the family
         * @param {PostFamiliesFamilyCodeVariantsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFamiliesFamilyCodeVariants: async (familyCode: string, body?: PostFamiliesFamilyCodeVariantsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'familyCode' is not null or undefined
            assertParamExists('postFamiliesFamilyCodeVariants', 'familyCode', familyCode)
            const localVarPath = `/api/rest/v1/families/{family_code}/variants`
                .replace(`{${"family_code"}}`, encodeURIComponent(String(familyCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FamilyApi - functional programming interface
 * @export
 */
export const FamilyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FamilyApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of families. Families are paginated and sorted by code.
         * @summary Get list of families
         * @param {string} [search] Filter families, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-families\&quot;&gt;Filters&lt;/a&gt; section.
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamilies(search?: string, page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Families>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFamilies(search, page, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given family.
         * @summary Get a family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamiliesCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostFamiliesRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFamiliesCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update and/or create several families at once.
         * @summary Update/create several families
         * @param {PatchFamiliesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFamilies(body?: PatchFamiliesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchFamilies(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given family. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no family exists for the given code, it creates it.
         * @summary Update/create a family
         * @param {string} code Code of the resource
         * @param {PostFamiliesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFamiliesCode(code: string, body: PostFamiliesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchFamiliesCode(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new family.
         * @summary Create a new family
         * @param {PostFamiliesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFamilies(body?: PostFamiliesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFamilies(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a family variant.
         * @summary Create a new family variant
         * @param {string} familyCode Code of the family
         * @param {PostFamiliesFamilyCodeVariantsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFamiliesFamilyCodeVariants(familyCode: string, body?: PostFamiliesFamilyCodeVariantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFamiliesFamilyCodeVariants(familyCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FamilyApi - factory interface
 * @export
 */
export const FamilyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FamilyApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of families. Families are paginated and sorted by code.
         * @summary Get list of families
         * @param {string} [search] Filter families, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-families\&quot;&gt;Filters&lt;/a&gt; section.
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamilies(search?: string, page?: number, limit?: number, withCount?: boolean, options?: any): AxiosPromise<Families> {
            return localVarFp.getFamilies(search, page, limit, withCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given family.
         * @summary Get a family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamiliesCode(code: string, options?: any): AxiosPromise<PostFamiliesRequest> {
            return localVarFp.getFamiliesCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update and/or create several families at once.
         * @summary Update/create several families
         * @param {PatchFamiliesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFamilies(body?: PatchFamiliesRequest, options?: any): AxiosPromise<PatchProducts200Response> {
            return localVarFp.patchFamilies(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given family. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no family exists for the given code, it creates it.
         * @summary Update/create a family
         * @param {string} code Code of the resource
         * @param {PostFamiliesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFamiliesCode(code: string, body: PostFamiliesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchFamiliesCode(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new family.
         * @summary Create a new family
         * @param {PostFamiliesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFamilies(body?: PostFamiliesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postFamilies(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a family variant.
         * @summary Create a new family variant
         * @param {string} familyCode Code of the family
         * @param {PostFamiliesFamilyCodeVariantsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFamiliesFamilyCodeVariants(familyCode: string, body?: PostFamiliesFamilyCodeVariantsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postFamiliesFamilyCodeVariants(familyCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FamilyApi - object-oriented interface
 * @export
 * @class FamilyApi
 * @extends {BaseAPI}
 */
export class FamilyApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of families. Families are paginated and sorted by code.
     * @summary Get list of families
     * @param {string} [search] Filter families, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-families\&quot;&gt;Filters&lt;/a&gt; section.
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyApi
     */
    public getFamilies(search?: string, page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return FamilyApiFp(this.configuration).getFamilies(search, page, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given family.
     * @summary Get a family
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyApi
     */
    public getFamiliesCode(code: string, options?: AxiosRequestConfig) {
        return FamilyApiFp(this.configuration).getFamiliesCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update and/or create several families at once.
     * @summary Update/create several families
     * @param {PatchFamiliesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyApi
     */
    public patchFamilies(body?: PatchFamiliesRequest, options?: AxiosRequestConfig) {
        return FamilyApiFp(this.configuration).patchFamilies(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given family. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no family exists for the given code, it creates it.
     * @summary Update/create a family
     * @param {string} code Code of the resource
     * @param {PostFamiliesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyApi
     */
    public patchFamiliesCode(code: string, body: PostFamiliesRequest, options?: AxiosRequestConfig) {
        return FamilyApiFp(this.configuration).patchFamiliesCode(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new family.
     * @summary Create a new family
     * @param {PostFamiliesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyApi
     */
    public postFamilies(body?: PostFamiliesRequest, options?: AxiosRequestConfig) {
        return FamilyApiFp(this.configuration).postFamilies(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a family variant.
     * @summary Create a new family variant
     * @param {string} familyCode Code of the family
     * @param {PostFamiliesFamilyCodeVariantsRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyApi
     */
    public postFamiliesFamilyCodeVariants(familyCode: string, body?: PostFamiliesFamilyCodeVariantsRequest, options?: AxiosRequestConfig) {
        return FamilyApiFp(this.configuration).postFamiliesFamilyCodeVariants(familyCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FamilyVariantApi - axios parameter creator
 * @export
 */
export const FamilyVariantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of family variants. Family variants are paginated and sorted by code.
         * @summary Get list of family variants
         * @param {string} familyCode Code of the family
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamiliesFamilyCodeVariants: async (familyCode: string, page?: number, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'familyCode' is not null or undefined
            assertParamExists('getFamiliesFamilyCodeVariants', 'familyCode', familyCode)
            const localVarPath = `/api/rest/v1/families/{family_code}/variants`
                .replace(`{${"family_code"}}`, encodeURIComponent(String(familyCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given family variant.
         * @summary Get a family variant
         * @param {string} familyCode Code of the family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamiliesFamilyCodeVariantsCode: async (familyCode: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'familyCode' is not null or undefined
            assertParamExists('getFamiliesFamilyCodeVariantsCode', 'familyCode', familyCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getFamiliesFamilyCodeVariantsCode', 'code', code)
            const localVarPath = `/api/rest/v1/families/{family_code}/variants/{code}`
                .replace(`{${"family_code"}}`, encodeURIComponent(String(familyCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update and/or create several family variants at once, for a given family.
         * @summary Update/create several family variants
         * @param {string} familyCode Code of the family
         * @param {PatchFamiliesFamilyCodeVariantsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFamiliesFamilyCodeVariants: async (familyCode: string, body?: PatchFamiliesFamilyCodeVariantsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'familyCode' is not null or undefined
            assertParamExists('patchFamiliesFamilyCodeVariants', 'familyCode', familyCode)
            const localVarPath = `/api/rest/v1/families/{family_code}/variants`
                .replace(`{${"family_code"}}`, encodeURIComponent(String(familyCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given family variant. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no family variant exists for the given code, it creates it.
         * @summary Update/create a family variant
         * @param {string} familyCode Code of the family
         * @param {string} code Code of the resource
         * @param {PostFamiliesFamilyCodeVariantsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFamiliesFamilyCodeVariantsCode: async (familyCode: string, code: string, body: PostFamiliesFamilyCodeVariantsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'familyCode' is not null or undefined
            assertParamExists('patchFamiliesFamilyCodeVariantsCode', 'familyCode', familyCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchFamiliesFamilyCodeVariantsCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchFamiliesFamilyCodeVariantsCode', 'body', body)
            const localVarPath = `/api/rest/v1/families/{family_code}/variants/{code}`
                .replace(`{${"family_code"}}`, encodeURIComponent(String(familyCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FamilyVariantApi - functional programming interface
 * @export
 */
export const FamilyVariantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FamilyVariantApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of family variants. Family variants are paginated and sorted by code.
         * @summary Get list of family variants
         * @param {string} familyCode Code of the family
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamiliesFamilyCodeVariants(familyCode: string, page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FamilyVariants>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFamiliesFamilyCodeVariants(familyCode, page, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given family variant.
         * @summary Get a family variant
         * @param {string} familyCode Code of the family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamiliesFamilyCodeVariantsCode(familyCode: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostFamiliesFamilyCodeVariantsRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFamiliesFamilyCodeVariantsCode(familyCode, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update and/or create several family variants at once, for a given family.
         * @summary Update/create several family variants
         * @param {string} familyCode Code of the family
         * @param {PatchFamiliesFamilyCodeVariantsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFamiliesFamilyCodeVariants(familyCode: string, body?: PatchFamiliesFamilyCodeVariantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchFamiliesFamilyCodeVariants(familyCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given family variant. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no family variant exists for the given code, it creates it.
         * @summary Update/create a family variant
         * @param {string} familyCode Code of the family
         * @param {string} code Code of the resource
         * @param {PostFamiliesFamilyCodeVariantsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFamiliesFamilyCodeVariantsCode(familyCode: string, code: string, body: PostFamiliesFamilyCodeVariantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchFamiliesFamilyCodeVariantsCode(familyCode, code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FamilyVariantApi - factory interface
 * @export
 */
export const FamilyVariantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FamilyVariantApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of family variants. Family variants are paginated and sorted by code.
         * @summary Get list of family variants
         * @param {string} familyCode Code of the family
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamiliesFamilyCodeVariants(familyCode: string, page?: number, limit?: number, withCount?: boolean, options?: any): AxiosPromise<FamilyVariants> {
            return localVarFp.getFamiliesFamilyCodeVariants(familyCode, page, limit, withCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given family variant.
         * @summary Get a family variant
         * @param {string} familyCode Code of the family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamiliesFamilyCodeVariantsCode(familyCode: string, code: string, options?: any): AxiosPromise<PostFamiliesFamilyCodeVariantsRequest> {
            return localVarFp.getFamiliesFamilyCodeVariantsCode(familyCode, code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update and/or create several family variants at once, for a given family.
         * @summary Update/create several family variants
         * @param {string} familyCode Code of the family
         * @param {PatchFamiliesFamilyCodeVariantsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFamiliesFamilyCodeVariants(familyCode: string, body?: PatchFamiliesFamilyCodeVariantsRequest, options?: any): AxiosPromise<PatchProducts200Response> {
            return localVarFp.patchFamiliesFamilyCodeVariants(familyCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given family variant. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no family variant exists for the given code, it creates it.
         * @summary Update/create a family variant
         * @param {string} familyCode Code of the family
         * @param {string} code Code of the resource
         * @param {PostFamiliesFamilyCodeVariantsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFamiliesFamilyCodeVariantsCode(familyCode: string, code: string, body: PostFamiliesFamilyCodeVariantsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchFamiliesFamilyCodeVariantsCode(familyCode, code, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FamilyVariantApi - object-oriented interface
 * @export
 * @class FamilyVariantApi
 * @extends {BaseAPI}
 */
export class FamilyVariantApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of family variants. Family variants are paginated and sorted by code.
     * @summary Get list of family variants
     * @param {string} familyCode Code of the family
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyVariantApi
     */
    public getFamiliesFamilyCodeVariants(familyCode: string, page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return FamilyVariantApiFp(this.configuration).getFamiliesFamilyCodeVariants(familyCode, page, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given family variant.
     * @summary Get a family variant
     * @param {string} familyCode Code of the family
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyVariantApi
     */
    public getFamiliesFamilyCodeVariantsCode(familyCode: string, code: string, options?: AxiosRequestConfig) {
        return FamilyVariantApiFp(this.configuration).getFamiliesFamilyCodeVariantsCode(familyCode, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update and/or create several family variants at once, for a given family.
     * @summary Update/create several family variants
     * @param {string} familyCode Code of the family
     * @param {PatchFamiliesFamilyCodeVariantsRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyVariantApi
     */
    public patchFamiliesFamilyCodeVariants(familyCode: string, body?: PatchFamiliesFamilyCodeVariantsRequest, options?: AxiosRequestConfig) {
        return FamilyVariantApiFp(this.configuration).patchFamiliesFamilyCodeVariants(familyCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given family variant. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no family variant exists for the given code, it creates it.
     * @summary Update/create a family variant
     * @param {string} familyCode Code of the family
     * @param {string} code Code of the resource
     * @param {PostFamiliesFamilyCodeVariantsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyVariantApi
     */
    public patchFamiliesFamilyCodeVariantsCode(familyCode: string, code: string, body: PostFamiliesFamilyCodeVariantsRequest, options?: AxiosRequestConfig) {
        return FamilyVariantApiFp(this.configuration).patchFamiliesFamilyCodeVariantsCode(familyCode, code, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LocaleApi - axios parameter creator
 * @export
 */
export const LocaleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of locales. Locales are paginated and sorted by code.
         * @summary Get a list of locales
         * @param {string} [search] Filter locales, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocales: async (search?: string, page?: number, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/locales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given locale.
         * @summary Get a locale
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalesCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getLocalesCode', 'code', code)
            const localVarPath = `/api/rest/v1/locales/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocaleApi - functional programming interface
 * @export
 */
export const LocaleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocaleApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of locales. Locales are paginated and sorted by code.
         * @summary Get a list of locales
         * @param {string} [search] Filter locales, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocales(search?: string, page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locales>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocales(search, page, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given locale.
         * @summary Get a locale
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalesCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLocalesCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocalesCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocaleApi - factory interface
 * @export
 */
export const LocaleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocaleApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of locales. Locales are paginated and sorted by code.
         * @summary Get a list of locales
         * @param {string} [search] Filter locales, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocales(search?: string, page?: number, limit?: number, withCount?: boolean, options?: any): AxiosPromise<Locales> {
            return localVarFp.getLocales(search, page, limit, withCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given locale.
         * @summary Get a locale
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalesCode(code: string, options?: any): AxiosPromise<GetLocalesCode200Response> {
            return localVarFp.getLocalesCode(code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocaleApi - object-oriented interface
 * @export
 * @class LocaleApi
 * @extends {BaseAPI}
 */
export class LocaleApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of locales. Locales are paginated and sorted by code.
     * @summary Get a list of locales
     * @param {string} [search] Filter locales, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApi
     */
    public getLocales(search?: string, page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).getLocales(search, page, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given locale.
     * @summary Get a locale
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApi
     */
    public getLocalesCode(code: string, options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).getLocalesCode(code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MappingSchemaForProductsApi - axios parameter creator
 * @export
 */
export const MappingSchemaForProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to delete the product mapping schema related to a catalog
         * @summary Delete the product mapping schema related to a catalog
         * @param {string} id Catalog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppCatalogsMappingSchemaProduct: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAppCatalogsMappingSchemaProduct', 'id', id)
            const localVarPath = `/api/rest/v1/catalogs/{id}/mapping-schemas/product`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve the product mapping schema related to a catalog
         * @summary Get the product mapping schema related to a catalog
         * @param {string} id Catalog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalogsMappingSchemaProduct: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAppCatalogsMappingSchemaProduct', 'id', id)
            const localVarPath = `/api/rest/v1/catalogs/{id}/mapping-schemas/product`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create or update the product mapping schema related to a catalog
         * @summary Create or update the product mapping schema related to a catalog
         * @param {string} id Catalog ID
         * @param {GetAppCatalogsMappingSchemaProduct200Response} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAppCatalogsMappingSchemaProduct: async (id: string, body?: GetAppCatalogsMappingSchemaProduct200Response, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putAppCatalogsMappingSchemaProduct', 'id', id)
            const localVarPath = `/api/rest/v1/catalogs/{id}/mapping-schemas/product`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MappingSchemaForProductsApi - functional programming interface
 * @export
 */
export const MappingSchemaForProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MappingSchemaForProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to delete the product mapping schema related to a catalog
         * @summary Delete the product mapping schema related to a catalog
         * @param {string} id Catalog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppCatalogsMappingSchemaProduct(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAppCatalogsMappingSchemaProduct(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to retrieve the product mapping schema related to a catalog
         * @summary Get the product mapping schema related to a catalog
         * @param {string} id Catalog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppCatalogsMappingSchemaProduct(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAppCatalogsMappingSchemaProduct200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppCatalogsMappingSchemaProduct(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create or update the product mapping schema related to a catalog
         * @summary Create or update the product mapping schema related to a catalog
         * @param {string} id Catalog ID
         * @param {GetAppCatalogsMappingSchemaProduct200Response} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAppCatalogsMappingSchemaProduct(id: string, body?: GetAppCatalogsMappingSchemaProduct200Response, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAppCatalogsMappingSchemaProduct(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MappingSchemaForProductsApi - factory interface
 * @export
 */
export const MappingSchemaForProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MappingSchemaForProductsApiFp(configuration)
    return {
        /**
         * This endpoint allows you to delete the product mapping schema related to a catalog
         * @summary Delete the product mapping schema related to a catalog
         * @param {string} id Catalog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppCatalogsMappingSchemaProduct(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAppCatalogsMappingSchemaProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve the product mapping schema related to a catalog
         * @summary Get the product mapping schema related to a catalog
         * @param {string} id Catalog ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppCatalogsMappingSchemaProduct(id: string, options?: any): AxiosPromise<GetAppCatalogsMappingSchemaProduct200Response> {
            return localVarFp.getAppCatalogsMappingSchemaProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create or update the product mapping schema related to a catalog
         * @summary Create or update the product mapping schema related to a catalog
         * @param {string} id Catalog ID
         * @param {GetAppCatalogsMappingSchemaProduct200Response} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAppCatalogsMappingSchemaProduct(id: string, body?: GetAppCatalogsMappingSchemaProduct200Response, options?: any): AxiosPromise<void> {
            return localVarFp.putAppCatalogsMappingSchemaProduct(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MappingSchemaForProductsApi - object-oriented interface
 * @export
 * @class MappingSchemaForProductsApi
 * @extends {BaseAPI}
 */
export class MappingSchemaForProductsApi extends BaseAPI {
    /**
     * This endpoint allows you to delete the product mapping schema related to a catalog
     * @summary Delete the product mapping schema related to a catalog
     * @param {string} id Catalog ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MappingSchemaForProductsApi
     */
    public deleteAppCatalogsMappingSchemaProduct(id: string, options?: AxiosRequestConfig) {
        return MappingSchemaForProductsApiFp(this.configuration).deleteAppCatalogsMappingSchemaProduct(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve the product mapping schema related to a catalog
     * @summary Get the product mapping schema related to a catalog
     * @param {string} id Catalog ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MappingSchemaForProductsApi
     */
    public getAppCatalogsMappingSchemaProduct(id: string, options?: AxiosRequestConfig) {
        return MappingSchemaForProductsApiFp(this.configuration).getAppCatalogsMappingSchemaProduct(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create or update the product mapping schema related to a catalog
     * @summary Create or update the product mapping schema related to a catalog
     * @param {string} id Catalog ID
     * @param {GetAppCatalogsMappingSchemaProduct200Response} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MappingSchemaForProductsApi
     */
    public putAppCatalogsMappingSchemaProduct(id: string, body?: GetAppCatalogsMappingSchemaProduct200Response, options?: AxiosRequestConfig) {
        return MappingSchemaForProductsApiFp(this.configuration).putAppCatalogsMappingSchemaProduct(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MeasureFamilyApi - axios parameter creator
 * @export
 */
export const MeasureFamilyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get the information about a given measure family.
         * @summary Get a measure family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        measureFamiliesGet: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('measureFamiliesGet', 'code', code)
            const localVarPath = `/api/rest/v1/measure-families/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get a list of measure families. Measure families are paginated and sorted by code.
         * @summary Get list of measure familiy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        measureFamiliesGetList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/measure-families`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeasureFamilyApi - functional programming interface
 * @export
 */
export const MeasureFamilyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeasureFamilyApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get the information about a given measure family.
         * @summary Get a measure family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async measureFamiliesGet(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeasureFamiliesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.measureFamiliesGet(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get a list of measure families. Measure families are paginated and sorted by code.
         * @summary Get list of measure familiy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async measureFamiliesGetList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeasureFamilies>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.measureFamiliesGetList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeasureFamilyApi - factory interface
 * @export
 */
export const MeasureFamilyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeasureFamilyApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get the information about a given measure family.
         * @summary Get a measure family
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        measureFamiliesGet(code: string, options?: any): AxiosPromise<MeasureFamiliesGet200Response> {
            return localVarFp.measureFamiliesGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get a list of measure families. Measure families are paginated and sorted by code.
         * @summary Get list of measure familiy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        measureFamiliesGetList(options?: any): AxiosPromise<MeasureFamilies> {
            return localVarFp.measureFamiliesGetList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeasureFamilyApi - object-oriented interface
 * @export
 * @class MeasureFamilyApi
 * @extends {BaseAPI}
 */
export class MeasureFamilyApi extends BaseAPI {
    /**
     * This endpoint allows you to get the information about a given measure family.
     * @summary Get a measure family
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasureFamilyApi
     */
    public measureFamiliesGet(code: string, options?: AxiosRequestConfig) {
        return MeasureFamilyApiFp(this.configuration).measureFamiliesGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get a list of measure families. Measure families are paginated and sorted by code.
     * @summary Get list of measure familiy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasureFamilyApi
     */
    public measureFamiliesGetList(options?: AxiosRequestConfig) {
        return MeasureFamilyApiFp(this.configuration).measureFamiliesGetList(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MeasurementFamilyApi - axios parameter creator
 * @export
 */
export const MeasurementFamilyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of measurement families.
         * @summary Get list of measurement families
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        measurementFamiliesGetList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/measurement-families`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update and/or create several measurement families at once.
         * @summary Update/create several measurement families
         * @param {Array<MeasurementFamiliesGetList200Response>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMeasurementFamilies: async (body?: Array<MeasurementFamiliesGetList200Response>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/measurement-families`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeasurementFamilyApi - functional programming interface
 * @export
 */
export const MeasurementFamilyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeasurementFamilyApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of measurement families.
         * @summary Get list of measurement families
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async measurementFamiliesGetList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeasurementFamiliesGetList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.measurementFamiliesGetList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update and/or create several measurement families at once.
         * @summary Update/create several measurement families
         * @param {Array<MeasurementFamiliesGetList200Response>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMeasurementFamilies(body?: Array<MeasurementFamiliesGetList200Response>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatchMeasurementFamilies200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMeasurementFamilies(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeasurementFamilyApi - factory interface
 * @export
 */
export const MeasurementFamilyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeasurementFamilyApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of measurement families.
         * @summary Get list of measurement families
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        measurementFamiliesGetList(options?: any): AxiosPromise<MeasurementFamiliesGetList200Response> {
            return localVarFp.measurementFamiliesGetList(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update and/or create several measurement families at once.
         * @summary Update/create several measurement families
         * @param {Array<MeasurementFamiliesGetList200Response>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMeasurementFamilies(body?: Array<MeasurementFamiliesGetList200Response>, options?: any): AxiosPromise<Array<PatchMeasurementFamilies200ResponseInner>> {
            return localVarFp.patchMeasurementFamilies(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeasurementFamilyApi - object-oriented interface
 * @export
 * @class MeasurementFamilyApi
 * @extends {BaseAPI}
 */
export class MeasurementFamilyApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of measurement families.
     * @summary Get list of measurement families
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementFamilyApi
     */
    public measurementFamiliesGetList(options?: AxiosRequestConfig) {
        return MeasurementFamilyApiFp(this.configuration).measurementFamiliesGetList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update and/or create several measurement families at once.
     * @summary Update/create several measurement families
     * @param {Array<MeasurementFamiliesGetList200Response>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementFamilyApi
     */
    public patchMeasurementFamilies(body?: Array<MeasurementFamiliesGetList200Response>, options?: AxiosRequestConfig) {
        return MeasurementFamilyApiFp(this.configuration).patchMeasurementFamilies(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OverviewApi - axios parameter creator
 * @export
 */
export const OverviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get the list of all the available endpoints. No need to be authenticated to use this endpoint.
         * @summary Get list of all endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpoints: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OverviewApi - functional programming interface
 * @export
 */
export const OverviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OverviewApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get the list of all the available endpoints. No need to be authenticated to use this endpoint.
         * @summary Get list of all endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEndpoints(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEndpoints200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEndpoints(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OverviewApi - factory interface
 * @export
 */
export const OverviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OverviewApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get the list of all the available endpoints. No need to be authenticated to use this endpoint.
         * @summary Get list of all endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpoints(options?: any): AxiosPromise<GetEndpoints200Response> {
            return localVarFp.getEndpoints(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OverviewApi - object-oriented interface
 * @export
 * @class OverviewApi
 * @extends {BaseAPI}
 */
export class OverviewApi extends BaseAPI {
    /**
     * This endpoint allows you to get the list of all the available endpoints. No need to be authenticated to use this endpoint.
     * @summary Get list of all endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverviewApi
     */
    public getEndpoints(options?: AxiosRequestConfig) {
        return OverviewApiFp(this.configuration).getEndpoints(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PAMAssetApi - axios parameter creator
 * @export
 */
export const PAMAssetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of PAM assets. PAM assets are paginated.
         * @summary Get list of PAM assets
         * @param {GetPamAssetsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPamAssets: async (paginationType?: GetPamAssetsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationType !== undefined) {
                localVarQueryParameter['pagination_type'] = paginationType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (searchAfter !== undefined) {
                localVarQueryParameter['search_after'] = searchAfter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given PAM asset.
         * @summary Get a PAM asset
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPamAssetsCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getPamAssetsCode', 'code', code)
            const localVarPath = `/api/rest/v1/assets/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update several PAM assets at once.
         * @summary Update/create several PAM assets
         * @param {PatchPamAssetsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPamAssets: async (body?: PatchPamAssetsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given PAM asset. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no asset exists for the given code, it creates it.
         * @summary Update/create a PAM asset
         * @param {string} code Code of the resource
         * @param {PostPamAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPamAssetsCode: async (code: string, body: PostPamAssetsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchPamAssetsCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchPamAssetsCode', 'body', body)
            const localVarPath = `/api/rest/v1/assets/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new PAM asset.
         * @summary Create a new PAM asset
         * @param {PostPamAssetsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPamAssets: async (body?: PostPamAssetsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PAMAssetApi - functional programming interface
 * @export
 */
export const PAMAssetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PAMAssetApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of PAM assets. PAM assets are paginated.
         * @summary Get list of PAM assets
         * @param {GetPamAssetsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPamAssets(paginationType?: GetPamAssetsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PAMAssets>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPamAssets(paginationType, page, searchAfter, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given PAM asset.
         * @summary Get a PAM asset
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPamAssetsCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPamAssetsCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPamAssetsCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update several PAM assets at once.
         * @summary Update/create several PAM assets
         * @param {PatchPamAssetsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPamAssets(body?: PatchPamAssetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPamAssets(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given PAM asset. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no asset exists for the given code, it creates it.
         * @summary Update/create a PAM asset
         * @param {string} code Code of the resource
         * @param {PostPamAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPamAssetsCode(code: string, body: PostPamAssetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPamAssetsCode(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new PAM asset.
         * @summary Create a new PAM asset
         * @param {PostPamAssetsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPamAssets(body?: PostPamAssetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPamAssets(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PAMAssetApi - factory interface
 * @export
 */
export const PAMAssetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PAMAssetApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of PAM assets. PAM assets are paginated.
         * @summary Get list of PAM assets
         * @param {GetPamAssetsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPamAssets(paginationType?: GetPamAssetsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, options?: any): AxiosPromise<PAMAssets> {
            return localVarFp.getPamAssets(paginationType, page, searchAfter, limit, withCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given PAM asset.
         * @summary Get a PAM asset
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPamAssetsCode(code: string, options?: any): AxiosPromise<GetPamAssetsCode200Response> {
            return localVarFp.getPamAssetsCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update several PAM assets at once.
         * @summary Update/create several PAM assets
         * @param {PatchPamAssetsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPamAssets(body?: PatchPamAssetsRequest, options?: any): AxiosPromise<PatchProducts200Response> {
            return localVarFp.patchPamAssets(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given PAM asset. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no asset exists for the given code, it creates it.
         * @summary Update/create a PAM asset
         * @param {string} code Code of the resource
         * @param {PostPamAssetsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPamAssetsCode(code: string, body: PostPamAssetsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchPamAssetsCode(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new PAM asset.
         * @summary Create a new PAM asset
         * @param {PostPamAssetsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPamAssets(body?: PostPamAssetsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postPamAssets(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PAMAssetApi - object-oriented interface
 * @export
 * @class PAMAssetApi
 * @extends {BaseAPI}
 */
export class PAMAssetApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of PAM assets. PAM assets are paginated.
     * @summary Get list of PAM assets
     * @param {GetPamAssetsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetApi
     */
    public getPamAssets(paginationType?: GetPamAssetsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return PAMAssetApiFp(this.configuration).getPamAssets(paginationType, page, searchAfter, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given PAM asset.
     * @summary Get a PAM asset
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetApi
     */
    public getPamAssetsCode(code: string, options?: AxiosRequestConfig) {
        return PAMAssetApiFp(this.configuration).getPamAssetsCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update several PAM assets at once.
     * @summary Update/create several PAM assets
     * @param {PatchPamAssetsRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetApi
     */
    public patchPamAssets(body?: PatchPamAssetsRequest, options?: AxiosRequestConfig) {
        return PAMAssetApiFp(this.configuration).patchPamAssets(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given PAM asset. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no asset exists for the given code, it creates it.
     * @summary Update/create a PAM asset
     * @param {string} code Code of the resource
     * @param {PostPamAssetsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetApi
     */
    public patchPamAssetsCode(code: string, body: PostPamAssetsRequest, options?: AxiosRequestConfig) {
        return PAMAssetApiFp(this.configuration).patchPamAssetsCode(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new PAM asset.
     * @summary Create a new PAM asset
     * @param {PostPamAssetsRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetApi
     */
    public postPamAssets(body?: PostPamAssetsRequest, options?: AxiosRequestConfig) {
        return PAMAssetApiFp(this.configuration).postPamAssets(body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetPamAssetsPaginationTypeEnum = {
    Page: 'page',
    SearchAfter: 'search_after'
} as const;
export type GetPamAssetsPaginationTypeEnum = typeof GetPamAssetsPaginationTypeEnum[keyof typeof GetPamAssetsPaginationTypeEnum];


/**
 * PAMAssetCategoryApi - axios parameter creator
 * @export
 */
export const PAMAssetCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of PAM asset categories. PAM asset categories are paginated and sorted by `root/left`.
         * @summary Get list of PAM asset categories
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetCategories: async (page?: number, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/asset-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given PAM asset category.
         * @summary Get a PAM asset category
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetCategoriesCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getAssetCategoriesCode', 'code', code)
            const localVarPath = `/api/rest/v1/asset-categories/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update several PAM asset categories at once.
         * @summary Update/create several PAM asset categories
         * @param {PatchAssetCategoriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetCategories: async (body?: PatchAssetCategoriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/asset-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given PAM asset category. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no category exists for the given code, it creates it.
         * @summary Update/create a PAM asset category
         * @param {string} code Code of the resource
         * @param {PostAssetCategoriesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetCategoriesCode: async (code: string, body: PostAssetCategoriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchAssetCategoriesCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchAssetCategoriesCode', 'body', body)
            const localVarPath = `/api/rest/v1/asset-categories/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new PAM asset category.
         * @summary Create a new PAM asset category
         * @param {PostAssetCategoriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetCategories: async (body?: PostAssetCategoriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/asset-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PAMAssetCategoryApi - functional programming interface
 * @export
 */
export const PAMAssetCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PAMAssetCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of PAM asset categories. PAM asset categories are paginated and sorted by `root/left`.
         * @summary Get list of PAM asset categories
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetCategories(page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PAMAssetCategories>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetCategories(page, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given PAM asset category.
         * @summary Get a PAM asset category
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetCategoriesCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAssetCategoriesRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetCategoriesCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update several PAM asset categories at once.
         * @summary Update/create several PAM asset categories
         * @param {PatchAssetCategoriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssetCategories(body?: PatchAssetCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssetCategories(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given PAM asset category. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no category exists for the given code, it creates it.
         * @summary Update/create a PAM asset category
         * @param {string} code Code of the resource
         * @param {PostAssetCategoriesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssetCategoriesCode(code: string, body: PostAssetCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssetCategoriesCode(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new PAM asset category.
         * @summary Create a new PAM asset category
         * @param {PostAssetCategoriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAssetCategories(body?: PostAssetCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAssetCategories(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PAMAssetCategoryApi - factory interface
 * @export
 */
export const PAMAssetCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PAMAssetCategoryApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of PAM asset categories. PAM asset categories are paginated and sorted by `root/left`.
         * @summary Get list of PAM asset categories
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetCategories(page?: number, limit?: number, withCount?: boolean, options?: any): AxiosPromise<PAMAssetCategories> {
            return localVarFp.getAssetCategories(page, limit, withCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given PAM asset category.
         * @summary Get a PAM asset category
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetCategoriesCode(code: string, options?: any): AxiosPromise<PostAssetCategoriesRequest> {
            return localVarFp.getAssetCategoriesCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update several PAM asset categories at once.
         * @summary Update/create several PAM asset categories
         * @param {PatchAssetCategoriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetCategories(body?: PatchAssetCategoriesRequest, options?: any): AxiosPromise<PatchProducts200Response> {
            return localVarFp.patchAssetCategories(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given PAM asset category. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no category exists for the given code, it creates it.
         * @summary Update/create a PAM asset category
         * @param {string} code Code of the resource
         * @param {PostAssetCategoriesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetCategoriesCode(code: string, body: PostAssetCategoriesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchAssetCategoriesCode(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new PAM asset category.
         * @summary Create a new PAM asset category
         * @param {PostAssetCategoriesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetCategories(body?: PostAssetCategoriesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postAssetCategories(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PAMAssetCategoryApi - object-oriented interface
 * @export
 * @class PAMAssetCategoryApi
 * @extends {BaseAPI}
 */
export class PAMAssetCategoryApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of PAM asset categories. PAM asset categories are paginated and sorted by `root/left`.
     * @summary Get list of PAM asset categories
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetCategoryApi
     */
    public getAssetCategories(page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return PAMAssetCategoryApiFp(this.configuration).getAssetCategories(page, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given PAM asset category.
     * @summary Get a PAM asset category
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetCategoryApi
     */
    public getAssetCategoriesCode(code: string, options?: AxiosRequestConfig) {
        return PAMAssetCategoryApiFp(this.configuration).getAssetCategoriesCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update several PAM asset categories at once.
     * @summary Update/create several PAM asset categories
     * @param {PatchAssetCategoriesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetCategoryApi
     */
    public patchAssetCategories(body?: PatchAssetCategoriesRequest, options?: AxiosRequestConfig) {
        return PAMAssetCategoryApiFp(this.configuration).patchAssetCategories(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given PAM asset category. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no category exists for the given code, it creates it.
     * @summary Update/create a PAM asset category
     * @param {string} code Code of the resource
     * @param {PostAssetCategoriesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetCategoryApi
     */
    public patchAssetCategoriesCode(code: string, body: PostAssetCategoriesRequest, options?: AxiosRequestConfig) {
        return PAMAssetCategoryApiFp(this.configuration).patchAssetCategoriesCode(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new PAM asset category.
     * @summary Create a new PAM asset category
     * @param {PostAssetCategoriesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetCategoryApi
     */
    public postAssetCategories(body?: PostAssetCategoriesRequest, options?: AxiosRequestConfig) {
        return PAMAssetCategoryApiFp(this.configuration).postAssetCategories(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PAMAssetReferenceFileApi - axios parameter creator
 * @export
 */
export const PAMAssetReferenceFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to download a given reference file.
         * @summary Download a reference file
         * @param {string} assetCode Code of the asset
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceFilesChannelCodeLocaleCodeDownload: async (assetCode: string, localeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetCode' is not null or undefined
            assertParamExists('getReferenceFilesChannelCodeLocaleCodeDownload', 'assetCode', assetCode)
            // verify required parameter 'localeCode' is not null or undefined
            assertParamExists('getReferenceFilesChannelCodeLocaleCodeDownload', 'localeCode', localeCode)
            const localVarPath = `/api/rest/v1/assets/{asset_code}/reference-files/{locale_code}/download`
                .replace(`{${"asset_code"}}`, encodeURIComponent(String(assetCode)))
                .replace(`{${"locale_code"}}`, encodeURIComponent(String(localeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a reference file of a given PAM asset.
         * @summary Get a reference file
         * @param {string} assetCode Code of the asset
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceFilesLocaleCode: async (assetCode: string, localeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetCode' is not null or undefined
            assertParamExists('getReferenceFilesLocaleCode', 'assetCode', assetCode)
            // verify required parameter 'localeCode' is not null or undefined
            assertParamExists('getReferenceFilesLocaleCode', 'localeCode', localeCode)
            const localVarPath = `/api/rest/v1/assets/{asset_code}/reference-files/{locale_code}`
                .replace(`{${"asset_code"}}`, encodeURIComponent(String(assetCode)))
                .replace(`{${"locale_code"}}`, encodeURIComponent(String(localeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to upload a new reference file for a given PAM asset and locale. It will also automatically generate all the variation files corresponding to this reference file.
         * @summary Upload a new reference file
         * @param {string} assetCode Code of the asset
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostReferenceFilesLocaleCodeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReferenceFilesLocaleCode: async (assetCode: string, localeCode: string, contentType: string, body?: PostReferenceFilesLocaleCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetCode' is not null or undefined
            assertParamExists('postReferenceFilesLocaleCode', 'assetCode', assetCode)
            // verify required parameter 'localeCode' is not null or undefined
            assertParamExists('postReferenceFilesLocaleCode', 'localeCode', localeCode)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postReferenceFilesLocaleCode', 'contentType', contentType)
            const localVarPath = `/api/rest/v1/assets/{asset_code}/reference-files/{locale_code}`
                .replace(`{${"asset_code"}}`, encodeURIComponent(String(assetCode)))
                .replace(`{${"locale_code"}}`, encodeURIComponent(String(localeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType != null) {
                localVarHeaderParameter['Content-type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PAMAssetReferenceFileApi - functional programming interface
 * @export
 */
export const PAMAssetReferenceFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PAMAssetReferenceFileApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to download a given reference file.
         * @summary Download a reference file
         * @param {string} assetCode Code of the asset
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceFilesChannelCodeLocaleCodeDownload(assetCode: string, localeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceFilesChannelCodeLocaleCodeDownload(assetCode, localeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a reference file of a given PAM asset.
         * @summary Get a reference file
         * @param {string} assetCode Code of the asset
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceFilesLocaleCode(assetCode: string, localeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReferenceFilesLocaleCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceFilesLocaleCode(assetCode, localeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to upload a new reference file for a given PAM asset and locale. It will also automatically generate all the variation files corresponding to this reference file.
         * @summary Upload a new reference file
         * @param {string} assetCode Code of the asset
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostReferenceFilesLocaleCodeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postReferenceFilesLocaleCode(assetCode: string, localeCode: string, contentType: string, body?: PostReferenceFilesLocaleCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostReferenceFilesLocaleCode201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postReferenceFilesLocaleCode(assetCode, localeCode, contentType, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PAMAssetReferenceFileApi - factory interface
 * @export
 */
export const PAMAssetReferenceFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PAMAssetReferenceFileApiFp(configuration)
    return {
        /**
         * This endpoint allows you to download a given reference file.
         * @summary Download a reference file
         * @param {string} assetCode Code of the asset
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceFilesChannelCodeLocaleCodeDownload(assetCode: string, localeCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.getReferenceFilesChannelCodeLocaleCodeDownload(assetCode, localeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a reference file of a given PAM asset.
         * @summary Get a reference file
         * @param {string} assetCode Code of the asset
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceFilesLocaleCode(assetCode: string, localeCode: string, options?: any): AxiosPromise<GetReferenceFilesLocaleCode200Response> {
            return localVarFp.getReferenceFilesLocaleCode(assetCode, localeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to upload a new reference file for a given PAM asset and locale. It will also automatically generate all the variation files corresponding to this reference file.
         * @summary Upload a new reference file
         * @param {string} assetCode Code of the asset
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostReferenceFilesLocaleCodeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReferenceFilesLocaleCode(assetCode: string, localeCode: string, contentType: string, body?: PostReferenceFilesLocaleCodeRequest, options?: any): AxiosPromise<PostReferenceFilesLocaleCode201Response> {
            return localVarFp.postReferenceFilesLocaleCode(assetCode, localeCode, contentType, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PAMAssetReferenceFileApi - object-oriented interface
 * @export
 * @class PAMAssetReferenceFileApi
 * @extends {BaseAPI}
 */
export class PAMAssetReferenceFileApi extends BaseAPI {
    /**
     * This endpoint allows you to download a given reference file.
     * @summary Download a reference file
     * @param {string} assetCode Code of the asset
     * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetReferenceFileApi
     */
    public getReferenceFilesChannelCodeLocaleCodeDownload(assetCode: string, localeCode: string, options?: AxiosRequestConfig) {
        return PAMAssetReferenceFileApiFp(this.configuration).getReferenceFilesChannelCodeLocaleCodeDownload(assetCode, localeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a reference file of a given PAM asset.
     * @summary Get a reference file
     * @param {string} assetCode Code of the asset
     * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetReferenceFileApi
     */
    public getReferenceFilesLocaleCode(assetCode: string, localeCode: string, options?: AxiosRequestConfig) {
        return PAMAssetReferenceFileApiFp(this.configuration).getReferenceFilesLocaleCode(assetCode, localeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to upload a new reference file for a given PAM asset and locale. It will also automatically generate all the variation files corresponding to this reference file.
     * @summary Upload a new reference file
     * @param {string} assetCode Code of the asset
     * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
     * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
     * @param {PostReferenceFilesLocaleCodeRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetReferenceFileApi
     */
    public postReferenceFilesLocaleCode(assetCode: string, localeCode: string, contentType: string, body?: PostReferenceFilesLocaleCodeRequest, options?: AxiosRequestConfig) {
        return PAMAssetReferenceFileApiFp(this.configuration).postReferenceFilesLocaleCode(assetCode, localeCode, contentType, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PAMAssetTagApi - axios parameter creator
 * @export
 */
export const PAMAssetTagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of PAM asset tags. PAM asset tags are paginated.
         * @summary Get list of PAM asset tags
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetTags: async (page?: number, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/asset-tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given PAM asset tag.
         * @summary Get a PAM asset tag
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetTagsCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getAssetTagsCode', 'code', code)
            const localVarPath = `/api/rest/v1/asset-tags/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given PAM asset tag. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no tag exists for the given code, it creates it.
         * @summary Update/create a PAM asset tag
         * @param {string} code Code of the resource
         * @param {GetAssetTagsCode200Response} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetTagsCode: async (code: string, body: GetAssetTagsCode200Response, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchAssetTagsCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchAssetTagsCode', 'body', body)
            const localVarPath = `/api/rest/v1/asset-tags/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PAMAssetTagApi - functional programming interface
 * @export
 */
export const PAMAssetTagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PAMAssetTagApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of PAM asset tags. PAM asset tags are paginated.
         * @summary Get list of PAM asset tags
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetTags(page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PAMAssetTags>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetTags(page, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given PAM asset tag.
         * @summary Get a PAM asset tag
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetTagsCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAssetTagsCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetTagsCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given PAM asset tag. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no tag exists for the given code, it creates it.
         * @summary Update/create a PAM asset tag
         * @param {string} code Code of the resource
         * @param {GetAssetTagsCode200Response} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssetTagsCode(code: string, body: GetAssetTagsCode200Response, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssetTagsCode(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PAMAssetTagApi - factory interface
 * @export
 */
export const PAMAssetTagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PAMAssetTagApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of PAM asset tags. PAM asset tags are paginated.
         * @summary Get list of PAM asset tags
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetTags(page?: number, limit?: number, withCount?: boolean, options?: any): AxiosPromise<PAMAssetTags> {
            return localVarFp.getAssetTags(page, limit, withCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given PAM asset tag.
         * @summary Get a PAM asset tag
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetTagsCode(code: string, options?: any): AxiosPromise<GetAssetTagsCode200Response> {
            return localVarFp.getAssetTagsCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given PAM asset tag. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no tag exists for the given code, it creates it.
         * @summary Update/create a PAM asset tag
         * @param {string} code Code of the resource
         * @param {GetAssetTagsCode200Response} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetTagsCode(code: string, body: GetAssetTagsCode200Response, options?: any): AxiosPromise<void> {
            return localVarFp.patchAssetTagsCode(code, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PAMAssetTagApi - object-oriented interface
 * @export
 * @class PAMAssetTagApi
 * @extends {BaseAPI}
 */
export class PAMAssetTagApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of PAM asset tags. PAM asset tags are paginated.
     * @summary Get list of PAM asset tags
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetTagApi
     */
    public getAssetTags(page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return PAMAssetTagApiFp(this.configuration).getAssetTags(page, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given PAM asset tag.
     * @summary Get a PAM asset tag
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetTagApi
     */
    public getAssetTagsCode(code: string, options?: AxiosRequestConfig) {
        return PAMAssetTagApiFp(this.configuration).getAssetTagsCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given PAM asset tag. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no tag exists for the given code, it creates it.
     * @summary Update/create a PAM asset tag
     * @param {string} code Code of the resource
     * @param {GetAssetTagsCode200Response} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetTagApi
     */
    public patchAssetTagsCode(code: string, body: GetAssetTagsCode200Response, options?: AxiosRequestConfig) {
        return PAMAssetTagApiFp(this.configuration).patchAssetTagsCode(code, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PAMAssetVariationFileApi - axios parameter creator
 * @export
 */
export const PAMAssetVariationFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get the information about a variation file of a given PAM asset.
         * @summary Get a variation file
         * @param {string} assetCode Code of the asset
         * @param {string} channelCode Code of the channel
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariationFilesChannelCodeLocaleCode: async (assetCode: string, channelCode: string, localeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetCode' is not null or undefined
            assertParamExists('getVariationFilesChannelCodeLocaleCode', 'assetCode', assetCode)
            // verify required parameter 'channelCode' is not null or undefined
            assertParamExists('getVariationFilesChannelCodeLocaleCode', 'channelCode', channelCode)
            // verify required parameter 'localeCode' is not null or undefined
            assertParamExists('getVariationFilesChannelCodeLocaleCode', 'localeCode', localeCode)
            const localVarPath = `/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}`
                .replace(`{${"asset_code"}}`, encodeURIComponent(String(assetCode)))
                .replace(`{${"channel_code"}}`, encodeURIComponent(String(channelCode)))
                .replace(`{${"locale_code"}}`, encodeURIComponent(String(localeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to download a given variation file.
         * @summary Download a variation file
         * @param {string} assetCode Code of the asset
         * @param {string} channelCode Code of the channel
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariationFilesChannelCodeLocaleCodeDownload: async (assetCode: string, channelCode: string, localeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetCode' is not null or undefined
            assertParamExists('getVariationFilesChannelCodeLocaleCodeDownload', 'assetCode', assetCode)
            // verify required parameter 'channelCode' is not null or undefined
            assertParamExists('getVariationFilesChannelCodeLocaleCodeDownload', 'channelCode', channelCode)
            // verify required parameter 'localeCode' is not null or undefined
            assertParamExists('getVariationFilesChannelCodeLocaleCodeDownload', 'localeCode', localeCode)
            const localVarPath = `/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}/download`
                .replace(`{${"asset_code"}}`, encodeURIComponent(String(assetCode)))
                .replace(`{${"channel_code"}}`, encodeURIComponent(String(channelCode)))
                .replace(`{${"locale_code"}}`, encodeURIComponent(String(localeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.
         * @summary Upload a new variation file
         * @param {string} assetCode Code of the asset
         * @param {string} channelCode Code of the channel
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostReferenceFilesLocaleCodeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVariationFilesChannelCodeLocaleCode: async (assetCode: string, channelCode: string, localeCode: string, contentType: string, body?: PostReferenceFilesLocaleCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetCode' is not null or undefined
            assertParamExists('postVariationFilesChannelCodeLocaleCode', 'assetCode', assetCode)
            // verify required parameter 'channelCode' is not null or undefined
            assertParamExists('postVariationFilesChannelCodeLocaleCode', 'channelCode', channelCode)
            // verify required parameter 'localeCode' is not null or undefined
            assertParamExists('postVariationFilesChannelCodeLocaleCode', 'localeCode', localeCode)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postVariationFilesChannelCodeLocaleCode', 'contentType', contentType)
            const localVarPath = `/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}`
                .replace(`{${"asset_code"}}`, encodeURIComponent(String(assetCode)))
                .replace(`{${"channel_code"}}`, encodeURIComponent(String(channelCode)))
                .replace(`{${"locale_code"}}`, encodeURIComponent(String(localeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType != null) {
                localVarHeaderParameter['Content-type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PAMAssetVariationFileApi - functional programming interface
 * @export
 */
export const PAMAssetVariationFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PAMAssetVariationFileApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get the information about a variation file of a given PAM asset.
         * @summary Get a variation file
         * @param {string} assetCode Code of the asset
         * @param {string} channelCode Code of the channel
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariationFilesChannelCodeLocaleCode(assetCode: string, channelCode: string, localeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVariationFilesChannelCodeLocaleCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVariationFilesChannelCodeLocaleCode(assetCode, channelCode, localeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to download a given variation file.
         * @summary Download a variation file
         * @param {string} assetCode Code of the asset
         * @param {string} channelCode Code of the channel
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariationFilesChannelCodeLocaleCodeDownload(assetCode: string, channelCode: string, localeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVariationFilesChannelCodeLocaleCodeDownload(assetCode, channelCode, localeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.
         * @summary Upload a new variation file
         * @param {string} assetCode Code of the asset
         * @param {string} channelCode Code of the channel
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostReferenceFilesLocaleCodeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postVariationFilesChannelCodeLocaleCode(assetCode: string, channelCode: string, localeCode: string, contentType: string, body?: PostReferenceFilesLocaleCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postVariationFilesChannelCodeLocaleCode(assetCode, channelCode, localeCode, contentType, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PAMAssetVariationFileApi - factory interface
 * @export
 */
export const PAMAssetVariationFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PAMAssetVariationFileApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get the information about a variation file of a given PAM asset.
         * @summary Get a variation file
         * @param {string} assetCode Code of the asset
         * @param {string} channelCode Code of the channel
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariationFilesChannelCodeLocaleCode(assetCode: string, channelCode: string, localeCode: string, options?: any): AxiosPromise<GetVariationFilesChannelCodeLocaleCode200Response> {
            return localVarFp.getVariationFilesChannelCodeLocaleCode(assetCode, channelCode, localeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to download a given variation file.
         * @summary Download a variation file
         * @param {string} assetCode Code of the asset
         * @param {string} channelCode Code of the channel
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariationFilesChannelCodeLocaleCodeDownload(assetCode: string, channelCode: string, localeCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.getVariationFilesChannelCodeLocaleCodeDownload(assetCode, channelCode, localeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.
         * @summary Upload a new variation file
         * @param {string} assetCode Code of the asset
         * @param {string} channelCode Code of the channel
         * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostReferenceFilesLocaleCodeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVariationFilesChannelCodeLocaleCode(assetCode: string, channelCode: string, localeCode: string, contentType: string, body?: PostReferenceFilesLocaleCodeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postVariationFilesChannelCodeLocaleCode(assetCode, channelCode, localeCode, contentType, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PAMAssetVariationFileApi - object-oriented interface
 * @export
 * @class PAMAssetVariationFileApi
 * @extends {BaseAPI}
 */
export class PAMAssetVariationFileApi extends BaseAPI {
    /**
     * This endpoint allows you to get the information about a variation file of a given PAM asset.
     * @summary Get a variation file
     * @param {string} assetCode Code of the asset
     * @param {string} channelCode Code of the channel
     * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetVariationFileApi
     */
    public getVariationFilesChannelCodeLocaleCode(assetCode: string, channelCode: string, localeCode: string, options?: AxiosRequestConfig) {
        return PAMAssetVariationFileApiFp(this.configuration).getVariationFilesChannelCodeLocaleCode(assetCode, channelCode, localeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to download a given variation file.
     * @summary Download a variation file
     * @param {string} assetCode Code of the asset
     * @param {string} channelCode Code of the channel
     * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetVariationFileApi
     */
    public getVariationFilesChannelCodeLocaleCodeDownload(assetCode: string, channelCode: string, localeCode: string, options?: AxiosRequestConfig) {
        return PAMAssetVariationFileApiFp(this.configuration).getVariationFilesChannelCodeLocaleCodeDownload(assetCode, channelCode, localeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.
     * @summary Upload a new variation file
     * @param {string} assetCode Code of the asset
     * @param {string} channelCode Code of the channel
     * @param {string} localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable
     * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
     * @param {PostReferenceFilesLocaleCodeRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PAMAssetVariationFileApi
     */
    public postVariationFilesChannelCodeLocaleCode(assetCode: string, channelCode: string, localeCode: string, contentType: string, body?: PostReferenceFilesLocaleCodeRequest, options?: AxiosRequestConfig) {
        return PAMAssetVariationFileApiFp(this.configuration).postVariationFilesChannelCodeLocaleCode(assetCode, channelCode, localeCode, contentType, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductIdentifierApi - axios parameter creator
 * @export
 */
export const ProductIdentifierApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to delete a given product. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the product you try to delete.
         * @summary Delete a product
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductsCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteProductsCode', 'code', code)
            const localVarPath = `/api/rest/v1/products/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given draft.
         * @summary Get a draft
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraftCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getDraftCode', 'code', code)
            const localVarPath = `/api/rest/v1/products/{code}/draft`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
         * @summary Get list of products
         * @param {string} [search] Filter products, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-channel\&quot;&gt;Filter product values via channel&lt;/a&gt; section
         * @param {string} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-locale\&quot;&gt;Filter product values via locale&lt;/a&gt; section
         * @param {string} [attributes] Filter product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section
         * @param {GetProductsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
         * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
         * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts: async (search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetProductsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (locales !== undefined) {
                localVarQueryParameter['locales'] = locales;
            }

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (paginationType !== undefined) {
                localVarQueryParameter['pagination_type'] = paginationType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (searchAfter !== undefined) {
                localVarQueryParameter['search_after'] = searchAfter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }

            if (withAttributeOptions !== undefined) {
                localVarQueryParameter['with_attribute_options'] = withAttributeOptions;
            }

            if (withQualityScores !== undefined) {
                localVarQueryParameter['with_quality_scores'] = withQualityScores;
            }

            if (withCompletenesses !== undefined) {
                localVarQueryParameter['with_completenesses'] = withCompletenesses;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given product. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you request.
         * @summary Get a product
         * @param {string} code Code of the resource
         * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
         * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
         * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsCode: async (code: string, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getProductsCode', 'code', code)
            const localVarPath = `/api/rest/v1/products/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (withAttributeOptions !== undefined) {
                localVarQueryParameter['with_attribute_options'] = withAttributeOptions;
            }

            if (withQualityScores !== undefined) {
                localVarQueryParameter['with_quality_scores'] = withQualityScores;
            }

            if (withCompletenesses !== undefined) {
                localVarQueryParameter['with_completenesses'] = withCompletenesses;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update and/or create several products at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product\'s categories.
         * @summary Update/create several products
         * @param {PatchProductsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProducts: async (body?: PatchProductsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given product. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product\'s categories.
         * @summary Update/create a product
         * @param {string} code Code of the resource
         * @param {PostProductsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductsCode: async (code: string, body: PostProductsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchProductsCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchProductsCode', 'body', body)
            const localVarPath = `/api/rest/v1/products/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new product. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to create.
         * @summary Create a new product
         * @param {PostProductsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProducts: async (body?: PostProductsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to submit a draft for approval.
         * @summary Submit a draft for approval
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProposal: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('postProposal', 'code', code)
            const localVarPath = `/api/rest/v1/products/{code}/proposal`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductIdentifierApi - functional programming interface
 * @export
 */
export const ProductIdentifierApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductIdentifierApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to delete a given product. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the product you try to delete.
         * @summary Delete a product
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductsCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductsCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given draft.
         * @summary Get a draft
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDraftCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductsCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDraftCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
         * @summary Get list of products
         * @param {string} [search] Filter products, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-channel\&quot;&gt;Filter product values via channel&lt;/a&gt; section
         * @param {string} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-locale\&quot;&gt;Filter product values via locale&lt;/a&gt; section
         * @param {string} [attributes] Filter product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section
         * @param {GetProductsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
         * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
         * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProducts(search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetProductsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Products>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProducts(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, withAttributeOptions, withQualityScores, withCompletenesses, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given product. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you request.
         * @summary Get a product
         * @param {string} code Code of the resource
         * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
         * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
         * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsCode(code: string, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductsCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductsCode(code, withAttributeOptions, withQualityScores, withCompletenesses, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update and/or create several products at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product\'s categories.
         * @summary Update/create several products
         * @param {PatchProductsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchProducts(body?: PatchProductsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchProducts(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given product. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product\'s categories.
         * @summary Update/create a product
         * @param {string} code Code of the resource
         * @param {PostProductsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchProductsCode(code: string, body: PostProductsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchProductsCode(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new product. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to create.
         * @summary Create a new product
         * @param {PostProductsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProducts(body?: PostProductsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProducts(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to submit a draft for approval.
         * @summary Submit a draft for approval
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProposal(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProposal(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductIdentifierApi - factory interface
 * @export
 */
export const ProductIdentifierApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductIdentifierApiFp(configuration)
    return {
        /**
         * This endpoint allows you to delete a given product. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the product you try to delete.
         * @summary Delete a product
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductsCode(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProductsCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given draft.
         * @summary Get a draft
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraftCode(code: string, options?: any): AxiosPromise<GetProductsCode200Response> {
            return localVarFp.getDraftCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
         * @summary Get list of products
         * @param {string} [search] Filter products, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-channel\&quot;&gt;Filter product values via channel&lt;/a&gt; section
         * @param {string} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-locale\&quot;&gt;Filter product values via locale&lt;/a&gt; section
         * @param {string} [attributes] Filter product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section
         * @param {GetProductsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
         * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
         * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetProductsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options?: any): AxiosPromise<Products> {
            return localVarFp.getProducts(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, withAttributeOptions, withQualityScores, withCompletenesses, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given product. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you request.
         * @summary Get a product
         * @param {string} code Code of the resource
         * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
         * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
         * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsCode(code: string, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options?: any): AxiosPromise<GetProductsCode200Response> {
            return localVarFp.getProductsCode(code, withAttributeOptions, withQualityScores, withCompletenesses, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update and/or create several products at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product\'s categories.
         * @summary Update/create several products
         * @param {PatchProductsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProducts(body?: PatchProductsRequest, options?: any): AxiosPromise<PatchProducts200Response> {
            return localVarFp.patchProducts(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given product. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product\'s categories.
         * @summary Update/create a product
         * @param {string} code Code of the resource
         * @param {PostProductsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductsCode(code: string, body: PostProductsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchProductsCode(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new product. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to create.
         * @summary Create a new product
         * @param {PostProductsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProducts(body?: PostProductsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postProducts(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to submit a draft for approval.
         * @summary Submit a draft for approval
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProposal(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.postProposal(code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductIdentifierApi - object-oriented interface
 * @export
 * @class ProductIdentifierApi
 * @extends {BaseAPI}
 */
export class ProductIdentifierApi extends BaseAPI {
    /**
     * This endpoint allows you to delete a given product. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the product you try to delete.
     * @summary Delete a product
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductIdentifierApi
     */
    public deleteProductsCode(code: string, options?: AxiosRequestConfig) {
        return ProductIdentifierApiFp(this.configuration).deleteProductsCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given draft.
     * @summary Get a draft
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductIdentifierApi
     */
    public getDraftCode(code: string, options?: AxiosRequestConfig) {
        return ProductIdentifierApiFp(this.configuration).getDraftCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
     * @summary Get list of products
     * @param {string} [search] Filter products, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
     * @param {string} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-channel\&quot;&gt;Filter product values via channel&lt;/a&gt; section
     * @param {string} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-locale\&quot;&gt;Filter product values via locale&lt;/a&gt; section
     * @param {string} [attributes] Filter product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section
     * @param {GetProductsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
     * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
     * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductIdentifierApi
     */
    public getProducts(search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetProductsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options?: AxiosRequestConfig) {
        return ProductIdentifierApiFp(this.configuration).getProducts(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, withAttributeOptions, withQualityScores, withCompletenesses, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given product. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you request.
     * @summary Get a product
     * @param {string} code Code of the resource
     * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
     * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
     * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductIdentifierApi
     */
    public getProductsCode(code: string, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options?: AxiosRequestConfig) {
        return ProductIdentifierApiFp(this.configuration).getProductsCode(code, withAttributeOptions, withQualityScores, withCompletenesses, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update and/or create several products at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product\'s categories.
     * @summary Update/create several products
     * @param {PatchProductsRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductIdentifierApi
     */
    public patchProducts(body?: PatchProductsRequest, options?: AxiosRequestConfig) {
        return ProductIdentifierApiFp(this.configuration).patchProducts(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given product. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product\'s categories.
     * @summary Update/create a product
     * @param {string} code Code of the resource
     * @param {PostProductsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductIdentifierApi
     */
    public patchProductsCode(code: string, body: PostProductsRequest, options?: AxiosRequestConfig) {
        return ProductIdentifierApiFp(this.configuration).patchProductsCode(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new product. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to create.
     * @summary Create a new product
     * @param {PostProductsRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductIdentifierApi
     */
    public postProducts(body?: PostProductsRequest, options?: AxiosRequestConfig) {
        return ProductIdentifierApiFp(this.configuration).postProducts(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to submit a draft for approval.
     * @summary Submit a draft for approval
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductIdentifierApi
     */
    public postProposal(code: string, options?: AxiosRequestConfig) {
        return ProductIdentifierApiFp(this.configuration).postProposal(code, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetProductsPaginationTypeEnum = {
    Page: 'page',
    SearchAfter: 'search_after'
} as const;
export type GetProductsPaginationTypeEnum = typeof GetProductsPaginationTypeEnum[keyof typeof GetProductsPaginationTypeEnum];


/**
 * ProductMediaFileApi - axios parameter creator
 * @export
 */
export const ProductMediaFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of media files that are used as attribute values in products or product models.
         * @summary Get a list of product media files
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFiles: async (page?: number, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/media-files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given media file that is used as an attribute value of a product or a product model.
         * @summary Get a product media file
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFilesCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getMediaFilesCode', 'code', code)
            const localVarPath = `/api/rest/v1/media-files/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to download a given media file that is used as an attribute value of a product or a product model.
         * @summary Download a product media file
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFilesCodeDownload: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getMediaFilesCodeDownload', 'code', code)
            const localVarPath = `/api/rest/v1/media-files/{code}/download`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new media file and associate it to an attribute value of a given product or product model.
         * @summary Create a new product media file
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostMediaFilesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMediaFiles: async (contentType: string, body?: PostMediaFilesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postMediaFiles', 'contentType', contentType)
            const localVarPath = `/api/rest/v1/media-files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType != null) {
                localVarHeaderParameter['Content-type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductMediaFileApi - functional programming interface
 * @export
 */
export const ProductMediaFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductMediaFileApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of media files that are used as attribute values in products or product models.
         * @summary Get a list of product media files
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaFiles(page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaFiles>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaFiles(page, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given media file that is used as an attribute value of a product or a product model.
         * @summary Get a product media file
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaFilesCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMediaFilesCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaFilesCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to download a given media file that is used as an attribute value of a product or a product model.
         * @summary Download a product media file
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaFilesCodeDownload(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaFilesCodeDownload(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new media file and associate it to an attribute value of a given product or product model.
         * @summary Create a new product media file
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostMediaFilesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMediaFiles(contentType: string, body?: PostMediaFilesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMediaFiles(contentType, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductMediaFileApi - factory interface
 * @export
 */
export const ProductMediaFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductMediaFileApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of media files that are used as attribute values in products or product models.
         * @summary Get a list of product media files
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFiles(page?: number, limit?: number, withCount?: boolean, options?: any): AxiosPromise<MediaFiles> {
            return localVarFp.getMediaFiles(page, limit, withCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given media file that is used as an attribute value of a product or a product model.
         * @summary Get a product media file
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFilesCode(code: string, options?: any): AxiosPromise<GetMediaFilesCode200Response> {
            return localVarFp.getMediaFilesCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to download a given media file that is used as an attribute value of a product or a product model.
         * @summary Download a product media file
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFilesCodeDownload(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.getMediaFilesCodeDownload(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new media file and associate it to an attribute value of a given product or product model.
         * @summary Create a new product media file
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostMediaFilesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMediaFiles(contentType: string, body?: PostMediaFilesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postMediaFiles(contentType, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductMediaFileApi - object-oriented interface
 * @export
 * @class ProductMediaFileApi
 * @extends {BaseAPI}
 */
export class ProductMediaFileApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of media files that are used as attribute values in products or product models.
     * @summary Get a list of product media files
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductMediaFileApi
     */
    public getMediaFiles(page?: number, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return ProductMediaFileApiFp(this.configuration).getMediaFiles(page, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given media file that is used as an attribute value of a product or a product model.
     * @summary Get a product media file
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductMediaFileApi
     */
    public getMediaFilesCode(code: string, options?: AxiosRequestConfig) {
        return ProductMediaFileApiFp(this.configuration).getMediaFilesCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to download a given media file that is used as an attribute value of a product or a product model.
     * @summary Download a product media file
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductMediaFileApi
     */
    public getMediaFilesCodeDownload(code: string, options?: AxiosRequestConfig) {
        return ProductMediaFileApiFp(this.configuration).getMediaFilesCodeDownload(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new media file and associate it to an attribute value of a given product or product model.
     * @summary Create a new product media file
     * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
     * @param {PostMediaFilesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductMediaFileApi
     */
    public postMediaFiles(contentType: string, body?: PostMediaFilesRequest, options?: AxiosRequestConfig) {
        return ProductMediaFileApiFp(this.configuration).postMediaFiles(contentType, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductModelApi - axios parameter creator
 * @export
 */
export const ProductModelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to delete a given product model. All its children, product models and variant products, will be also deleted. In the Enterprise Edition, the permissions based on your connection user group are applied to the product model you try to delete.
         * @summary Delete a product model
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductModelsCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteProductModelsCode', 'code', code)
            const localVarPath = `/api/rest/v1/product-models/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given product model draft.
         * @summary Get a draft
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductModelDraftCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getProductModelDraftCode', 'code', code)
            const localVarPath = `/api/rest/v1/product-models/{code}/draft`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get a list of product models. Product models are paginated. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
         * @summary Get list of product models
         * @param {string} [search] Filter product models, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-channel\&quot;&gt;Filter product values via channel&lt;/a&gt; section
         * @param {string} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-locale\&quot;&gt;Filter product values via locale&lt;/a&gt; section
         * @param {string} [attributes] Filter product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section and the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-on-product-model-properties\&quot;&gt;Filter on product model properties&lt;/a&gt; section
         * @param {GetProductModelsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withQualityScores] Return product model quality scores in the response. &lt;strong&gt;(Only available since the 6.0 version)&lt;/strong&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductModels: async (search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetProductModelsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, withQualityScores?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/product-models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (locales !== undefined) {
                localVarQueryParameter['locales'] = locales;
            }

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (paginationType !== undefined) {
                localVarQueryParameter['pagination_type'] = paginationType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (searchAfter !== undefined) {
                localVarQueryParameter['search_after'] = searchAfter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }

            if (withQualityScores !== undefined) {
                localVarQueryParameter['with_quality_scores'] = withQualityScores;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given product model. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product model you request.
         * @summary Get a product model
         * @param {string} code Code of the resource
         * @param {boolean} [withQualityScores] Return product model quality scores in the response. &lt;strong&gt;(Only available since the 6.0 version)&lt;/strong&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductModelsCode: async (code: string, withQualityScores?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getProductModelsCode', 'code', code)
            const localVarPath = `/api/rest/v1/product-models/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (withQualityScores !== undefined) {
                localVarQueryParameter['with_quality_scores'] = withQualityScores;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update and/or create several product models at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product models exists for the given code, it creates it. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product models you try to update. It may result in the creation of drafts if you only have edit rights through the product model\'s categories.
         * @summary Update/create several product models
         * @param {PatchProductModelsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductModels: async (body?: PatchProductModelsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/product-models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given product model. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product model exists for the given code, it creates it. In the Enterprise Edition PIM since the 2.3, permissions based on your user groups are applied to the product model you try to update. It may result in the creation of a draft if you only have edit rights through the product model\'s categories.
         * @summary Update/create a product model
         * @param {string} code Code of the resource
         * @param {PostProductModelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductModelsCode: async (code: string, body: PostProductModelsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchProductModelsCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchProductModelsCode', 'body', body)
            const localVarPath = `/api/rest/v1/product-models/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to submit a product model draft for approval.
         * @summary Submit a draft for approval
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductModelProposal: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('postProductModelProposal', 'code', code)
            const localVarPath = `/api/rest/v1/product-models/{code}/proposal`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new product model. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product model you try to create.
         * @summary Create a new product model
         * @param {PostProductModelsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductModels: async (body?: PostProductModelsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/product-models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductModelApi - functional programming interface
 * @export
 */
export const ProductModelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductModelApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to delete a given product model. All its children, product models and variant products, will be also deleted. In the Enterprise Edition, the permissions based on your connection user group are applied to the product model you try to delete.
         * @summary Delete a product model
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductModelsCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductModelsCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given product model draft.
         * @summary Get a draft
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductModelDraftCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductModelsCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductModelDraftCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get a list of product models. Product models are paginated. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
         * @summary Get list of product models
         * @param {string} [search] Filter product models, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-channel\&quot;&gt;Filter product values via channel&lt;/a&gt; section
         * @param {string} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-locale\&quot;&gt;Filter product values via locale&lt;/a&gt; section
         * @param {string} [attributes] Filter product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section and the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-on-product-model-properties\&quot;&gt;Filter on product model properties&lt;/a&gt; section
         * @param {GetProductModelsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withQualityScores] Return product model quality scores in the response. &lt;strong&gt;(Only available since the 6.0 version)&lt;/strong&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductModels(search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetProductModelsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, withQualityScores?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductModels>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductModels(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, withQualityScores, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given product model. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product model you request.
         * @summary Get a product model
         * @param {string} code Code of the resource
         * @param {boolean} [withQualityScores] Return product model quality scores in the response. &lt;strong&gt;(Only available since the 6.0 version)&lt;/strong&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductModelsCode(code: string, withQualityScores?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductModelsCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductModelsCode(code, withQualityScores, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update and/or create several product models at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product models exists for the given code, it creates it. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product models you try to update. It may result in the creation of drafts if you only have edit rights through the product model\'s categories.
         * @summary Update/create several product models
         * @param {PatchProductModelsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchProductModels(body?: PatchProductModelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchProductModels(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given product model. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product model exists for the given code, it creates it. In the Enterprise Edition PIM since the 2.3, permissions based on your user groups are applied to the product model you try to update. It may result in the creation of a draft if you only have edit rights through the product model\'s categories.
         * @summary Update/create a product model
         * @param {string} code Code of the resource
         * @param {PostProductModelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchProductModelsCode(code: string, body: PostProductModelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchProductModelsCode(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to submit a product model draft for approval.
         * @summary Submit a draft for approval
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProductModelProposal(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProductModelProposal(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new product model. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product model you try to create.
         * @summary Create a new product model
         * @param {PostProductModelsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProductModels(body?: PostProductModelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProductModels(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductModelApi - factory interface
 * @export
 */
export const ProductModelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductModelApiFp(configuration)
    return {
        /**
         * This endpoint allows you to delete a given product model. All its children, product models and variant products, will be also deleted. In the Enterprise Edition, the permissions based on your connection user group are applied to the product model you try to delete.
         * @summary Delete a product model
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductModelsCode(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProductModelsCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given product model draft.
         * @summary Get a draft
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductModelDraftCode(code: string, options?: any): AxiosPromise<GetProductModelsCode200Response> {
            return localVarFp.getProductModelDraftCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get a list of product models. Product models are paginated. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
         * @summary Get list of product models
         * @param {string} [search] Filter product models, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-channel\&quot;&gt;Filter product values via channel&lt;/a&gt; section
         * @param {string} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-locale\&quot;&gt;Filter product values via locale&lt;/a&gt; section
         * @param {string} [attributes] Filter product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section and the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-on-product-model-properties\&quot;&gt;Filter on product model properties&lt;/a&gt; section
         * @param {GetProductModelsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withQualityScores] Return product model quality scores in the response. &lt;strong&gt;(Only available since the 6.0 version)&lt;/strong&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductModels(search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetProductModelsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, withQualityScores?: boolean, options?: any): AxiosPromise<ProductModels> {
            return localVarFp.getProductModels(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, withQualityScores, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given product model. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product model you request.
         * @summary Get a product model
         * @param {string} code Code of the resource
         * @param {boolean} [withQualityScores] Return product model quality scores in the response. &lt;strong&gt;(Only available since the 6.0 version)&lt;/strong&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductModelsCode(code: string, withQualityScores?: boolean, options?: any): AxiosPromise<GetProductModelsCode200Response> {
            return localVarFp.getProductModelsCode(code, withQualityScores, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update and/or create several product models at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product models exists for the given code, it creates it. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product models you try to update. It may result in the creation of drafts if you only have edit rights through the product model\'s categories.
         * @summary Update/create several product models
         * @param {PatchProductModelsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductModels(body?: PatchProductModelsRequest, options?: any): AxiosPromise<PatchProducts200Response> {
            return localVarFp.patchProductModels(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given product model. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product model exists for the given code, it creates it. In the Enterprise Edition PIM since the 2.3, permissions based on your user groups are applied to the product model you try to update. It may result in the creation of a draft if you only have edit rights through the product model\'s categories.
         * @summary Update/create a product model
         * @param {string} code Code of the resource
         * @param {PostProductModelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductModelsCode(code: string, body: PostProductModelsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchProductModelsCode(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to submit a product model draft for approval.
         * @summary Submit a draft for approval
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductModelProposal(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.postProductModelProposal(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new product model. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product model you try to create.
         * @summary Create a new product model
         * @param {PostProductModelsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductModels(body?: PostProductModelsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postProductModels(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductModelApi - object-oriented interface
 * @export
 * @class ProductModelApi
 * @extends {BaseAPI}
 */
export class ProductModelApi extends BaseAPI {
    /**
     * This endpoint allows you to delete a given product model. All its children, product models and variant products, will be also deleted. In the Enterprise Edition, the permissions based on your connection user group are applied to the product model you try to delete.
     * @summary Delete a product model
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductModelApi
     */
    public deleteProductModelsCode(code: string, options?: AxiosRequestConfig) {
        return ProductModelApiFp(this.configuration).deleteProductModelsCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given product model draft.
     * @summary Get a draft
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductModelApi
     */
    public getProductModelDraftCode(code: string, options?: AxiosRequestConfig) {
        return ProductModelApiFp(this.configuration).getProductModelDraftCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get a list of product models. Product models are paginated. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
     * @summary Get list of product models
     * @param {string} [search] Filter product models, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
     * @param {string} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-channel\&quot;&gt;Filter product values via channel&lt;/a&gt; section
     * @param {string} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-locale\&quot;&gt;Filter product values via locale&lt;/a&gt; section
     * @param {string} [attributes] Filter product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section and the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-on-product-model-properties\&quot;&gt;Filter on product model properties&lt;/a&gt; section
     * @param {GetProductModelsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {boolean} [withQualityScores] Return product model quality scores in the response. &lt;strong&gt;(Only available since the 6.0 version)&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductModelApi
     */
    public getProductModels(search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetProductModelsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, withQualityScores?: boolean, options?: AxiosRequestConfig) {
        return ProductModelApiFp(this.configuration).getProductModels(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, withQualityScores, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given product model. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product model you request.
     * @summary Get a product model
     * @param {string} code Code of the resource
     * @param {boolean} [withQualityScores] Return product model quality scores in the response. &lt;strong&gt;(Only available since the 6.0 version)&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductModelApi
     */
    public getProductModelsCode(code: string, withQualityScores?: boolean, options?: AxiosRequestConfig) {
        return ProductModelApiFp(this.configuration).getProductModelsCode(code, withQualityScores, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update and/or create several product models at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product models exists for the given code, it creates it. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product models you try to update. It may result in the creation of drafts if you only have edit rights through the product model\'s categories.
     * @summary Update/create several product models
     * @param {PatchProductModelsRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductModelApi
     */
    public patchProductModels(body?: PatchProductModelsRequest, options?: AxiosRequestConfig) {
        return ProductModelApiFp(this.configuration).patchProductModels(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given product model. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product model exists for the given code, it creates it. In the Enterprise Edition PIM since the 2.3, permissions based on your user groups are applied to the product model you try to update. It may result in the creation of a draft if you only have edit rights through the product model\'s categories.
     * @summary Update/create a product model
     * @param {string} code Code of the resource
     * @param {PostProductModelsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductModelApi
     */
    public patchProductModelsCode(code: string, body: PostProductModelsRequest, options?: AxiosRequestConfig) {
        return ProductModelApiFp(this.configuration).patchProductModelsCode(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to submit a product model draft for approval.
     * @summary Submit a draft for approval
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductModelApi
     */
    public postProductModelProposal(code: string, options?: AxiosRequestConfig) {
        return ProductModelApiFp(this.configuration).postProductModelProposal(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new product model. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product model you try to create.
     * @summary Create a new product model
     * @param {PostProductModelsRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductModelApi
     */
    public postProductModels(body?: PostProductModelsRequest, options?: AxiosRequestConfig) {
        return ProductModelApiFp(this.configuration).postProductModels(body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetProductModelsPaginationTypeEnum = {
    Page: 'page',
    SearchAfter: 'search_after'
} as const;
export type GetProductModelsPaginationTypeEnum = typeof GetProductModelsPaginationTypeEnum[keyof typeof GetProductModelsPaginationTypeEnum];


/**
 * ProductUuidApi - axios parameter creator
 * @export
 */
export const ProductUuidApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to delete a given product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to delete.
         * @summary Delete a product
         * @param {string} uuid Uuid of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductsUuidUuid: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('deleteProductsUuidUuid', 'uuid', uuid)
            const localVarPath = `/api/rest/v1/products-uuid/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given draft.
         * @summary Get a draft
         * @param {string} uuid Uuid of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraftUuidUuid: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getDraftUuidUuid', 'uuid', uuid)
            const localVarPath = `/api/rest/v1/products-uuid/{uuid}/draft`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your user groups are applied to the set of products you request.
         * @summary Get list of products
         * @param {string} [search] Filter products, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-channel\&quot;&gt;Filter product values via channel&lt;/a&gt; section
         * @param {string} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-locale\&quot;&gt;Filter product values via locale&lt;/a&gt; section
         * @param {string} [attributes] Filter product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section
         * @param {GetProductsUuidPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
         * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
         * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsUuid: async (search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetProductsUuidPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/products-uuid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (locales !== undefined) {
                localVarQueryParameter['locales'] = locales;
            }

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (paginationType !== undefined) {
                localVarQueryParameter['pagination_type'] = paginationType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (searchAfter !== undefined) {
                localVarQueryParameter['search_after'] = searchAfter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }

            if (withAttributeOptions !== undefined) {
                localVarQueryParameter['with_attribute_options'] = withAttributeOptions;
            }

            if (withQualityScores !== undefined) {
                localVarQueryParameter['with_quality_scores'] = withQualityScores;
            }

            if (withCompletenesses !== undefined) {
                localVarQueryParameter['with_completenesses'] = withCompletenesses;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given product. In the Entreprise Edition, permissions based on your user groups are applied to the product you request.
         * @summary Get a product
         * @param {string} uuid Uuid of the resource
         * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
         * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
         * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsUuidUuid: async (uuid: string, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getProductsUuidUuid', 'uuid', uuid)
            const localVarPath = `/api/rest/v1/products-uuid/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (withAttributeOptions !== undefined) {
                localVarQueryParameter['with_attribute_options'] = withAttributeOptions;
            }

            if (withQualityScores !== undefined) {
                localVarQueryParameter['with_quality_scores'] = withQualityScores;
            }

            if (withCompletenesses !== undefined) {
                localVarQueryParameter['with_completenesses'] = withCompletenesses;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update and/or create several products at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Enterprise Edition, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product\'s categories.
         * @summary Update/create several products
         * @param {PatchProductsUuidRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductsUuid: async (body?: PatchProductsUuidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/products-uuid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given product. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Entreprise Edition, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product\'s categories.
         * @summary Update/create a product
         * @param {string} uuid Uuid of the resource
         * @param {PostProductsUuidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductsUuidUuid: async (uuid: string, body: PostProductsUuidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('patchProductsUuidUuid', 'uuid', uuid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchProductsUuidUuid', 'body', body)
            const localVarPath = `/api/rest/v1/products-uuid/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to create. If no uuid is provided, the PIM will generate one for you.
         * @summary Create a new product
         * @param {PostProductsUuidRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductsUuid: async (body?: PostProductsUuidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/products-uuid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to submit a draft for approval.
         * @summary Submit a draft for approval
         * @param {string} uuid Uuid of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProposalUuid: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('postProposalUuid', 'uuid', uuid)
            const localVarPath = `/api/rest/v1/products-uuid/{uuid}/proposal`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductUuidApi - functional programming interface
 * @export
 */
export const ProductUuidApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductUuidApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to delete a given product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to delete.
         * @summary Delete a product
         * @param {string} uuid Uuid of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductsUuidUuid(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductsUuidUuid(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given draft.
         * @summary Get a draft
         * @param {string} uuid Uuid of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDraftUuidUuid(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductsUuidUuid200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDraftUuidUuid(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your user groups are applied to the set of products you request.
         * @summary Get list of products
         * @param {string} [search] Filter products, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-channel\&quot;&gt;Filter product values via channel&lt;/a&gt; section
         * @param {string} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-locale\&quot;&gt;Filter product values via locale&lt;/a&gt; section
         * @param {string} [attributes] Filter product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section
         * @param {GetProductsUuidPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
         * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
         * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsUuid(search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetProductsUuidPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Products>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductsUuid(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, withAttributeOptions, withQualityScores, withCompletenesses, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given product. In the Entreprise Edition, permissions based on your user groups are applied to the product you request.
         * @summary Get a product
         * @param {string} uuid Uuid of the resource
         * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
         * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
         * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsUuidUuid(uuid: string, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProductsUuidUuid200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductsUuidUuid(uuid, withAttributeOptions, withQualityScores, withCompletenesses, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update and/or create several products at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Enterprise Edition, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product\'s categories.
         * @summary Update/create several products
         * @param {PatchProductsUuidRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchProductsUuid(body?: PatchProductsUuidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchProductsUuid200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchProductsUuid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given product. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Entreprise Edition, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product\'s categories.
         * @summary Update/create a product
         * @param {string} uuid Uuid of the resource
         * @param {PostProductsUuidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchProductsUuidUuid(uuid: string, body: PostProductsUuidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchProductsUuidUuid(uuid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to create. If no uuid is provided, the PIM will generate one for you.
         * @summary Create a new product
         * @param {PostProductsUuidRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProductsUuid(body?: PostProductsUuidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProductsUuid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to submit a draft for approval.
         * @summary Submit a draft for approval
         * @param {string} uuid Uuid of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProposalUuid(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProposalUuid(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductUuidApi - factory interface
 * @export
 */
export const ProductUuidApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductUuidApiFp(configuration)
    return {
        /**
         * This endpoint allows you to delete a given product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to delete.
         * @summary Delete a product
         * @param {string} uuid Uuid of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductsUuidUuid(uuid: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProductsUuidUuid(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given draft.
         * @summary Get a draft
         * @param {string} uuid Uuid of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraftUuidUuid(uuid: string, options?: any): AxiosPromise<GetProductsUuidUuid200Response> {
            return localVarFp.getDraftUuidUuid(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your user groups are applied to the set of products you request.
         * @summary Get list of products
         * @param {string} [search] Filter products, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-channel\&quot;&gt;Filter product values via channel&lt;/a&gt; section
         * @param {string} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-locale\&quot;&gt;Filter product values via locale&lt;/a&gt; section
         * @param {string} [attributes] Filter product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section
         * @param {GetProductsUuidPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
         * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
         * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsUuid(search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetProductsUuidPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options?: any): AxiosPromise<Products> {
            return localVarFp.getProductsUuid(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, withAttributeOptions, withQualityScores, withCompletenesses, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given product. In the Entreprise Edition, permissions based on your user groups are applied to the product you request.
         * @summary Get a product
         * @param {string} uuid Uuid of the resource
         * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
         * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
         * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsUuidUuid(uuid: string, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options?: any): AxiosPromise<GetProductsUuidUuid200Response> {
            return localVarFp.getProductsUuidUuid(uuid, withAttributeOptions, withQualityScores, withCompletenesses, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update and/or create several products at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Enterprise Edition, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product\'s categories.
         * @summary Update/create several products
         * @param {PatchProductsUuidRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductsUuid(body?: PatchProductsUuidRequest, options?: any): AxiosPromise<PatchProductsUuid200Response> {
            return localVarFp.patchProductsUuid(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given product. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Entreprise Edition, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product\'s categories.
         * @summary Update/create a product
         * @param {string} uuid Uuid of the resource
         * @param {PostProductsUuidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProductsUuidUuid(uuid: string, body: PostProductsUuidRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchProductsUuidUuid(uuid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to create. If no uuid is provided, the PIM will generate one for you.
         * @summary Create a new product
         * @param {PostProductsUuidRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductsUuid(body?: PostProductsUuidRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postProductsUuid(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to submit a draft for approval.
         * @summary Submit a draft for approval
         * @param {string} uuid Uuid of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProposalUuid(uuid: string, options?: any): AxiosPromise<void> {
            return localVarFp.postProposalUuid(uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductUuidApi - object-oriented interface
 * @export
 * @class ProductUuidApi
 * @extends {BaseAPI}
 */
export class ProductUuidApi extends BaseAPI {
    /**
     * This endpoint allows you to delete a given product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to delete.
     * @summary Delete a product
     * @param {string} uuid Uuid of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductUuidApi
     */
    public deleteProductsUuidUuid(uuid: string, options?: AxiosRequestConfig) {
        return ProductUuidApiFp(this.configuration).deleteProductsUuidUuid(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given draft.
     * @summary Get a draft
     * @param {string} uuid Uuid of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductUuidApi
     */
    public getDraftUuidUuid(uuid: string, options?: AxiosRequestConfig) {
        return ProductUuidApiFp(this.configuration).getDraftUuidUuid(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your user groups are applied to the set of products you request.
     * @summary Get list of products
     * @param {string} [search] Filter products, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
     * @param {string} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-channel\&quot;&gt;Filter product values via channel&lt;/a&gt; section
     * @param {string} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#via-locale\&quot;&gt;Filter product values via locale&lt;/a&gt; section
     * @param {string} [attributes] Filter product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section
     * @param {GetProductsUuidPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
     * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
     * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductUuidApi
     */
    public getProductsUuid(search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetProductsUuidPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options?: AxiosRequestConfig) {
        return ProductUuidApiFp(this.configuration).getProductsUuid(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, withAttributeOptions, withQualityScores, withCompletenesses, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given product. In the Entreprise Edition, permissions based on your user groups are applied to the product you request.
     * @summary Get a product
     * @param {string} uuid Uuid of the resource
     * @param {boolean} [withAttributeOptions] Return labels of attribute options in the response. (Only available since the 5.0 version)
     * @param {boolean} [withQualityScores] Return product quality scores in the response. (Only available since the 5.0 version)
     * @param {boolean} [withCompletenesses] Return product completenesses in the response. (Only available since the 6.0 version)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductUuidApi
     */
    public getProductsUuidUuid(uuid: string, withAttributeOptions?: boolean, withQualityScores?: boolean, withCompletenesses?: boolean, options?: AxiosRequestConfig) {
        return ProductUuidApiFp(this.configuration).getProductsUuidUuid(uuid, withAttributeOptions, withQualityScores, withCompletenesses, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update and/or create several products at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Enterprise Edition, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product\'s categories.
     * @summary Update/create several products
     * @param {PatchProductsUuidRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductUuidApi
     */
    public patchProductsUuid(body?: PatchProductsUuidRequest, options?: AxiosRequestConfig) {
        return ProductUuidApiFp(this.configuration).patchProductsUuid(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given product. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Entreprise Edition, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product\'s categories.
     * @summary Update/create a product
     * @param {string} uuid Uuid of the resource
     * @param {PostProductsUuidRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductUuidApi
     */
    public patchProductsUuidUuid(uuid: string, body: PostProductsUuidRequest, options?: AxiosRequestConfig) {
        return ProductUuidApiFp(this.configuration).patchProductsUuidUuid(uuid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to create. If no uuid is provided, the PIM will generate one for you.
     * @summary Create a new product
     * @param {PostProductsUuidRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductUuidApi
     */
    public postProductsUuid(body?: PostProductsUuidRequest, options?: AxiosRequestConfig) {
        return ProductUuidApiFp(this.configuration).postProductsUuid(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to submit a draft for approval.
     * @summary Submit a draft for approval
     * @param {string} uuid Uuid of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductUuidApi
     */
    public postProposalUuid(uuid: string, options?: AxiosRequestConfig) {
        return ProductUuidApiFp(this.configuration).postProposalUuid(uuid, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetProductsUuidPaginationTypeEnum = {
    Page: 'page',
    SearchAfter: 'search_after'
} as const;
export type GetProductsUuidPaginationTypeEnum = typeof GetProductsUuidPaginationTypeEnum[keyof typeof GetProductsUuidPaginationTypeEnum];


/**
 * PublishedProductApi - axios parameter creator
 * @export
 */
export const PublishedProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of published products. Published products are paginated and they can be filtered.
         * @summary Get list of published products
         * @param {string} [search] Filter published products, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [scope] Filter published product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-published-product-values\&quot;&gt;Filter on published product values&lt;/a&gt; section
         * @param {string} [locales] Filter published product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-published-product-values\&quot;&gt;Filter on published product values&lt;/a&gt; section
         * @param {string} [attributes] Filter published product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section
         * @param {GetPublishedProductsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedProducts: async (search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetPublishedProductsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/published-products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (locales !== undefined) {
                localVarQueryParameter['locales'] = locales;
            }

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (paginationType !== undefined) {
                localVarQueryParameter['pagination_type'] = paginationType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (searchAfter !== undefined) {
                localVarQueryParameter['search_after'] = searchAfter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (withCount !== undefined) {
                localVarQueryParameter['with_count'] = withCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given published product.
         * @summary Get a published product
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedProductsCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getPublishedProductsCode', 'code', code)
            const localVarPath = `/api/rest/v1/published-products/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublishedProductApi - functional programming interface
 * @export
 */
export const PublishedProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublishedProductApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of published products. Published products are paginated and they can be filtered.
         * @summary Get list of published products
         * @param {string} [search] Filter published products, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [scope] Filter published product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-published-product-values\&quot;&gt;Filter on published product values&lt;/a&gt; section
         * @param {string} [locales] Filter published product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-published-product-values\&quot;&gt;Filter on published product values&lt;/a&gt; section
         * @param {string} [attributes] Filter published product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section
         * @param {GetPublishedProductsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishedProducts(search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetPublishedProductsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublishedProducts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublishedProducts(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given published product.
         * @summary Get a published product
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishedProductsCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublishedProductsCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublishedProductsCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublishedProductApi - factory interface
 * @export
 */
export const PublishedProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublishedProductApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of published products. Published products are paginated and they can be filtered.
         * @summary Get list of published products
         * @param {string} [search] Filter published products, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [scope] Filter published product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-published-product-values\&quot;&gt;Filter on published product values&lt;/a&gt; section
         * @param {string} [locales] Filter published product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-published-product-values\&quot;&gt;Filter on published product values&lt;/a&gt; section
         * @param {string} [attributes] Filter published product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section
         * @param {GetPublishedProductsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedProducts(search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetPublishedProductsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, options?: any): AxiosPromise<PublishedProducts> {
            return localVarFp.getPublishedProducts(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given published product.
         * @summary Get a published product
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedProductsCode(code: string, options?: any): AxiosPromise<GetPublishedProductsCode200Response> {
            return localVarFp.getPublishedProductsCode(code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublishedProductApi - object-oriented interface
 * @export
 * @class PublishedProductApi
 * @extends {BaseAPI}
 */
export class PublishedProductApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of published products. Published products are paginated and they can be filtered.
     * @summary Get list of published products
     * @param {string} [search] Filter published products, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html\&quot;&gt;Filters&lt;/a&gt; section
     * @param {string} [scope] Filter published product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-published-product-values\&quot;&gt;Filter on published product values&lt;/a&gt; section
     * @param {string} [locales] Filter published product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-published-product-values\&quot;&gt;Filter on published product values&lt;/a&gt; section
     * @param {string} [attributes] Filter published product values to only return those concerning the given attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-product-values\&quot;&gt;Filter on product values&lt;/a&gt; section
     * @param {GetPublishedProductsPaginationTypeEnum} [paginationType] Pagination method type, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [page] Number of the page to retrieve when using the &#x60;page&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html#pagination\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {number} [limit] Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {boolean} [withCount] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublishedProductApi
     */
    public getPublishedProducts(search?: string, scope?: string, locales?: string, attributes?: string, paginationType?: GetPublishedProductsPaginationTypeEnum, page?: number, searchAfter?: string, limit?: number, withCount?: boolean, options?: AxiosRequestConfig) {
        return PublishedProductApiFp(this.configuration).getPublishedProducts(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given published product.
     * @summary Get a published product
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublishedProductApi
     */
    public getPublishedProductsCode(code: string, options?: AxiosRequestConfig) {
        return PublishedProductApiFp(this.configuration).getPublishedProductsCode(code, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetPublishedProductsPaginationTypeEnum = {
    Page: 'page',
    SearchAfter: 'search_after'
} as const;
export type GetPublishedProductsPaginationTypeEnum = typeof GetPublishedProductsPaginationTypeEnum[keyof typeof GetPublishedProductsPaginationTypeEnum];


/**
 * ReferenceEntityApi - axios parameter creator
 * @export
 */
export const ReferenceEntityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of reference entities. Reference entities are paginated.
         * @summary Get list of reference entities
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntities: async (searchAfter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/reference-entities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchAfter !== undefined) {
                localVarQueryParameter['search_after'] = searchAfter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given reference entity.
         * @summary Get a reference entity
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntitiesCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getReferenceEntitiesCode', 'code', code)
            const localVarPath = `/api/rest/v1/reference-entities/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given reference entity. Note that if the reference entity does not already exist, it creates it.
         * @summary Update/create a reference entity
         * @param {string} code Code of the resource
         * @param {PatchReferenceEntityCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchReferenceEntityCode: async (code: string, body: PatchReferenceEntityCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchReferenceEntityCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchReferenceEntityCode', 'body', body)
            const localVarPath = `/api/rest/v1/reference-entities/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferenceEntityApi - functional programming interface
 * @export
 */
export const ReferenceEntityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferenceEntityApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of reference entities. Reference entities are paginated.
         * @summary Get list of reference entities
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceEntities(searchAfter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferenceEntities>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceEntities(searchAfter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given reference entity.
         * @summary Get a reference entity
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceEntitiesCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReferenceEntitiesCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceEntitiesCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given reference entity. Note that if the reference entity does not already exist, it creates it.
         * @summary Update/create a reference entity
         * @param {string} code Code of the resource
         * @param {PatchReferenceEntityCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchReferenceEntityCode(code: string, body: PatchReferenceEntityCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchReferenceEntityCode(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReferenceEntityApi - factory interface
 * @export
 */
export const ReferenceEntityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferenceEntityApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of reference entities. Reference entities are paginated.
         * @summary Get list of reference entities
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntities(searchAfter?: string, options?: any): AxiosPromise<ReferenceEntities> {
            return localVarFp.getReferenceEntities(searchAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given reference entity.
         * @summary Get a reference entity
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntitiesCode(code: string, options?: any): AxiosPromise<GetReferenceEntitiesCode200Response> {
            return localVarFp.getReferenceEntitiesCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given reference entity. Note that if the reference entity does not already exist, it creates it.
         * @summary Update/create a reference entity
         * @param {string} code Code of the resource
         * @param {PatchReferenceEntityCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchReferenceEntityCode(code: string, body: PatchReferenceEntityCodeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchReferenceEntityCode(code, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferenceEntityApi - object-oriented interface
 * @export
 * @class ReferenceEntityApi
 * @extends {BaseAPI}
 */
export class ReferenceEntityApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of reference entities. Reference entities are paginated.
     * @summary Get list of reference entities
     * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityApi
     */
    public getReferenceEntities(searchAfter?: string, options?: AxiosRequestConfig) {
        return ReferenceEntityApiFp(this.configuration).getReferenceEntities(searchAfter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given reference entity.
     * @summary Get a reference entity
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityApi
     */
    public getReferenceEntitiesCode(code: string, options?: AxiosRequestConfig) {
        return ReferenceEntityApiFp(this.configuration).getReferenceEntitiesCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given reference entity. Note that if the reference entity does not already exist, it creates it.
     * @summary Update/create a reference entity
     * @param {string} code Code of the resource
     * @param {PatchReferenceEntityCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityApi
     */
    public patchReferenceEntityCode(code: string, body: PatchReferenceEntityCodeRequest, options?: AxiosRequestConfig) {
        return ReferenceEntityApiFp(this.configuration).patchReferenceEntityCode(code, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReferenceEntityAttributeApi - axios parameter creator
 * @export
 */
export const ReferenceEntityAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get the list of attributes of a given reference entity.
         * @summary Get the list of attributes of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntitiesCodeAttributes: async (referenceEntityCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceEntityCode' is not null or undefined
            assertParamExists('getReferenceEntitiesCodeAttributes', 'referenceEntityCode', referenceEntityCode)
            const localVarPath = `/api/rest/v1/reference-entities/{reference_entity_code}/attributes`
                .replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(referenceEntityCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given attribute for a given reference entity.
         * @summary Get an attribute of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntityAttributesCode: async (referenceEntityCode: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceEntityCode' is not null or undefined
            assertParamExists('getReferenceEntityAttributesCode', 'referenceEntityCode', referenceEntityCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getReferenceEntityAttributesCode', 'code', code)
            const localVarPath = `/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{code}`
                .replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(referenceEntityCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given attribute for a given renference entity. Note that if the attribute does not already exist for the given reference entity, it creates it.
         * @summary Update/create an attribute of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} code Code of the resource
         * @param {PatchReferenceEntityAttributesCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchReferenceEntityAttributesCode: async (referenceEntityCode: string, code: string, body: PatchReferenceEntityAttributesCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceEntityCode' is not null or undefined
            assertParamExists('patchReferenceEntityAttributesCode', 'referenceEntityCode', referenceEntityCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchReferenceEntityAttributesCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchReferenceEntityAttributesCode', 'body', body)
            const localVarPath = `/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{code}`
                .replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(referenceEntityCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferenceEntityAttributeApi - functional programming interface
 * @export
 */
export const ReferenceEntityAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferenceEntityAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get the list of attributes of a given reference entity.
         * @summary Get the list of attributes of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceEntitiesCodeAttributes(referenceEntityCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetReferenceEntitiesCodeAttributes200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceEntitiesCodeAttributes(referenceEntityCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given attribute for a given reference entity.
         * @summary Get an attribute of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceEntityAttributesCode(referenceEntityCode: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReferenceEntitiesCodeAttributes200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceEntityAttributesCode(referenceEntityCode, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given attribute for a given renference entity. Note that if the attribute does not already exist for the given reference entity, it creates it.
         * @summary Update/create an attribute of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} code Code of the resource
         * @param {PatchReferenceEntityAttributesCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchReferenceEntityAttributesCode(referenceEntityCode: string, code: string, body: PatchReferenceEntityAttributesCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchReferenceEntityAttributesCode(referenceEntityCode, code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReferenceEntityAttributeApi - factory interface
 * @export
 */
export const ReferenceEntityAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferenceEntityAttributeApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get the list of attributes of a given reference entity.
         * @summary Get the list of attributes of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntitiesCodeAttributes(referenceEntityCode: string, options?: any): AxiosPromise<Array<GetReferenceEntitiesCodeAttributes200ResponseInner>> {
            return localVarFp.getReferenceEntitiesCodeAttributes(referenceEntityCode, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given attribute for a given reference entity.
         * @summary Get an attribute of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntityAttributesCode(referenceEntityCode: string, code: string, options?: any): AxiosPromise<GetReferenceEntitiesCodeAttributes200ResponseInner> {
            return localVarFp.getReferenceEntityAttributesCode(referenceEntityCode, code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given attribute for a given renference entity. Note that if the attribute does not already exist for the given reference entity, it creates it.
         * @summary Update/create an attribute of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} code Code of the resource
         * @param {PatchReferenceEntityAttributesCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchReferenceEntityAttributesCode(referenceEntityCode: string, code: string, body: PatchReferenceEntityAttributesCodeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchReferenceEntityAttributesCode(referenceEntityCode, code, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferenceEntityAttributeApi - object-oriented interface
 * @export
 * @class ReferenceEntityAttributeApi
 * @extends {BaseAPI}
 */
export class ReferenceEntityAttributeApi extends BaseAPI {
    /**
     * This endpoint allows you to get the list of attributes of a given reference entity.
     * @summary Get the list of attributes of a given reference entity
     * @param {string} referenceEntityCode Code of the reference entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityAttributeApi
     */
    public getReferenceEntitiesCodeAttributes(referenceEntityCode: string, options?: AxiosRequestConfig) {
        return ReferenceEntityAttributeApiFp(this.configuration).getReferenceEntitiesCodeAttributes(referenceEntityCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given attribute for a given reference entity.
     * @summary Get an attribute of a given reference entity
     * @param {string} referenceEntityCode Code of the reference entity
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityAttributeApi
     */
    public getReferenceEntityAttributesCode(referenceEntityCode: string, code: string, options?: AxiosRequestConfig) {
        return ReferenceEntityAttributeApiFp(this.configuration).getReferenceEntityAttributesCode(referenceEntityCode, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given attribute for a given renference entity. Note that if the attribute does not already exist for the given reference entity, it creates it.
     * @summary Update/create an attribute of a given reference entity
     * @param {string} referenceEntityCode Code of the reference entity
     * @param {string} code Code of the resource
     * @param {PatchReferenceEntityAttributesCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityAttributeApi
     */
    public patchReferenceEntityAttributesCode(referenceEntityCode: string, code: string, body: PatchReferenceEntityAttributesCodeRequest, options?: AxiosRequestConfig) {
        return ReferenceEntityAttributeApiFp(this.configuration).patchReferenceEntityAttributesCode(referenceEntityCode, code, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReferenceEntityAttributeOptionApi - axios parameter creator
 * @export
 */
export const ReferenceEntityAttributeOptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of attribute options for a given reference entity.
         * @summary Get a list of attribute options of a given attribute for a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} attributeCode Code of the attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntityAttributesAttributeCodeOptions: async (referenceEntityCode: string, attributeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceEntityCode' is not null or undefined
            assertParamExists('getReferenceEntityAttributesAttributeCodeOptions', 'referenceEntityCode', referenceEntityCode)
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('getReferenceEntityAttributesAttributeCodeOptions', 'attributeCode', attributeCode)
            const localVarPath = `/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{attribute_code}/options`
                .replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(referenceEntityCode)))
                .replace(`{${"attribute_code"}}`, encodeURIComponent(String(attributeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given attribute option.
         * @summary Get an attribute option for a given attribute of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntityAttributesAttributeCodeOptionsCode: async (referenceEntityCode: string, attributeCode: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceEntityCode' is not null or undefined
            assertParamExists('getReferenceEntityAttributesAttributeCodeOptionsCode', 'referenceEntityCode', referenceEntityCode)
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('getReferenceEntityAttributesAttributeCodeOptionsCode', 'attributeCode', attributeCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getReferenceEntityAttributesAttributeCodeOptionsCode', 'code', code)
            const localVarPath = `/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{attribute_code}/options/{code}`
                .replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(referenceEntityCode)))
                .replace(`{${"attribute_code"}}`, encodeURIComponent(String(attributeCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given option for a given attribute and a given reference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given reference entity, it creates it.
         * @summary Update/create a reference entity attribute option
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchReferenceEntityAttributesAttributeCodeOptionsCode: async (referenceEntityCode: string, attributeCode: string, code: string, body: GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceEntityCode' is not null or undefined
            assertParamExists('patchReferenceEntityAttributesAttributeCodeOptionsCode', 'referenceEntityCode', referenceEntityCode)
            // verify required parameter 'attributeCode' is not null or undefined
            assertParamExists('patchReferenceEntityAttributesAttributeCodeOptionsCode', 'attributeCode', attributeCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchReferenceEntityAttributesAttributeCodeOptionsCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchReferenceEntityAttributesAttributeCodeOptionsCode', 'body', body)
            const localVarPath = `/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{attribute_code}/options/{code}`
                .replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(referenceEntityCode)))
                .replace(`{${"attribute_code"}}`, encodeURIComponent(String(attributeCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferenceEntityAttributeOptionApi - functional programming interface
 * @export
 */
export const ReferenceEntityAttributeOptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferenceEntityAttributeOptionApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of attribute options for a given reference entity.
         * @summary Get a list of attribute options of a given attribute for a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} attributeCode Code of the attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceEntityAttributesAttributeCodeOptions(referenceEntityCode: string, attributeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceEntityAttributesAttributeCodeOptions(referenceEntityCode, attributeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given attribute option.
         * @summary Get an attribute option for a given attribute of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceEntityAttributesAttributeCodeOptionsCode(referenceEntityCode: string, attributeCode: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceEntityAttributesAttributeCodeOptionsCode(referenceEntityCode, attributeCode, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given option for a given attribute and a given reference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given reference entity, it creates it.
         * @summary Update/create a reference entity attribute option
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchReferenceEntityAttributesAttributeCodeOptionsCode(referenceEntityCode: string, attributeCode: string, code: string, body: GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchReferenceEntityAttributesAttributeCodeOptionsCode(referenceEntityCode, attributeCode, code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReferenceEntityAttributeOptionApi - factory interface
 * @export
 */
export const ReferenceEntityAttributeOptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferenceEntityAttributeOptionApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of attribute options for a given reference entity.
         * @summary Get a list of attribute options of a given attribute for a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} attributeCode Code of the attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntityAttributesAttributeCodeOptions(referenceEntityCode: string, attributeCode: string, options?: any): AxiosPromise<Array<GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner>> {
            return localVarFp.getReferenceEntityAttributesAttributeCodeOptions(referenceEntityCode, attributeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given attribute option.
         * @summary Get an attribute option for a given attribute of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntityAttributesAttributeCodeOptionsCode(referenceEntityCode: string, attributeCode: string, code: string, options?: any): AxiosPromise<GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner> {
            return localVarFp.getReferenceEntityAttributesAttributeCodeOptionsCode(referenceEntityCode, attributeCode, code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given option for a given attribute and a given reference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given reference entity, it creates it.
         * @summary Update/create a reference entity attribute option
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} attributeCode Code of the attribute
         * @param {string} code Code of the resource
         * @param {GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchReferenceEntityAttributesAttributeCodeOptionsCode(referenceEntityCode: string, attributeCode: string, code: string, body: GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner, options?: any): AxiosPromise<void> {
            return localVarFp.patchReferenceEntityAttributesAttributeCodeOptionsCode(referenceEntityCode, attributeCode, code, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferenceEntityAttributeOptionApi - object-oriented interface
 * @export
 * @class ReferenceEntityAttributeOptionApi
 * @extends {BaseAPI}
 */
export class ReferenceEntityAttributeOptionApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of attribute options for a given reference entity.
     * @summary Get a list of attribute options of a given attribute for a given reference entity
     * @param {string} referenceEntityCode Code of the reference entity
     * @param {string} attributeCode Code of the attribute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityAttributeOptionApi
     */
    public getReferenceEntityAttributesAttributeCodeOptions(referenceEntityCode: string, attributeCode: string, options?: AxiosRequestConfig) {
        return ReferenceEntityAttributeOptionApiFp(this.configuration).getReferenceEntityAttributesAttributeCodeOptions(referenceEntityCode, attributeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given attribute option.
     * @summary Get an attribute option for a given attribute of a given reference entity
     * @param {string} referenceEntityCode Code of the reference entity
     * @param {string} attributeCode Code of the attribute
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityAttributeOptionApi
     */
    public getReferenceEntityAttributesAttributeCodeOptionsCode(referenceEntityCode: string, attributeCode: string, code: string, options?: AxiosRequestConfig) {
        return ReferenceEntityAttributeOptionApiFp(this.configuration).getReferenceEntityAttributesAttributeCodeOptionsCode(referenceEntityCode, attributeCode, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given option for a given attribute and a given reference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given reference entity, it creates it.
     * @summary Update/create a reference entity attribute option
     * @param {string} referenceEntityCode Code of the reference entity
     * @param {string} attributeCode Code of the attribute
     * @param {string} code Code of the resource
     * @param {GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityAttributeOptionApi
     */
    public patchReferenceEntityAttributesAttributeCodeOptionsCode(referenceEntityCode: string, attributeCode: string, code: string, body: GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner, options?: AxiosRequestConfig) {
        return ReferenceEntityAttributeOptionApiFp(this.configuration).patchReferenceEntityAttributesAttributeCodeOptionsCode(referenceEntityCode, attributeCode, code, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReferenceEntityMediaFileApi - axios parameter creator
 * @export
 */
export const ReferenceEntityMediaFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to download a given media file that is associated with a reference entity or a record.
         * @summary Download the media file associated to a reference entity or a record
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntityMediaFilesCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getReferenceEntityMediaFilesCode', 'code', code)
            const localVarPath = `/api/rest/v1/reference-entities-media-files/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a new media file and associate it to the image of a reference entity, or to the main image or to an attribute value of a record.
         * @summary Create a new media file for a reference entity or a record
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostReferenceEntityMediaFilesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReferenceEntityMediaFiles: async (contentType: string, body?: PostReferenceEntityMediaFilesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postReferenceEntityMediaFiles', 'contentType', contentType)
            const localVarPath = `/api/rest/v1/reference-entities-media-files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType != null) {
                localVarHeaderParameter['Content-type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferenceEntityMediaFileApi - functional programming interface
 * @export
 */
export const ReferenceEntityMediaFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferenceEntityMediaFileApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to download a given media file that is associated with a reference entity or a record.
         * @summary Download the media file associated to a reference entity or a record
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceEntityMediaFilesCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceEntityMediaFilesCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a new media file and associate it to the image of a reference entity, or to the main image or to an attribute value of a record.
         * @summary Create a new media file for a reference entity or a record
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostReferenceEntityMediaFilesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postReferenceEntityMediaFiles(contentType: string, body?: PostReferenceEntityMediaFilesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postReferenceEntityMediaFiles(contentType, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReferenceEntityMediaFileApi - factory interface
 * @export
 */
export const ReferenceEntityMediaFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferenceEntityMediaFileApiFp(configuration)
    return {
        /**
         * This endpoint allows you to download a given media file that is associated with a reference entity or a record.
         * @summary Download the media file associated to a reference entity or a record
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntityMediaFilesCode(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.getReferenceEntityMediaFilesCode(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a new media file and associate it to the image of a reference entity, or to the main image or to an attribute value of a record.
         * @summary Create a new media file for a reference entity or a record
         * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
         * @param {PostReferenceEntityMediaFilesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReferenceEntityMediaFiles(contentType: string, body?: PostReferenceEntityMediaFilesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postReferenceEntityMediaFiles(contentType, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferenceEntityMediaFileApi - object-oriented interface
 * @export
 * @class ReferenceEntityMediaFileApi
 * @extends {BaseAPI}
 */
export class ReferenceEntityMediaFileApi extends BaseAPI {
    /**
     * This endpoint allows you to download a given media file that is associated with a reference entity or a record.
     * @summary Download the media file associated to a reference entity or a record
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityMediaFileApi
     */
    public getReferenceEntityMediaFilesCode(code: string, options?: AxiosRequestConfig) {
        return ReferenceEntityMediaFileApiFp(this.configuration).getReferenceEntityMediaFilesCode(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a new media file and associate it to the image of a reference entity, or to the main image or to an attribute value of a record.
     * @summary Create a new media file for a reference entity or a record
     * @param {string} contentType Equal to \&#39;multipart/form-data\&#39;, no other value allowed
     * @param {PostReferenceEntityMediaFilesRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityMediaFileApi
     */
    public postReferenceEntityMediaFiles(contentType: string, body?: PostReferenceEntityMediaFilesRequest, options?: AxiosRequestConfig) {
        return ReferenceEntityMediaFileApiFp(this.configuration).postReferenceEntityMediaFiles(contentType, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReferenceEntityRecordApi - axios parameter creator
 * @export
 */
export const ReferenceEntityRecordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
         * @summary Get the list of the records of a reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} [search] Filter records of the reference entity, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-reference-entity-records\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [channel] Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#record-values-by-channel\&quot;&gt;Filter attribute values by channel&lt;/a&gt; section
         * @param {string} [locales] Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#record-values-by-locale\&quot;&gt;Filter attribute values by locale&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntityRecords: async (referenceEntityCode: string, search?: string, channel?: string, locales?: string, searchAfter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceEntityCode' is not null or undefined
            assertParamExists('getReferenceEntityRecords', 'referenceEntityCode', referenceEntityCode)
            const localVarPath = `/api/rest/v1/reference-entities/{reference_entity_code}/records`
                .replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(referenceEntityCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (locales !== undefined) {
                localVarQueryParameter['locales'] = locales;
            }

            if (searchAfter !== undefined) {
                localVarQueryParameter['search_after'] = searchAfter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to get the information about a given record for a given reference entity.
         * @summary Get a record of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntityRecordsCode: async (referenceEntityCode: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceEntityCode' is not null or undefined
            assertParamExists('getReferenceEntityRecordsCode', 'referenceEntityCode', referenceEntityCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getReferenceEntityRecordsCode', 'code', code)
            const localVarPath = `/api/rest/v1/reference-entities/{reference_entity_code}/records/{code}`
                .replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(referenceEntityCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update and/or create several records of one given reference entity at once. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
         * @summary Update/create several reference entity records
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {Array<PatchReferenceEntityRecordsRequestInner>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchReferenceEntityRecords: async (referenceEntityCode: string, body: Array<PatchReferenceEntityRecordsRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceEntityCode' is not null or undefined
            assertParamExists('patchReferenceEntityRecords', 'referenceEntityCode', referenceEntityCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchReferenceEntityRecords', 'body', body)
            const localVarPath = `/api/rest/v1/reference-entities/{reference_entity_code}/records`
                .replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(referenceEntityCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update a given record of a given renference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
         * @summary Update/create a record of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} code Code of the resource
         * @param {PatchReferenceEntityRecordsCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchReferenceEntityRecordsCode: async (referenceEntityCode: string, code: string, body: PatchReferenceEntityRecordsCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceEntityCode' is not null or undefined
            assertParamExists('patchReferenceEntityRecordsCode', 'referenceEntityCode', referenceEntityCode)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('patchReferenceEntityRecordsCode', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchReferenceEntityRecordsCode', 'body', body)
            const localVarPath = `/api/rest/v1/reference-entities/{reference_entity_code}/records/{code}`
                .replace(`{${"reference_entity_code"}}`, encodeURIComponent(String(referenceEntityCode)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferenceEntityRecordApi - functional programming interface
 * @export
 */
export const ReferenceEntityRecordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferenceEntityRecordApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
         * @summary Get the list of the records of a reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} [search] Filter records of the reference entity, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-reference-entity-records\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [channel] Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#record-values-by-channel\&quot;&gt;Filter attribute values by channel&lt;/a&gt; section
         * @param {string} [locales] Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#record-values-by-locale\&quot;&gt;Filter attribute values by locale&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceEntityRecords(referenceEntityCode: string, search?: string, channel?: string, locales?: string, searchAfter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferenceEntityRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceEntityRecords(referenceEntityCode, search, channel, locales, searchAfter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to get the information about a given record for a given reference entity.
         * @summary Get a record of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferenceEntityRecordsCode(referenceEntityCode: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchReferenceEntityRecordsRequestInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferenceEntityRecordsCode(referenceEntityCode, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update and/or create several records of one given reference entity at once. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
         * @summary Update/create several reference entity records
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {Array<PatchReferenceEntityRecordsRequestInner>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchReferenceEntityRecords(referenceEntityCode: string, body: Array<PatchReferenceEntityRecordsRequestInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatchReferenceEntityRecords200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchReferenceEntityRecords(referenceEntityCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update a given record of a given renference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
         * @summary Update/create a record of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} code Code of the resource
         * @param {PatchReferenceEntityRecordsCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchReferenceEntityRecordsCode(referenceEntityCode: string, code: string, body: PatchReferenceEntityRecordsCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchReferenceEntityRecordsCode(referenceEntityCode, code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReferenceEntityRecordApi - factory interface
 * @export
 */
export const ReferenceEntityRecordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferenceEntityRecordApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
         * @summary Get the list of the records of a reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} [search] Filter records of the reference entity, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-reference-entity-records\&quot;&gt;Filters&lt;/a&gt; section
         * @param {string} [channel] Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#record-values-by-channel\&quot;&gt;Filter attribute values by channel&lt;/a&gt; section
         * @param {string} [locales] Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#record-values-by-locale\&quot;&gt;Filter attribute values by locale&lt;/a&gt; section
         * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntityRecords(referenceEntityCode: string, search?: string, channel?: string, locales?: string, searchAfter?: string, options?: any): AxiosPromise<ReferenceEntityRecord> {
            return localVarFp.getReferenceEntityRecords(referenceEntityCode, search, channel, locales, searchAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to get the information about a given record for a given reference entity.
         * @summary Get a record of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} code Code of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferenceEntityRecordsCode(referenceEntityCode: string, code: string, options?: any): AxiosPromise<PatchReferenceEntityRecordsRequestInner> {
            return localVarFp.getReferenceEntityRecordsCode(referenceEntityCode, code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update and/or create several records of one given reference entity at once. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
         * @summary Update/create several reference entity records
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {Array<PatchReferenceEntityRecordsRequestInner>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchReferenceEntityRecords(referenceEntityCode: string, body: Array<PatchReferenceEntityRecordsRequestInner>, options?: any): AxiosPromise<Array<PatchReferenceEntityRecords200ResponseInner>> {
            return localVarFp.patchReferenceEntityRecords(referenceEntityCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update a given record of a given renference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
         * @summary Update/create a record of a given reference entity
         * @param {string} referenceEntityCode Code of the reference entity
         * @param {string} code Code of the resource
         * @param {PatchReferenceEntityRecordsCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchReferenceEntityRecordsCode(referenceEntityCode: string, code: string, body: PatchReferenceEntityRecordsCodeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchReferenceEntityRecordsCode(referenceEntityCode, code, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferenceEntityRecordApi - object-oriented interface
 * @export
 * @class ReferenceEntityRecordApi
 * @extends {BaseAPI}
 */
export class ReferenceEntityRecordApi extends BaseAPI {
    /**
     * This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
     * @summary Get the list of the records of a reference entity
     * @param {string} referenceEntityCode Code of the reference entity
     * @param {string} [search] Filter records of the reference entity, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-reference-entity-records\&quot;&gt;Filters&lt;/a&gt; section
     * @param {string} [channel] Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#record-values-by-channel\&quot;&gt;Filter attribute values by channel&lt;/a&gt; section
     * @param {string} [locales] Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#record-values-by-locale\&quot;&gt;Filter attribute values by locale&lt;/a&gt; section
     * @param {string} [searchAfter] Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityRecordApi
     */
    public getReferenceEntityRecords(referenceEntityCode: string, search?: string, channel?: string, locales?: string, searchAfter?: string, options?: AxiosRequestConfig) {
        return ReferenceEntityRecordApiFp(this.configuration).getReferenceEntityRecords(referenceEntityCode, search, channel, locales, searchAfter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to get the information about a given record for a given reference entity.
     * @summary Get a record of a given reference entity
     * @param {string} referenceEntityCode Code of the reference entity
     * @param {string} code Code of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityRecordApi
     */
    public getReferenceEntityRecordsCode(referenceEntityCode: string, code: string, options?: AxiosRequestConfig) {
        return ReferenceEntityRecordApiFp(this.configuration).getReferenceEntityRecordsCode(referenceEntityCode, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update and/or create several records of one given reference entity at once. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
     * @summary Update/create several reference entity records
     * @param {string} referenceEntityCode Code of the reference entity
     * @param {Array<PatchReferenceEntityRecordsRequestInner>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityRecordApi
     */
    public patchReferenceEntityRecords(referenceEntityCode: string, body: Array<PatchReferenceEntityRecordsRequestInner>, options?: AxiosRequestConfig) {
        return ReferenceEntityRecordApiFp(this.configuration).patchReferenceEntityRecords(referenceEntityCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update a given record of a given renference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
     * @summary Update/create a record of a given reference entity
     * @param {string} referenceEntityCode Code of the reference entity
     * @param {string} code Code of the resource
     * @param {PatchReferenceEntityRecordsCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceEntityRecordApi
     */
    public patchReferenceEntityRecordsCode(referenceEntityCode: string, code: string, body: PatchReferenceEntityRecordsCodeRequest, options?: AxiosRequestConfig) {
        return ReferenceEntityRecordApiFp(this.configuration).patchReferenceEntityRecordsCode(referenceEntityCode, code, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to get the version and the edition of the PIM. Example of what you can get <table class=\"description-table\"> <thead> <tr> <th align=\"center\">Environment</th> <th align=\"center\">Edition</th> <th align=\"center\">Version</th> </tr> </thead> <tbody> <tr> <td align=\"center\">SaaS EE</td> <td align=\"center\">Serenity</td> <td align=\"center\">v20230112013744</td> </tr> <tr> <td align=\"center\">SaaS CE</td> <td align=\"center\">GE</td> <td align=\"center\">v20210526040645</td> </tr> <tr> <td align=\"center\">PaaS or onPrem EE</td> <td align=\"center\">EE</td> <td align=\"center\">5.0.28</td> </tr> <tr> <td align=\"center\">PaaS or onPrem CE</td> <td align=\"center\">CE</td> <td align=\"center\">5.0.28</td> </tr> </tbody> </table>
         * @summary Get system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInformation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rest/v1/system-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to get the version and the edition of the PIM. Example of what you can get <table class=\"description-table\"> <thead> <tr> <th align=\"center\">Environment</th> <th align=\"center\">Edition</th> <th align=\"center\">Version</th> </tr> </thead> <tbody> <tr> <td align=\"center\">SaaS EE</td> <td align=\"center\">Serenity</td> <td align=\"center\">v20230112013744</td> </tr> <tr> <td align=\"center\">SaaS CE</td> <td align=\"center\">GE</td> <td align=\"center\">v20210526040645</td> </tr> <tr> <td align=\"center\">PaaS or onPrem EE</td> <td align=\"center\">EE</td> <td align=\"center\">5.0.28</td> </tr> <tr> <td align=\"center\">PaaS or onPrem CE</td> <td align=\"center\">CE</td> <td align=\"center\">5.0.28</td> </tr> </tbody> </table>
         * @summary Get system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemInformation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemInformation200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemInformation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * This endpoint allows you to get the version and the edition of the PIM. Example of what you can get <table class=\"description-table\"> <thead> <tr> <th align=\"center\">Environment</th> <th align=\"center\">Edition</th> <th align=\"center\">Version</th> </tr> </thead> <tbody> <tr> <td align=\"center\">SaaS EE</td> <td align=\"center\">Serenity</td> <td align=\"center\">v20230112013744</td> </tr> <tr> <td align=\"center\">SaaS CE</td> <td align=\"center\">GE</td> <td align=\"center\">v20210526040645</td> </tr> <tr> <td align=\"center\">PaaS or onPrem EE</td> <td align=\"center\">EE</td> <td align=\"center\">5.0.28</td> </tr> <tr> <td align=\"center\">PaaS or onPrem CE</td> <td align=\"center\">CE</td> <td align=\"center\">5.0.28</td> </tr> </tbody> </table>
         * @summary Get system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInformation(options?: any): AxiosPromise<GetSystemInformation200Response> {
            return localVarFp.getSystemInformation(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * This endpoint allows you to get the version and the edition of the PIM. Example of what you can get <table class=\"description-table\"> <thead> <tr> <th align=\"center\">Environment</th> <th align=\"center\">Edition</th> <th align=\"center\">Version</th> </tr> </thead> <tbody> <tr> <td align=\"center\">SaaS EE</td> <td align=\"center\">Serenity</td> <td align=\"center\">v20230112013744</td> </tr> <tr> <td align=\"center\">SaaS CE</td> <td align=\"center\">GE</td> <td align=\"center\">v20210526040645</td> </tr> <tr> <td align=\"center\">PaaS or onPrem EE</td> <td align=\"center\">EE</td> <td align=\"center\">5.0.28</td> </tr> <tr> <td align=\"center\">PaaS or onPrem CE</td> <td align=\"center\">CE</td> <td align=\"center\">5.0.28</td> </tr> </tbody> </table>
     * @summary Get system information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getSystemInformation(options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).getSystemInformation(options).then((request) => request(this.axios, this.basePath));
    }
}



