/* tslint:disable */
/* eslint-disable */
/**
 * ApiAccountModule
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenDto
 */
export interface AccessTokenDto {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'sub': string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'iss': string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'client_id': string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'event_id': string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'token_use': string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'scope': string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'auth_time': string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'exp': string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'iat': string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'jti': string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'username': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccessTokenDto
     */
    'cognito:groups': Array<string>;
}
/**
 * 
 * @export
 * @interface AuthCredentialsDto
 */
export interface AuthCredentialsDto {
    /**
     * 
     * @type {string}
     * @memberof AuthCredentialsDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AuthCredentialsDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface AuthMfaDto
 */
export interface AuthMfaDto {
    /**
     * 
     * @type {string}
     * @memberof AuthMfaDto
     */
    'mfa': string;
    /**
     * 
     * @type {string}
     * @memberof AuthMfaDto
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface AuthTokensDto
 */
export interface AuthTokensDto {
    /**
     * 
     * @type {string}
     * @memberof AuthTokensDto
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof AuthTokensDto
     */
    'idToken': string;
}
/**
 * 
 * @export
 * @interface EmailDto
 */
export interface EmailDto {
    /**
     * 
     * @type {string}
     * @memberof EmailDto
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof EmailDto
     */
    'isAnon'?: boolean;
}
/**
 * 
 * @export
 * @interface HealthDto
 */
export interface HealthDto {
    /**
     * 
     * @type {number}
     * @memberof HealthDto
     */
    'free': number;
    /**
     * 
     * @type {number}
     * @memberof HealthDto
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof HealthDto
     */
    'percentUtilization': number;
    /**
     * 
     * @type {string}
     * @memberof HealthDto
     */
    'version': string;
}
/**
 * 
 * @export
 * @interface Inventory
 */
export interface Inventory {
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    'azVehicleId': string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    'azVehicleMakeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    'azVehicleModelId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    'vehicleModelName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    'azVehicleEngineId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    'azVehicleEngineName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    'vehicleDisplayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    'vehicleMakeName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    'azVehicleModelName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    'vehicleYear'?: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    's3Key'?: string;
    /**
     * 
     * @type {User}
     * @memberof Inventory
     */
    'user': User;
}
/**
 * 
 * @export
 * @interface InventorySearchDto
 */
export interface InventorySearchDto {
    /**
     * 
     * @type {Array<Inventory>}
     * @memberof InventorySearchDto
     */
    'data': Array<Inventory>;
    /**
     * 
     * @type {number}
     * @memberof InventorySearchDto
     */
    'pagingKey': number;
    /**
     * 
     * @type {number}
     * @memberof InventorySearchDto
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Invitation
     */
    'emailValid'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface PasswordDto
 */
export interface PasswordDto {
    /**
     * 
     * @type {string}
     * @memberof PasswordDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordDto
     */
    'confirm': string;
}
/**
 * 
 * @export
 * @interface PasswordReset
 */
export interface PasswordReset {
    /**
     * 
     * @type {string}
     * @memberof PasswordReset
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordReset
     */
    'hash': string;
    /**
     * 
     * @type {boolean}
     * @memberof PasswordReset
     */
    'emailValid'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PasswordReset
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordReset
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordReset
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface SuccessDto
 */
export interface SuccessDto {
    /**
     * 
     * @type {boolean}
     * @memberof SuccessDto
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface UrlDto
 */
export interface UrlDto {
    /**
     * 
     * @type {string}
     * @memberof UrlDto
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'active': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {object}
     * @memberof User
     */
    'data'?: object;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UserClaimDto
 */
export interface UserClaimDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof UserClaimDto
     */
    'roles': Array<string>;
}
/**
 * 
 * @export
 * @interface UserIdDto
 */
export interface UserIdDto {
    /**
     * 
     * @type {string}
     * @memberof UserIdDto
     */
    'userId': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthCredentialsDto} authCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAuthenticate: async (authCredentialsDto: AuthCredentialsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authCredentialsDto' is not null or undefined
            assertParamExists('authControllerAuthenticate', 'authCredentialsDto', authCredentialsDto)
            const localVarPath = `/api/auth/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authCredentialsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthCredentialsDto} authCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (authCredentialsDto: AuthCredentialsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authCredentialsDto' is not null or undefined
            assertParamExists('authControllerLogin', 'authCredentialsDto', authCredentialsDto)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authCredentialsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthMfaDto} authMfaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerValidateMfaCode: async (authMfaDto: AuthMfaDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authMfaDto' is not null or undefined
            assertParamExists('authControllerValidateMfaCode', 'authMfaDto', authMfaDto)
            const localVarPath = `/api/auth/validate-mfa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authMfaDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileControllerDownload: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('fileControllerDownload', 'key', key)
            const localVarPath = `/api/file/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileControllerDownloadByKey: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('fileControllerDownloadByKey', 'key', key)
            const localVarPath = `/api/file/key/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryControllerGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inventoryControllerGet', 'id', id)
            const localVarPath = `/api/inventory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} [search] 
         * @param {any} [pagesize] 
         * @param {any} [pagingkey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryControllerGetDashboard: async (search?: any, pagesize?: any, pagingkey?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inventory/dashboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (pagingkey !== undefined) {
                localVarQueryParameter['pagingkey'] = pagingkey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryControllerIndex: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Inventory} inventory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryControllerPost: async (inventory: Inventory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventory' is not null or undefined
            assertParamExists('inventoryControllerPost', 'inventory', inventory)
            const localVarPath = `/api/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inventory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryControllerPostLogo: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inventoryControllerPostLogo', 'id', id)
            const localVarPath = `/api/inventory/{id}/image`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Inventory} inventory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryControllerPut: async (id: string, inventory: Inventory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inventoryControllerPut', 'id', id)
            // verify required parameter 'inventory' is not null or undefined
            assertParamExists('inventoryControllerPut', 'inventory', inventory)
            const localVarPath = `/api/inventory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inventory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserIdDto} userIdDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userClaimControllerPost: async (userIdDto: UserIdDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userIdDto' is not null or undefined
            assertParamExists('userClaimControllerPost', 'userIdDto', userIdDto)
            const localVarPath = `/api/user-claim`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userIdDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInfoControllerGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInfoControllerGetAccessToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user-info/access-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} hash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInvitationControllerGet: async (hash: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('userInvitationControllerGet', 'hash', hash)
            const localVarPath = `/api/user/invitation/{hash}`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmailDto} emailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInvitationControllerPost: async (emailDto: EmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailDto' is not null or undefined
            assertParamExists('userInvitationControllerPost', 'emailDto', emailDto)
            const localVarPath = `/api/user/invitation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} hash 
         * @param {PasswordDto} passwordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInvitationControllerPutPassword: async (hash: string, passwordDto: PasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('userInvitationControllerPutPassword', 'hash', hash)
            // verify required parameter 'passwordDto' is not null or undefined
            assertParamExists('userInvitationControllerPutPassword', 'passwordDto', passwordDto)
            const localVarPath = `/api/user/invitation/{hash}/password`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} hash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPasswordResetControllerGet: async (hash: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('userPasswordResetControllerGet', 'hash', hash)
            const localVarPath = `/api/user/password-reset/{hash}`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmailDto} emailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPasswordResetControllerPost: async (emailDto: EmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailDto' is not null or undefined
            assertParamExists('userPasswordResetControllerPost', 'emailDto', emailDto)
            const localVarPath = `/api/user/password-reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} hash 
         * @param {PasswordDto} passwordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPasswordResetControllerPut: async (hash: string, passwordDto: PasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('userPasswordResetControllerPut', 'hash', hash)
            // verify required parameter 'passwordDto' is not null or undefined
            assertParamExists('userPasswordResetControllerPut', 'passwordDto', passwordDto)
            const localVarPath = `/api/user/password-reset/{hash}`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthCredentialsDto} authCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAuthenticate(authCredentialsDto: AuthCredentialsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAuthenticate(authCredentialsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthCredentialsDto} authCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(authCredentialsDto: AuthCredentialsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokensDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(authCredentialsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthMfaDto} authMfaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerValidateMfaCode(authMfaDto: AuthMfaDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokensDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerValidateMfaCode(authMfaDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileControllerDownload(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileControllerDownload(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileControllerDownloadByKey(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileControllerDownloadByKey(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inventoryControllerGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inventory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inventoryControllerGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} [search] 
         * @param {any} [pagesize] 
         * @param {any} [pagingkey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inventoryControllerGetDashboard(search?: any, pagesize?: any, pagingkey?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventorySearchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inventoryControllerGetDashboard(search, pagesize, pagingkey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inventoryControllerIndex(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Inventory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inventoryControllerIndex(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Inventory} inventory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inventoryControllerPost(inventory: Inventory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inventory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inventoryControllerPost(inventory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inventoryControllerPostLogo(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inventory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inventoryControllerPostLogo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Inventory} inventory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inventoryControllerPut(id: string, inventory: Inventory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inventoryControllerPut(id, inventory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserIdDto} userIdDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userClaimControllerPost(userIdDto: UserIdDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserClaimDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userClaimControllerPost(userIdDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userInfoControllerGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userInfoControllerGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userInfoControllerGetAccessToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userInfoControllerGetAccessToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} hash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userInvitationControllerGet(hash: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userInvitationControllerGet(hash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EmailDto} emailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userInvitationControllerPost(emailDto: EmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userInvitationControllerPost(emailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} hash 
         * @param {PasswordDto} passwordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userInvitationControllerPutPassword(hash: string, passwordDto: PasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userInvitationControllerPutPassword(hash, passwordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} hash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPasswordResetControllerGet(hash: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordReset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userPasswordResetControllerGet(hash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EmailDto} emailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPasswordResetControllerPost(emailDto: EmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordReset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userPasswordResetControllerPost(emailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} hash 
         * @param {PasswordDto} passwordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPasswordResetControllerPut(hash: string, passwordDto: PasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordReset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userPasswordResetControllerPut(hash, passwordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthCredentialsDto} authCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAuthenticate(authCredentialsDto: AuthCredentialsDto, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerAuthenticate(authCredentialsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthCredentialsDto} authCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(authCredentialsDto: AuthCredentialsDto, options?: any): AxiosPromise<AuthTokensDto> {
            return localVarFp.authControllerLogin(authCredentialsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthMfaDto} authMfaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerValidateMfaCode(authMfaDto: AuthMfaDto, options?: any): AxiosPromise<AuthTokensDto> {
            return localVarFp.authControllerValidateMfaCode(authMfaDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileControllerDownload(key: string, options?: any): AxiosPromise<UrlDto> {
            return localVarFp.fileControllerDownload(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileControllerDownloadByKey(key: string, options?: any): AxiosPromise<UrlDto> {
            return localVarFp.fileControllerDownloadByKey(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerGet(options?: any): AxiosPromise<HealthDto> {
            return localVarFp.healthControllerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryControllerGet(id: string, options?: any): AxiosPromise<Inventory> {
            return localVarFp.inventoryControllerGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} [search] 
         * @param {any} [pagesize] 
         * @param {any} [pagingkey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryControllerGetDashboard(search?: any, pagesize?: any, pagingkey?: any, options?: any): AxiosPromise<InventorySearchDto> {
            return localVarFp.inventoryControllerGetDashboard(search, pagesize, pagingkey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryControllerIndex(options?: any): AxiosPromise<Array<Inventory>> {
            return localVarFp.inventoryControllerIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Inventory} inventory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryControllerPost(inventory: Inventory, options?: any): AxiosPromise<Inventory> {
            return localVarFp.inventoryControllerPost(inventory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryControllerPostLogo(id: string, options?: any): AxiosPromise<Inventory> {
            return localVarFp.inventoryControllerPostLogo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Inventory} inventory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryControllerPut(id: string, inventory: Inventory, options?: any): AxiosPromise<SuccessDto> {
            return localVarFp.inventoryControllerPut(id, inventory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserIdDto} userIdDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userClaimControllerPost(userIdDto: UserIdDto, options?: any): AxiosPromise<UserClaimDto> {
            return localVarFp.userClaimControllerPost(userIdDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInfoControllerGet(options?: any): AxiosPromise<User> {
            return localVarFp.userInfoControllerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInfoControllerGetAccessToken(options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.userInfoControllerGetAccessToken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} hash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInvitationControllerGet(hash: string, options?: any): AxiosPromise<Invitation> {
            return localVarFp.userInvitationControllerGet(hash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmailDto} emailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInvitationControllerPost(emailDto: EmailDto, options?: any): AxiosPromise<Invitation> {
            return localVarFp.userInvitationControllerPost(emailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} hash 
         * @param {PasswordDto} passwordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInvitationControllerPutPassword(hash: string, passwordDto: PasswordDto, options?: any): AxiosPromise<Invitation> {
            return localVarFp.userInvitationControllerPutPassword(hash, passwordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} hash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPasswordResetControllerGet(hash: string, options?: any): AxiosPromise<PasswordReset> {
            return localVarFp.userPasswordResetControllerGet(hash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmailDto} emailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPasswordResetControllerPost(emailDto: EmailDto, options?: any): AxiosPromise<PasswordReset> {
            return localVarFp.userPasswordResetControllerPost(emailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} hash 
         * @param {PasswordDto} passwordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPasswordResetControllerPut(hash: string, passwordDto: PasswordDto, options?: any): AxiosPromise<PasswordReset> {
            return localVarFp.userPasswordResetControllerPut(hash, passwordDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {AuthCredentialsDto} authCredentialsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerAuthenticate(authCredentialsDto: AuthCredentialsDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerAuthenticate(authCredentialsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthCredentialsDto} authCredentialsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerLogin(authCredentialsDto: AuthCredentialsDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerLogin(authCredentialsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerLogout(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthMfaDto} authMfaDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerValidateMfaCode(authMfaDto: AuthMfaDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerValidateMfaCode(authMfaDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fileControllerDownload(key: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fileControllerDownload(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fileControllerDownloadByKey(key: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fileControllerDownloadByKey(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthControllerGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthControllerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inventoryControllerGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inventoryControllerGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {any} [search] 
     * @param {any} [pagesize] 
     * @param {any} [pagingkey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inventoryControllerGetDashboard(search?: any, pagesize?: any, pagingkey?: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inventoryControllerGetDashboard(search, pagesize, pagingkey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inventoryControllerIndex(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inventoryControllerIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Inventory} inventory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inventoryControllerPost(inventory: Inventory, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inventoryControllerPost(inventory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inventoryControllerPostLogo(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inventoryControllerPostLogo(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {Inventory} inventory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inventoryControllerPut(id: string, inventory: Inventory, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).inventoryControllerPut(id, inventory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserIdDto} userIdDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userClaimControllerPost(userIdDto: UserIdDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userClaimControllerPost(userIdDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userInfoControllerGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userInfoControllerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userInfoControllerGetAccessToken(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userInfoControllerGetAccessToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} hash 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userInvitationControllerGet(hash: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userInvitationControllerGet(hash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmailDto} emailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userInvitationControllerPost(emailDto: EmailDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userInvitationControllerPost(emailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} hash 
     * @param {PasswordDto} passwordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userInvitationControllerPutPassword(hash: string, passwordDto: PasswordDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userInvitationControllerPutPassword(hash, passwordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} hash 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userPasswordResetControllerGet(hash: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userPasswordResetControllerGet(hash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmailDto} emailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userPasswordResetControllerPost(emailDto: EmailDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userPasswordResetControllerPost(emailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} hash 
     * @param {PasswordDto} passwordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userPasswordResetControllerPut(hash: string, passwordDto: PasswordDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userPasswordResetControllerPut(hash, passwordDto, options).then((request) => request(this.axios, this.basePath));
    }
}



